var ryvus = (function(){
    // Generated by psc-bundle 0.7.0.0
    var Ryvus = { };
    (function(exports) {
      // Generated by psc-make version 0.6.9.5
      "use strict";
    
          function cons(e) {
            return function(l) {
              return [e].concat(l);
            };
          }
          ;
    
          function showStringImpl(s) {
            return JSON.stringify(s);
          }
          ;
    
          function showNumberImpl(n) {
            return n.toString();
          }
          ;
    
          function showArrayImpl(f) {
            return function(xs) {
              var ss = [];
              for (var i = 0, l = xs.length; i < l; i++) {
                ss[i] = f(xs[i]);
              }
              return '[' + ss.join(',') + ']';
            };
          }
          ;
    
          function numAdd(n1) {
            return function(n2) {
              return n1 + n2;
            };
          }
          ;
    
          function numSub(n1) {
            return function(n2) {
              return n1 - n2;
            };
          }
          ;
    
          function numMul(n1) {
            return function(n2) {
              return n1 * n2;
            };
          }
          ;
    
          function numDiv(n1) {
            return function(n2) {
              return n1 / n2;
            };
          }
          ;
    
          function numMod(n1) {
            return function(n2) {
              return n1 % n2;
            };
          }
          ;
    
          function refEq(r1) {
            return function(r2) {
              return r1 === r2;
            };
          }
          ;
    
          function refIneq(r1) {
            return function(r2) {
              return r1 !== r2;
            };
          }
          ;
    
          function eqArrayImpl(f) {
            return function(xs) {
              return function(ys) {
                if (xs.length !== ys.length) return false;
                for (var i = 0; i < xs.length; i++) {
                  if (!f(xs[i])(ys[i])) return false;
                }
                return true;
              };
            };
          }
          ;
    
          function unsafeCompareImpl(lt) {
            return function(eq) {
              return function(gt) {
                return function(x) {
                  return function(y) {
                    return x < y ? lt : x > y ? gt : eq;
                  };
                };
              };
            };
          }
          ;
    
          function numShl(n1) {
            return function(n2) {
              return n1 << n2;
            };
          }
          ;
    
          function numShr(n1) {
            return function(n2) {
              return n1 >> n2;
            };
          }
          ;
    
          function numZshr(n1) {
            return function(n2) {
              return n1 >>> n2;
            };
          }
          ;
    
          function numAnd(n1) {
            return function(n2) {
              return n1 & n2;
            };
          }
          ;
    
          function numOr(n1) {
            return function(n2) {
              return n1 | n2;
            };
          }
          ;
    
          function numXor(n1) {
            return function(n2) {
              return n1 ^ n2;
            };
          }
          ;
    
          function numComplement(n) {
            return ~n;
          }
          ;
    
          function boolAnd(b1) {
            return function(b2) {
              return b1 && b2;
            };
          }
          ;
    
          function boolOr(b1) {
            return function(b2) {
              return b1 || b2;
            };
          }
          ;
    
          function boolNot(b) {
            return !b;
          }
          ;
    
          function concatString(s1) {
            return function(s2) {
              return s1 + s2;
            };
          }
          ;
      var Semigroupoid = function ($less$less$less) {
          this["<<<"] = $less$less$less;
      };
      var Show = function (show) {
          this.show = show;
      };
      var Functor = function ($less$dollar$greater) {
          this["<$>"] = $less$dollar$greater;
      };
      var Apply = function ($less$times$greater, __superclass_Prelude$dotFunctor_0) {
          this["<*>"] = $less$times$greater;
          this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      };
      var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
          this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
          this.pure = pure;
      };
      var Bind = function ($greater$greater$eq, __superclass_Prelude$dotApply_0) {
          this[">>="] = $greater$greater$eq;
          this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      };
      var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
          this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
          this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
      };
      var Eq = function ($div$eq, $eq$eq) {
          this["/="] = $div$eq;
          this["=="] = $eq$eq;
      };
      var BoolLike = function ($amp$amp, not, $bar$bar) {
          this["&&"] = $amp$amp;
          this.not = not;
          this["||"] = $bar$bar;
      };
      var Semigroup = function ($less$greater) {
          this["<>"] = $less$greater;
      };
      var $bar$bar = function (dict) {
          return dict["||"];
      };
      var $greater$greater$eq = function (dict) {
          return dict[">>="];
      };
      var $eq$eq = function (dict) {
          return dict["=="];
      };
      var $less$greater = function (dict) {
          return dict["<>"];
      };
      var $less$less$less = function (dict) {
          return dict["<<<"];
      };
      var $less$times$greater = function (dict) {
          return dict["<*>"];
      };
      var $less$dollar$greater = function (dict) {
          return dict["<$>"];
      };
      var $colon = cons;
      var $div$eq = function (dict) {
          return dict["/="];
      };
      var $plus$plus = function (__dict_Semigroup_2) {
          return $less$greater(__dict_Semigroup_2);
      };
      var $amp$amp = function (dict) {
          return dict["&&"];
      }; 
      var showString = new Show(showStringImpl);
      var show = function (dict) {
          return dict.show;
      };                                                      
      var semigroupoidArr = new Semigroupoid(function (f) {
          return function (g) {
              return function (x) {
                  return f(g(x));
              };
          };
      });
      var semigroupString = new Semigroup(concatString);
      var pure = function (dict) {
          return dict.pure;
      };
      var $$return = function (__dict_Monad_5) {
          return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
      };
      var not = function (dict) {
          return dict.not;
      };                                                             
      var flip = function (f) {
          return function (b) {
              return function (a) {
                  return f(a)(b);
              };
          };
      }; 
      var eqString = new Eq(refIneq, refEq);
      var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
      var eqArray = function (__dict_Eq_9) {
          return new Eq(function (xs) {
              return function (ys) {
                  return not(boolLikeBoolean)($eq$eq(eqArray(__dict_Eq_9))(xs)(ys));
              };
          }, function (xs) {
              return function (ys) {
                  return eqArrayImpl($eq$eq(__dict_Eq_9))(xs)(ys);
              };
          });
      }; 
      var ap = function (__dict_Monad_16) {
          return function (f) {
              return function (a) {
                  return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                      return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                          return $$return(__dict_Monad_16)(_2(_1));
                      });
                  });
              };
          };
      };
      exports["Semigroup"] = Semigroup;
      exports["BoolLike"] = BoolLike;
      exports["Eq"] = Eq;
      exports["Monad"] = Monad;
      exports["Bind"] = Bind;
      exports["Applicative"] = Applicative;
      exports["Apply"] = Apply;
      exports["Functor"] = Functor;
      exports["Show"] = Show;
      exports["Semigroupoid"] = Semigroupoid;
      exports["++"] = $plus$plus;
      exports["<>"] = $less$greater;
      exports["not"] = not;
      exports["/="] = $div$eq;
      exports["=="] = $eq$eq;
      exports["ap"] = ap;
      exports["return"] = $$return;
      exports[">>="] = $greater$greater$eq;
      exports["pure"] = pure;
      exports["<$>"] = $less$dollar$greater;
      exports["show"] = show;
      exports[":"] = $colon;
      exports["<<<"] = $less$less$less;
      exports["flip"] = flip;
      exports["semigroupoidArr"] = semigroupoidArr;
      exports["showString"] = showString;
      exports["eqString"] = eqString;
      exports["eqArray"] = eqArray;
      exports["boolLikeBoolean"] = boolLikeBoolean;
      exports["semigroupString"] = semigroupString;;
     
    })(Ryvus["Prelude"] = Ryvus["Prelude"] || {});
    (function(exports) {
      // Generated by psc-make version 0.6.9.5
      "use strict";
      var Prelude = Ryvus["Prelude"];  
      var Alt = function ($less$bar$greater, __superclass_Prelude$dotFunctor_0) {
          this["<|>"] = $less$bar$greater;
          this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      };
      var $less$bar$greater = function (dict) {
          return dict["<|>"];
      };
      exports["Alt"] = Alt;
      exports["<|>"] = $less$bar$greater;;
     
    })(Ryvus["Control.Alt"] = Ryvus["Control.Alt"] || {});
    (function(exports) {
      // Generated by psc-make version 0.6.9.5
      "use strict";
      var Prelude = Ryvus["Prelude"];  
      var $$Error = function (noMsg, strMsg) {
          this.noMsg = noMsg;
          this.strMsg = strMsg;
      };
      var strMsg = function (dict) {
          return dict.strMsg;
      };
      var noMsg = function (dict) {
          return dict.noMsg;
      };
      exports["Error"] = $$Error;
      exports["strMsg"] = strMsg;
      exports["noMsg"] = noMsg;;
     
    })(Ryvus["Control.Monad.Error"] = Ryvus["Control.Monad.Error"] || {});
    (function(exports) {
      // Generated by psc-make version 0.6.9.5
      "use strict";
      var Prelude = Ryvus["Prelude"];
      var Control_Alt = Ryvus["Control.Alt"];
      var Control_Alternative = Ryvus["Control.Alternative"];
      var Control_Extend = Ryvus["Control.Extend"];
      var Control_MonadPlus = Ryvus["Control.MonadPlus"];
      var Control_Plus = Ryvus["Control.Plus"];  
      var Nothing = (function () {
          function Nothing() {
    
          };
          Nothing.value = new Nothing();
          return Nothing;
      })();
      var Just = (function () {
          function Just(value0) {
              this.value0 = value0;
          };
          Just.create = function (value0) {
              return new Just(value0);
          };
          return Just;
      })();                                             
      var functorMaybe = new Prelude.Functor(function (fn) {
          return function (_211) {
              if (_211 instanceof Just) {
                  return new Just(fn(_211.value0));
              };
              return Nothing.value;
          };
      });
      var applyMaybe = new Prelude.Apply(function (_212) {
          return function (x) {
              if (_212 instanceof Just) {
                  return Prelude["<$>"](functorMaybe)(_212.value0)(x);
              };
              if (_212 instanceof Nothing) {
                  return Nothing.value;
              };
              throw new Error("Failed pattern match");
          };
      }, function () {
          return functorMaybe;
      });
      var bindMaybe = new Prelude.Bind(function (_214) {
          return function (k) {
              if (_214 instanceof Just) {
                  return k(_214.value0);
              };
              if (_214 instanceof Nothing) {
                  return Nothing.value;
              };
              throw new Error("Failed pattern match");
          };
      }, function () {
          return applyMaybe;
      });
      var applicativeMaybe = new Prelude.Applicative(function () {
          return applyMaybe;
      }, Just.create);
      var monadMaybe = new Prelude.Monad(function () {
          return applicativeMaybe;
      }, function () {
          return bindMaybe;
      });
      exports["Nothing"] = Nothing;
      exports["Just"] = Just;
      exports["functorMaybe"] = functorMaybe;
      exports["applyMaybe"] = applyMaybe;
      exports["applicativeMaybe"] = applicativeMaybe;
      exports["bindMaybe"] = bindMaybe;
      exports["monadMaybe"] = monadMaybe;;
     
    })(Ryvus["Data.Maybe"] = Ryvus["Data.Maybe"] || {});
    (function(exports) {
      // Generated by psc-make version 0.6.9.5
      "use strict";
      var Prelude = Ryvus["Prelude"];
      var Data_Maybe = Ryvus["Data.Maybe"];
      var Control_Alt = Ryvus["Control.Alt"];
      var Control_Plus = Ryvus["Control.Plus"];
      var Control_Alternative = Ryvus["Control.Alternative"];
      var Control_MonadPlus = Ryvus["Control.MonadPlus"];
      var Prelude_Unsafe = Ryvus["Prelude.Unsafe"];  
      function snoc(l) {  return function (e) {    var l1 = l.slice();    l1.push(e);     return l1;  };};
      function length (xs) {  return xs.length;};
      function findIndex (f) {  return function (arr) {    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
      function findLastIndex (f) {  return function (arr) {    for (var i = arr.length - 1; i >= 0; i--) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
      function append (l1) {  return function (l2) {    return l1.concat(l2);  };};
      function concat (xss) {  var result = [];  for (var i = 0, l = xss.length; i < l; i++) {    result.push.apply(result, xss[i]);  }  return result;};
      function reverse (l) {  return l.slice().reverse();};
      function drop (n) {  return function (l) {    return l.slice(n);  };};
      function slice (s) {  return function (e) {    return function (l) {      return l.slice(s, e);    };  };};
      function insertAt (index) {  return function (a) {    return function (l) {      var l1 = l.slice();      l1.splice(index, 0, a);      return l1;    };   };};
      function deleteAt (index) {  return function (n) {    return function (l) {      var l1 = l.slice();      l1.splice(index, n);      return l1;    };   };};
      function updateAt (index) {  return function (a) {    return function (l) {      var i = ~~index;      if (i < 0 || i >= l.length) return l;      var l1 = l.slice();      l1[i] = a;      return l1;    };   };};
      function concatMap (f) {  return function (arr) {    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      Array.prototype.push.apply(result, f(arr[i]));    }    return result;  };};
      function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
      function filter (f) {  return function (arr) {    var n = 0;    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        result[n++] = arr[i];      }    }    return result;  };};
      function range (start) {  return function (end) {    var i = ~~start, e = ~~end;    var step = i > e ? -1 : 1;    var result = [i], n = 1;    while (i !== e) {      i += step;      result[n++] = i;    }    return result;  };};
      function zipWith (f) {  return function (xs) {    return function (ys) {      var l = xs.length < ys.length ? xs.length : ys.length;      var result = new Array(l);      for (var i = 0; i < l; i++) {        result[i] = f(xs[i])(ys[i]);      }      return result;    };  };};
      function sortJS (f) {  return function (l) {    return l.slice().sort(function (x, y) {      return f(x)(y);    });  };};
    
      function replicate(nn) {
        return function(v) {
          var n = nn > 0? nn : 0;
          var r = new Array(n);
          for (var i = 0; i < n; i++)
            r[i] = v;
          return r;
         };
      }
      ; 
        var semigroupArray = new Prelude.Semigroup(append);
        exports["map"] = map;
        exports["semigroupArray"] = semigroupArray;;
        
     
    })(Ryvus["Data.Array"] = Ryvus["Data.Array"] || {});
    (function(exports) {
      // Generated by psc-make version 0.6.9.5
      "use strict";
      var Prelude = Ryvus["Prelude"];  
    
          function toCharCode(c) {
            return c.charCodeAt(0);
          }
          ;
    
          function fromCharCode(c) {
            return String.fromCharCode(c);
          }
          ;
      var charString = function (_149) {
          return _149;
      };
      exports["charString"] = charString;;
     
    })(Ryvus["Data.Char"] = Ryvus["Data.Char"] || {});
    (function(exports) {
      // Generated by psc-make version 0.6.9.5
      "use strict";
      var Prelude = Ryvus["Prelude"];
      var Control_Alt = Ryvus["Control.Alt"];
      var Control_Extend = Ryvus["Control.Extend"];  
      var Left = (function () {
          function Left(value0) {
              this.value0 = value0;
          };
          Left.create = function (value0) {
              return new Left(value0);
          };
          return Left;
      })();
      var Right = (function () {
          function Right(value0) {
              this.value0 = value0;
          };
          Right.create = function (value0) {
              return new Right(value0);
          };
          return Right;
      })();
      var functorEither = new Prelude.Functor(function (f) {
          return function (_194) {
              if (_194 instanceof Left) {
                  return new Left(_194.value0);
              };
              if (_194 instanceof Right) {
                  return new Right(f(_194.value0));
              };
              throw new Error("Failed pattern match");
          };
      });
      exports["Left"] = Left;
      exports["Right"] = Right;
      exports["functorEither"] = functorEither;;
     
    })(Ryvus["Data.Either"] = Ryvus["Data.Either"] || {});
    (function(exports) {
      // Generated by psc-make version 0.6.9.5
      "use strict";
      var Prelude = Ryvus["Prelude"];
      var Data_Array = Ryvus["Data.Array"];
      var Data_Maybe = Ryvus["Data.Maybe"];  
      var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
          this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
          this.mempty = mempty;
      };               
      var monoidString = new Monoid(function () {
          return Prelude.semigroupString;
      }, "");  
      var mempty = function (dict) {
          return dict.mempty;
      };
      exports["Monoid"] = Monoid;
      exports["mempty"] = mempty;
      exports["monoidString"] = monoidString;;
     
    })(Ryvus["Data.Monoid"] = Ryvus["Data.Monoid"] || {});
    (function(exports) {
      // Generated by psc-make version 0.6.9.5
      "use strict";
      var Prelude = Ryvus["Prelude"];
      var Data_Monoid = Ryvus["Data.Monoid"];
      var Control_Apply = Ryvus["Control.Apply"];
      var Data_Monoid_First = Ryvus["Data.Monoid.First"];
      var Data_Either = Ryvus["Data.Either"];
      var Data_Maybe = Ryvus["Data.Maybe"];
      var Data_Monoid_Additive = Ryvus["Data.Monoid.Additive"];
      var Data_Monoid_Dual = Ryvus["Data.Monoid.Dual"];
      var Data_Monoid_Last = Ryvus["Data.Monoid.Last"];
      var Data_Monoid_Multiplicative = Ryvus["Data.Monoid.Multiplicative"];
      var Data_Tuple = Ryvus["Data.Tuple"];  
    
        function foldrArray(f) {
          return function(z) {
            return function(xs) {
              var acc = z;
              for (var i = xs.length - 1; i >= 0; --i) {
                acc = f(xs[i])(acc);
              }
              return acc;
            };
          };
        }
        ;
    
        function foldlArray(f) {
          return function(z) {
            return function(xs) {
              var acc = z;
              for (var i = 0, len = xs.length; i < len; ++i) {
                acc = f(acc)(xs[i]);
              }
              return acc;
            };
          };
        }
        ;
      var Foldable = function (foldMap, foldl, foldr) {
          this.foldMap = foldMap;
          this.foldl = foldl;
          this.foldr = foldr;
      };
      var foldr = function (dict) {
          return dict.foldr;
      };
      var foldl = function (dict) {
          return dict.foldl;
      };
      var intercalate = function (__dict_Foldable_6) {
          return function (__dict_Monoid_7) {
              return function (sep) {
                  return function (xs) {
                      var go = function (_485) {
                          return function (x) {
                              if (_485.init) {
                                  return {
                                      init: false, 
                                      acc: x
                                  };
                              };
                              return {
                                  init: false, 
                                  acc: Prelude["<>"](__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]())(_485.acc)(Prelude["<>"](__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]())(sep)(x))
                              };
                          };
                      };
                      return (foldl(__dict_Foldable_6)(go)({
                          init: true, 
                          acc: Data_Monoid.mempty(__dict_Monoid_7)
                      })(xs)).acc;
                  };
              };
          };
      }; 
      var foldableArray = new Foldable(function (__dict_Monoid_18) {
          return function (f) {
              return function (xs) {
                  return foldr(foldableArray)(function (x) {
                      return function (acc) {
                          return Prelude["<>"](__dict_Monoid_18["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(__dict_Monoid_18))(xs);
              };
          };
      }, function (f) {
          return function (z) {
              return function (xs) {
                  return foldlArray(f)(z)(xs);
              };
          };
      }, function (f) {
          return function (z) {
              return function (xs) {
                  return foldrArray(f)(z)(xs);
              };
          };
      });
      var foldMap = function (dict) {
          return dict.foldMap;
      };
      exports["Foldable"] = Foldable;
      exports["intercalate"] = intercalate;
      exports["foldMap"] = foldMap;
      exports["foldl"] = foldl;
      exports["foldr"] = foldr;
      exports["foldableArray"] = foldableArray;;
     
    })(Ryvus["Data.Foldable"] = Ryvus["Data.Foldable"] || {});
    (function(exports) {
      // Generated by psc-make version 0.6.9.5
      "use strict";
      var Prelude = Ryvus["Prelude"];
      var Control_Comonad = Ryvus["Control.Comonad"];
      var Control_Extend = Ryvus["Control.Extend"];
      var Data_Foldable = Ryvus["Data.Foldable"];
      var Data_Traversable = Ryvus["Data.Traversable"];  
      var Identity = function (x) {
          return x;
      };
      var runIdentity = function (_556) {
          return _556;
      };
      var functorIdentity = new Prelude.Functor(function (f) {
          return function (_562) {
              return f(_562);
          };
      });
      var applyIdentity = new Prelude.Apply(function (_563) {
          return function (_564) {
              return _563(_564);
          };
      }, function () {
          return functorIdentity;
      });
      var bindIdentity = new Prelude.Bind(function (m) {
          return function (f) {
              return f(runIdentity(m));
          };
      }, function () {
          return applyIdentity;
      });
      var applicativeIdentity = new Prelude.Applicative(function () {
          return applyIdentity;
      }, Identity);
      var monadIdentity = new Prelude.Monad(function () {
          return applicativeIdentity;
      }, function () {
          return bindIdentity;
      });
      exports["Identity"] = Identity;
      exports["runIdentity"] = runIdentity;
      exports["functorIdentity"] = functorIdentity;
      exports["applyIdentity"] = applyIdentity;
      exports["applicativeIdentity"] = applicativeIdentity;
      exports["bindIdentity"] = bindIdentity;
      exports["monadIdentity"] = monadIdentity;;
     
    })(Ryvus["Data.Identity"] = Ryvus["Data.Identity"] || {});
    (function(exports) {
      // Generated by psc-make version 0.6.9.5
      "use strict";
      var Data_Function = Ryvus["Data.Function"];
      var Data_Char = Ryvus["Data.Char"];
      var Prelude = Ryvus["Prelude"];
      var Data_String_Unsafe = Ryvus["Data.String.Unsafe"];
      var Data_Maybe = Ryvus["Data.Maybe"];  
    
          function _charAt(i, s, Just, Nothing) {
            return i >= 0 && i < s.length ? Just(s.charAt(i)) : Nothing;
          }
          ;
    
          function _charCodeAt(i, s, Just, Nothing) {
            return i >= 0 && i < s.length ? Just(s.charCodeAt(i)) : Nothing;
          }
          ;
    
          function fromCharArray(a) {
            return a.join('');
          }
          ;
    
          function indexOf(x) {
            return function(s) {
              return s.indexOf(x);
            };
          }
          ;
    
          function indexOf$prime(x) {
            return function(startAt) {
              return function(s) {
                return s.indexOf(x, startAt);
              };
            };
          }
          ;
    
          function lastIndexOf(x) {
            return function(s) {
              return s.lastIndexOf(x);
            };
          }
          ;
    
          function lastIndexOf$prime(x) {
            return function(startAt) {
              return function(s) {
                return s.lastIndexOf(x, startAt);
              };
            };
          }
          ;
    
          function length(s) {
            return s.length;
          }
          ;
    
          function localeCompare(s1) {
            return function(s2) {
              return s1.localeCompare(s2);
            };
          }
          ;
    
          function replace(s1) {
            return function(s2) {
              return function(s3) {
                return s3.replace(s1, s2);
              };
            };
          }
          ;
    
          function take(n) {
            return function(s) {
              return s.substr(0, n);
            };
          }
          ;
    
          function drop(n) {
            return function(s) {
              return s.substr(n);
            };
          }
          ;
    
          function count(p){
            return function(s){
              var i;
              for(i = 0; i < s.length && p(s.charAt(i)); i++){};
              return i;
            };
          }
          ;
    
          function split(sep) {
            return function(s) {
              return s.split(sep);
            };
          }
          ;
    
          function toCharArray(s) {
            return s.split('');
          }
          ;
    
          function toLower(s) {
            return s.toLowerCase();
          }
          ;
    
          function toUpper(s) {
            return s.toUpperCase();
          }
          ;
    
          function trim(s) {
            return s.trim();
          }
          ;
    
          function joinWith(s) {
            return function(xs) {
              return xs.join(s);
            };
          }
          ;
      var takeWhile = function (p) {
          return function (s) {
              return take(count(p)(s))(s);
          };
      };
      var $$null = function (s) {
          return length(s) === 0;
      };
      var uncons = function (s) {
          if ($$null(s)) {
              return Data_Maybe.Nothing.value;
          };
          return new Data_Maybe.Just({
              head: Data_String_Unsafe.charAt(0)(s), 
              tail: drop(1)(s)
          });
      };
      var fromChar = Data_Char.charString;
      var singleton = fromChar;
      var dropWhile = function (p) {
          return function (s) {
              return drop(count(p)(s))(s);
          };
      };
      var charCodeAt = function (n) {
          return function (s) {
              return _charCodeAt(n, s, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
          };
      };
      var charAt = function (n) {
          return function (s) {
              return _charAt(n, s, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
          };
      };
      exports["dropWhile"] = dropWhile;
      exports["takeWhile"] = takeWhile;
      exports["singleton"] = singleton;
      exports["uncons"] = uncons;
      exports["null"] = $$null;
      exports["lastIndexOf'"] = lastIndexOf$prime;
      exports["indexOf'"] = indexOf$prime;
      exports["fromChar"] = fromChar;
      exports["charCodeAt"] = charCodeAt;
        exports["charAt"] = charAt;;
        exports["indexOf"] = indexOf;
        exports["drop"] = drop;
        exports["length"] = length;
     
    })(Ryvus["Data.String"] = Ryvus["Data.String"] || {});
    (function(exports) {
      // Generated by psc-make version 0.6.9.5
      "use strict";
      var Prelude = Ryvus["Prelude"];
      var Data_Foldable = Ryvus["Data.Foldable"];
      var Data_Array = Ryvus["Data.Array"];
      var Data_Monoid = Ryvus["Data.Monoid"];  
      var Value = (function () {
          function Value(value0) {
              this.value0 = value0;
          };
          Value.create = function (value0) {
              return new Value(value0);
          };
          return Value;
      })();
      var Keyword = (function () {
          function Keyword(value0) {
              this.value0 = value0;
          };
          Keyword.create = function (value0) {
              return new Keyword(value0);
          };
          return Keyword;
      })();
      var Geolocation = (function () {
          function Geolocation(value0) {
              this.value0 = value0;
          };
          Geolocation.create = function (value0) {
              return new Geolocation(value0);
          };
          return Geolocation;
      })();
      var And = (function () {
          function And() {
    
          };
          And.value = new And();
          return And;
      })();
      var Or = (function () {
          function Or() {
    
          };
          Or.value = new Or();
          return Or;
      })();
      var Placeholder = (function () {
          function Placeholder() {
    
          };
          Placeholder.value = new Placeholder();
          return Placeholder;
      })();
      var Expression = (function () {
          function Expression(value0) {
              this.value0 = value0;
          };
          Expression.create = function (value0) {
              return new Expression(value0);
          };
          return Expression;
      })();
      var ParentOf = (function () {
          function ParentOf(value0, value1) {
              this.value0 = value0;
              this.value1 = value1;
          };
          ParentOf.create = function (value0) {
              return function (value1) {
                  return new ParentOf(value0, value1);
              };
          };
          return ParentOf;
      })();
      var BranchOf = (function () {
          function BranchOf(value0, value1) {
              this.value0 = value0;
              this.value1 = value1;
          };
          BranchOf.create = function (value0) {
              return function (value1) {
                  return new BranchOf(value0, value1);
              };
          };
          return BranchOf;
      })();
      var parentOf = function (anf) {
          return function (e) {
              return new ParentOf(anf, e);
          };
      };
      var facetValue = function (l) {
          return new Value(l);
      };
      var facetShow = new Prelude.Show(function (_496) {
          if (_496 instanceof Value) {
              return _496.value0;
          };
          if (_496 instanceof Keyword) {
              return "keyword(" + (_496.value0 + ")");
          };
          if (_496 instanceof Geolocation) {
              return "location(" + (_496.value0 + ")");
          };
          throw new Error("Failed pattern match");
      });
      var showAnf = function (_488) {
          return _488.aspect + ("." + (Prelude.show(facetShow)(_488.facet) + "."));
      };
      var facetKeyword = function (k) {
          return new Keyword(k);
      };
      var facetGeolocation = function (g) {
          return new Geolocation(g);
      };
      var facetEq = new Prelude.Eq(function (a) {
          return function (b) {
              return !Prelude["=="](facetEq)(a)(b);
          };
      }, function (_491) {
          return function (_492) {
              if (_491 instanceof Value && _492 instanceof Value) {
                  return _491.value0 === _492.value0;
              };
              if (_491 instanceof Keyword && _492 instanceof Keyword) {
                  return _491.value0 === _492.value0;
              };
              if (_491 instanceof Geolocation && _492 instanceof Geolocation) {
                  return _491.value0 === _492.value0;
              };
              return false;
          };
      });
      var eqAnf = function (_486) {
          return function (_487) {
              return _486.aspect === _487.aspect && Prelude["=="](facetEq)(_486.facet)(_487.facet);
          };
      };
      var branchTypeShow = new Prelude.Show(function (_495) {
          if (_495 instanceof And) {
              return "And";
          };
          if (_495 instanceof Or) {
              return "Or";
          };
          throw new Error("Failed pattern match");
      });
      var expressionShow = new Prelude.Show(function (_497) {
          if (_497 instanceof Placeholder) {
              return "(<!>)";
          };
          if (_497 instanceof Expression) {
              return showAnf(_497.value0);
          };
          if (_497 instanceof ParentOf) {
              return "(C." + (showAnf(_497.value0) + ("_." + (Prelude.show(expressionShow)(_497.value1) + ")")));
          };
          if (_497 instanceof BranchOf) {
              return "(" + (Prelude.show(branchTypeShow)(_497.value0) + ("." + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)("_.")(Data_Array.map(Prelude.show(expressionShow))(_497.value1)) + ")")));
          };
          throw new Error("Failed pattern match");
      });
      var branchTypeEq = new Prelude.Eq(function (a) {
          return function (b) {
              return !Prelude["=="](branchTypeEq)(a)(b);
          };
      }, function (_489) {
          return function (_490) {
              if (_489 instanceof And && _490 instanceof And) {
                  return true;
              };
              if (_489 instanceof Or && _490 instanceof Or) {
                  return true;
              };
              return false;
          };
      });
      var expressionEq = new Prelude.Eq(function (l) {
          return function (r) {
              return !Prelude["=="](expressionEq)(l)(r);
          };
      }, function (_493) {
          return function (_494) {
              if (_493 instanceof Placeholder && _494 instanceof Placeholder) {
                  return true;
              };
              if (_493 instanceof Expression && _494 instanceof Expression) {
                  return eqAnf(_493.value0)(_494.value0);
              };
              if (_493 instanceof ParentOf && _494 instanceof ParentOf) {
                  return eqAnf(_493.value0)(_494.value0) && Prelude["=="](expressionEq)(_493.value1)(_494.value1);
              };
              if (_493 instanceof BranchOf && _494 instanceof BranchOf) {
                  return Prelude["=="](branchTypeEq)(_493.value0)(_494.value0) && Prelude["=="](Prelude.eqArray(expressionEq))(_493.value1)(_494.value1);
              };
              return false;
          };
      });
      var branchOf = function (type$prime) {
          return function (expressions) {
              return new BranchOf(type$prime, expressions);
          };
      };
      var aspectAndFacet = function (a) {
          return function (f) {
              return {
                  aspect: a, 
                  facet: f
              };
          };
      };
      var expression = function (a) {
          return function (f) {
              var anf = aspectAndFacet(a)(f);
              return new Expression(anf);
          };
      };
      exports["Placeholder"] = Placeholder;
      exports["Expression"] = Expression;
      exports["ParentOf"] = ParentOf;
      exports["BranchOf"] = BranchOf;
      exports["Value"] = Value;
      exports["Keyword"] = Keyword;
      exports["Geolocation"] = Geolocation;
      exports["And"] = And;
      exports["Or"] = Or;
      exports["showAnf"] = showAnf;
      exports["eqAnf"] = eqAnf;
      exports["branchOf"] = branchOf;
      exports["parentOf"] = parentOf;
      exports["expression"] = expression;
      exports["facetGeolocation"] = facetGeolocation;
      exports["facetKeyword"] = facetKeyword;
      exports["facetValue"] = facetValue;
      exports["aspectAndFacet"] = aspectAndFacet;
      exports["branchTypeEq"] = branchTypeEq;
      exports["facetEq"] = facetEq;
      exports["expressionEq"] = expressionEq;
      exports["branchTypeShow"] = branchTypeShow;
      exports["facetShow"] = facetShow;
      exports["expressionShow"] = expressionShow;;
     
    })(Ryvus["Expresso.Parser.Data"] = Ryvus["Expresso.Parser.Data"] || {});
    (function(exports) {
      // Generated by psc-make version 0.6.9.5
      "use strict";
      var Prelude = Ryvus["Prelude"];
      var Data_Foldable = Ryvus["Data.Foldable"];
      var Data_Maybe = Ryvus["Data.Maybe"];
      var Expresso_Parser_Data = Ryvus["Expresso.Parser.Data"];
      var Optic_Core = Ryvus["Optic.Core"];
      var Data_Array = Ryvus["Data.Array"];  
      var replacePlaceholder = function (expression) {
          return function (toReplace) {
              if (expression instanceof Expresso_Parser_Data.Placeholder) {
                  return new Data_Maybe.Just(toReplace);
              };
              if (expression instanceof Expresso_Parser_Data.ParentOf) {
                  var update = function (updatedChild) {
                      return Prelude["return"](Data_Maybe.monadMaybe)(new Expresso_Parser_Data.ParentOf(expression.value0, updatedChild));
                  };
                  var mreplaced = replacePlaceholder(expression.value1)(toReplace);
                  return Prelude[">>="](Data_Maybe.bindMaybe)(mreplaced)(update);
              };
              if (expression instanceof Expresso_Parser_Data.BranchOf) {
                  var evaluateAllBranches = function (currentExp) {
                      return function (seed) {
                          var _2374 = replacePlaceholder(currentExp)(toReplace);
                          if (_2374 instanceof Data_Maybe.Just) {
                              return {
                                  found: true, 
                                  res: Prelude[":"](_2374.value0)(seed.res)
                              };
                          };
                          if (_2374 instanceof Data_Maybe.Nothing) {
                              return {
                                  found: seed.found, 
                                  res: Prelude[":"](currentExp)(seed.res)
                              };
                          };
                          throw new Error("Failed pattern match");
                      };
                  };
                  var _2376 = Data_Foldable.foldr(Data_Foldable.foldableArray)(evaluateAllBranches)({
                      found: false, 
                      res: [  ]
                  })(expression.value1);
                  if (_2376.found) {
                      return Data_Maybe.Just.create(new Expresso_Parser_Data.BranchOf(expression.value0, _2376.res));
                  };
                  return Data_Maybe.Nothing.value;
              };
              return Data_Maybe.Nothing.value;
          };
      };
      var expressionBuilder = function (op) {
          return function (_701) {
              return function (_702) {
                  if (_701 instanceof Expresso_Parser_Data.BranchOf && (_702 instanceof Expresso_Parser_Data.BranchOf && (Prelude["=="](Expresso_Parser_Data.branchTypeEq)(_701.value0)(op) && Prelude["=="](Expresso_Parser_Data.branchTypeEq)(_702.value0)(op)))) {
                      return new Expresso_Parser_Data.BranchOf(op, Prelude["++"](Data_Array.semigroupArray)(_701.value1)(_702.value1));
                  };
                  if (_701 instanceof Expresso_Parser_Data.BranchOf && Prelude["=="](Expresso_Parser_Data.branchTypeEq)(_701.value0)(op)) {
                      return new Expresso_Parser_Data.BranchOf(op, Prelude["++"](Data_Array.semigroupArray)(_701.value1)([ _702 ]));
                  };
                  if (_702 instanceof Expresso_Parser_Data.BranchOf && Prelude["=="](Expresso_Parser_Data.branchTypeEq)(_702.value0)(op)) {
                      return new Expresso_Parser_Data.BranchOf(op, Prelude[":"](_701)(_702.value1));
                  };
                  return new Expresso_Parser_Data.BranchOf(op, [ _701, _702 ]);
              };
          };
      };
      var expressionOr = expressionBuilder(Expresso_Parser_Data.Or.value);
      var expressionAnd = expressionBuilder(Expresso_Parser_Data.And.value);
      exports["replacePlaceholder"] = replacePlaceholder;
      exports["expressionOr"] = expressionOr;
      exports["expressionAnd"] = expressionAnd;;
     
    })(Ryvus["Expresso.Operations"] = Ryvus["Expresso.Operations"] || {});
    (function(exports) {
      // Generated by psc-make version 0.6.9.5
      "use strict";
      var Prelude = Ryvus["Prelude"];
      var Data_Identity = Ryvus["Data.Identity"];
      var Data_Either = Ryvus["Data.Either"];
      var Data_Maybe = Ryvus["Data.Maybe"];
      var Data_Monoid = Ryvus["Data.Monoid"];
      var Data_Tuple = Ryvus["Data.Tuple"];
      var Control_Alt = Ryvus["Control.Alt"];
      var Control_Alternative = Ryvus["Control.Alternative"];
      var Control_Lazy = Ryvus["Control.Lazy"];
      var Control_Monad = Ryvus["Control.Monad"];
      var Control_Monad_Trans = Ryvus["Control.Monad.Trans"];
      var Control_Monad_State_Class = Ryvus["Control.Monad.State.Class"];
      var Control_Monad_State_Trans = Ryvus["Control.Monad.State.Trans"];
      var Control_Monad_Error = Ryvus["Control.Monad.Error"];
      var Control_Monad_Error_Class = Ryvus["Control.Monad.Error.Class"];
      var Control_Monad_Error_Trans = Ryvus["Control.Monad.Error.Trans"];
      var Control_MonadPlus = Ryvus["Control.MonadPlus"];
      var Control_Plus = Ryvus["Control.Plus"];  
      var ParseError = (function () {
          function ParseError(value0) {
              this.value0 = value0;
          };
          ParseError.create = function (value0) {
              return new ParseError(value0);
          };
          return ParseError;
      })();
      var ParserT = function (x) {
          return x;
      };
      var unParserT = function (_807) {
          return _807;
      }; 
      var runParserT = function (__dict_Monad_0) {
          return function (s) {
              return function (p) {
                  return Prelude[">>="](__dict_Monad_0["__superclass_Prelude.Bind_1"]())(unParserT(p)(s))(function (_77) {
                      return Prelude["return"](__dict_Monad_0)(_77.result);
                  });
              };
          };
      };
      var runParser = function (s) {
          return Prelude["<<<"](Prelude.semigroupoidArr)(Data_Identity.runIdentity)(runParserT(Data_Identity.monadIdentity)(s));
      }; 
      var functorParserT = function (__dict_Functor_5) {
          return new Prelude.Functor(function (f) {
              return function (p) {
                  var f$prime = function (o) {
                      return {
                          input: o.input, 
                          result: Prelude["<$>"](Data_Either.functorEither)(f)(o.result), 
                          consumed: o.consumed
                      };
                  };
                  return ParserT(function (s) {
                      return Prelude["<$>"](__dict_Functor_5)(f$prime)(unParserT(p)(s));
                  });
              };
          });
      };
      var fail = function (__dict_Monad_6) {
          return function (message) {
              return ParserT(function (s) {
                  return Prelude["return"](__dict_Monad_6)({
                      input: s, 
                      consumed: false, 
                      result: new Data_Either.Left(new ParseError({
                          message: message
                      }))
                  });
              });
          };
      };
      var errorParseError = new Control_Monad_Error["Error"](new ParseError({
          message: ""
      }), function (msg) {
          return new ParseError({
              message: msg
          });
      });
      var monadParserT = function (__dict_Monad_4) {
          return new Prelude.Monad(function () {
              return applicativeParserT(__dict_Monad_4);
          }, function () {
              return bindParserT(__dict_Monad_4);
          });
      };
      var bindParserT = function (__dict_Monad_9) {
          return new Prelude.Bind(function (p) {
              return function (f) {
                  var updateConsumedFlag = function (c) {
                      return function (o) {
                          return {
                              input: o.input, 
                              consumed: c || o.consumed, 
                              result: o.result
                          };
                      };
                  };
                  return ParserT(function (s) {
                      return Prelude[">>="](__dict_Monad_9["__superclass_Prelude.Bind_1"]())(unParserT(p)(s))(function (o) {
                          if (o.result instanceof Data_Either.Left) {
                              return Prelude["return"](__dict_Monad_9)({
                                  input: o.input, 
                                  result: new Data_Either.Left(o.result.value0), 
                                  consumed: o.consumed
                              });
                          };
                          if (o.result instanceof Data_Either.Right) {
                              return Prelude["<$>"](((__dict_Monad_9["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(updateConsumedFlag(o.consumed))(unParserT(f(o.result.value0))(o.input));
                          };
                          throw new Error("Failed pattern match");
                      });
                  });
              };
          }, function () {
              return applyParserT(__dict_Monad_9);
          });
      };
      var applyParserT = function (__dict_Monad_10) {
          return new Prelude.Apply(Prelude.ap(monadParserT(__dict_Monad_10)), function () {
              return functorParserT(((__dict_Monad_10["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
          });
      };
      var applicativeParserT = function (__dict_Monad_11) {
          return new Prelude.Applicative(function () {
              return applyParserT(__dict_Monad_11);
          }, function (a) {
              return ParserT(function (s) {
                  return Prelude.pure(__dict_Monad_11["__superclass_Prelude.Applicative_0"]())({
                      input: s, 
                      result: new Data_Either.Right(a), 
                      consumed: false
                  });
              });
          });
      };
      var altParserT = function (__dict_Monad_13) {
          return new Control_Alt.Alt(function (p1) {
              return function (p2) {
                  return ParserT(function (s) {
                      return Prelude[">>="](__dict_Monad_13["__superclass_Prelude.Bind_1"]())(unParserT(p1)(s))(function (o) {
                          if (o.result instanceof Data_Either.Left && !o.consumed) {
                              return unParserT(p2)(s);
                          };
                          return Prelude["return"](__dict_Monad_13)(o);
                      });
                  });
              };
          }, function () {
              return functorParserT(((__dict_Monad_13["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
          });
      };
      exports["ParserT"] = ParserT;
      exports["ParseError"] = ParseError;
      exports["fail"] = fail;
      exports["runParser"] = runParser;
      exports["runParserT"] = runParserT;
      exports["unParserT"] = unParserT;
      exports["errorParseError"] = errorParseError;
      exports["functorParserT"] = functorParserT;
      exports["applyParserT"] = applyParserT;
      exports["applicativeParserT"] = applicativeParserT;
      exports["altParserT"] = altParserT;
      exports["bindParserT"] = bindParserT;
      exports["monadParserT"] = monadParserT;;
     
    })(Ryvus["Text.Parsing.Parser"] = Ryvus["Text.Parsing.Parser"] || {});
    (function(exports) {
      // Generated by psc-make version 0.6.9.5
      "use strict";
      var Control_Alt = Ryvus["Control.Alt"];
      var Text_Parsing_Parser = Ryvus["Text.Parsing.Parser"];
      var Prelude = Ryvus["Prelude"];
      var Control_Alternative = Ryvus["Control.Alternative"];
      var Control_Apply = Ryvus["Control.Apply"];
      var Data_Maybe = Ryvus["Data.Maybe"];
      var Data_Array = Ryvus["Data.Array"];
      var Data_Tuple = Ryvus["Data.Tuple"];
      var Data_Either = Ryvus["Data.Either"];
      var Control_Lazy = Ryvus["Control.Lazy"];
      var Control_Monad = Ryvus["Control.Monad"];
      var Control_Monad_Error_Trans = Ryvus["Control.Monad.Error.Trans"];
      var Control_Monad_Error_Class = Ryvus["Control.Monad.Error.Class"];
      var Control_Monad_State_Trans = Ryvus["Control.Monad.State.Trans"];
      var Control_Monad_State_Class = Ryvus["Control.Monad.State.Class"];
      var $$try = function (__dict_Functor_1) {
          return function (p) {
              var try$prime = function (s) {
                  return function (_811) {
                      if (_811.result instanceof Data_Either.Left) {
                          return {
                              input: s, 
                              result: _811.result, 
                              consumed: false
                          };
                      };
                      return _811;
                  };
              };
              return Text_Parsing_Parser.ParserT(function (s) {
                  return Prelude["<$>"](__dict_Functor_1)(try$prime(s))(Text_Parsing_Parser.unParserT(p)(s));
              });
          };
      };
      var manyTill = function (__dict_Monad_13) {
          return function (p) {
              return function (end) {
                  var scan = Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_13))(Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_13))(end)(function () {
                      return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_13))([  ]);
                  }))(Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_13))(p)(function (_95) {
                      return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_13))(scan)(function (_94) {
                          return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_13))(Prelude[":"](_95)(_94));
                      });
                  }));
                  return scan;
              };
          };
      };
      var many1Till = function (__dict_Monad_14) {
          return function (p) {
              return function (end) {
                  return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_14))(p)(function (_97) {
                      return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_14))(manyTill(__dict_Monad_14)(p)(end))(function (_96) {
                          return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_14))(Prelude[":"](_97)(_96));
                      });
                  });
              };
          };
      };
      var lookAhead = function (__dict_Monad_15) {
          return function (_810) {
              return function (s) {
                  return Prelude[">>="](__dict_Monad_15["__superclass_Prelude.Bind_1"]())(_810(s))(function (_93) {
                      return Prelude["return"](__dict_Monad_15)((function () {
                          var _2733 = {};
                          for (var _2734 in _93) {
                              if (_93.hasOwnProperty(_2734)) {
                                  _2733[_2734] = _93[_2734];
                              };
                          };
                          _2733.input = s;
                          _2733.consumed = false;
                          return _2733;
                      })());
                  });
              };
          };
      };
      var choice = function (__dict_Monad_18) {
          return function (_809) {
              if (_809.length === 0) {
                  return Text_Parsing_Parser.fail(__dict_Monad_18)("Nothing to parse");
              };
              if (_809.length === 1) {
                  return _809[0];
              };
              if (_809.length >= 1) {
                  var _2740 = _809.slice(1);
                  return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_18))(_809[0])(choice(__dict_Monad_18)(_2740));
              };
              throw new Error("Failed pattern match");
          };
      };
      var between = function (__dict_Monad_25) {
          return function (open) {
              return function (close) {
                  return function (p) {
                      return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_25))(open)(function () {
                          return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_25))(p)(function (_78) {
                              return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_25))(close)(function () {
                                  return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_25))(_78);
                              });
                          });
                      });
                  };
              };
          };
      };
      exports["many1Till"] = many1Till;
      exports["manyTill"] = manyTill;
      exports["lookAhead"] = lookAhead;
      exports["choice"] = choice;
      exports["try"] = $$try;
      exports["between"] = between;;
     
    })(Ryvus["Text.Parsing.Parser.Combinators"] = Ryvus["Text.Parsing.Parser.Combinators"] || {});
    (function(exports) {
      // Generated by psc-make version 0.6.9.5
      "use strict";
      var Prelude = Ryvus["Prelude"];
      var Control_Monad_Error = Ryvus["Control.Monad.Error"];
      var Data_String = Ryvus["Data.String"];
      var Data_Char = Ryvus["Data.Char"];
      var Text_Parsing_Parser_Combinators = Ryvus["Text.Parsing.Parser.Combinators"];
      var Text_Parsing_Parser = Ryvus["Text.Parsing.Parser"];
      var Control_Alternative = Ryvus["Control.Alternative"];
      var Control_Alt = Ryvus["Control.Alt"];
      var Data_Foldable = Ryvus["Data.Foldable"];
      var Data_Either = Ryvus["Data.Either"];
      var Data_Monoid = Ryvus["Data.Monoid"];
      var Data_Maybe = Ryvus["Data.Maybe"];
      var Control_Monad_Error_Class = Ryvus["Control.Monad.Error.Class"];
      var Control_Monad_State_Class = Ryvus["Control.Monad.State.Class"];  
      var string = function (__dict_Monad_0) {
          return function (s) {
              return Text_Parsing_Parser.ParserT(function (s$prime) {
                  return Prelude["return"](__dict_Monad_0)((function () {
                      var _2779 = Data_String.indexOf(s)(s$prime);
                      if (_2779 === 0) {
                          return {
                              consumed: true, 
                              input: Data_String.drop(Data_String.length(s))(s$prime), 
                              result: new Data_Either.Right(s)
                          };
                      };
                      return {
                          consumed: false, 
                          input: s$prime, 
                          result: new Data_Either.Left(Control_Monad_Error.strMsg(Text_Parsing_Parser.errorParseError)("Expected " + Prelude.show(Prelude.showString)(s)))
                      };
                  })());
              });
          };
      };
      var $$char = function (__dict_Monad_4) {
          return Text_Parsing_Parser.ParserT(function (s$prime) {
              return Prelude["return"](__dict_Monad_4)((function () {
                  var _2782 = Data_String.charAt(0)(s$prime);
                  if (_2782 instanceof Data_Maybe.Nothing) {
                      return {
                          consumed: false, 
                          input: s$prime, 
                          result: new Data_Either.Left(Control_Monad_Error.strMsg(Text_Parsing_Parser.errorParseError)("Unexpected EOF"))
                      };
                  };
                  if (_2782 instanceof Data_Maybe.Just) {
                      return {
                          consumed: true, 
                          input: Data_String.drop(1)(s$prime), 
                          result: new Data_Either.Right(Data_Char.charString(_2782.value0))
                      };
                  };
                  throw new Error("Failed pattern match");
              })());
          });
      };
      var satisfy = function (__dict_Monad_5) {
          return function (f) {
              return Text_Parsing_Parser_Combinators["try"](((__dict_Monad_5["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_5))($$char(__dict_Monad_5))(function (_109) {
                  var _2785 = f(_109);
                  if (_2785) {
                      return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_5))(_109);
                  };
                  if (!_2785) {
                      return Text_Parsing_Parser.fail(__dict_Monad_5)("Character did not satisfy predicate");
                  };
                  throw new Error("Failed pattern match");
              }));
          };
      };
      exports["satisfy"] = satisfy;
      exports["char"] = $$char;
      exports["string"] = string;;
     
    })(Ryvus["Text.Parsing.Parser.String"] = Ryvus["Text.Parsing.Parser.String"] || {});
    (function(exports) {
      // Generated by psc-make version 0.6.9.5
      "use strict";
      var Text_Parsing_Parser = Ryvus["Text.Parsing.Parser"];
      var Text_Parsing_Parser_String = Ryvus["Text.Parsing.Parser.String"];
      var Control_Alt = Ryvus["Control.Alt"];
      var Expresso_Parser_Data = Ryvus["Expresso.Parser.Data"];
      var Prelude = Ryvus["Prelude"];
      var Text_Parsing_Parser_Combinators = Ryvus["Text.Parsing.Parser.Combinators"];
      var Data_Foldable = Ryvus["Data.Foldable"];
      var Data_Monoid = Ryvus["Data.Monoid"];
      var Data_Array = Ryvus["Data.Array"];
      var Data_Either = Ryvus["Data.Either"];
      var Data_Maybe = Ryvus["Data.Maybe"];
      var Control_Monad_Eff = Ryvus["Control.Monad.Eff"];
      var Debug_Trace = Ryvus["Debug.Trace"];
      var Data_Identity = Ryvus["Data.Identity"];  
      var $bar$greater$greater = function (__dict_Functor_0) {
          return Prelude.flip(Prelude["<$>"](__dict_Functor_0));
      };
      var $greater$greater$percent = function (__dict_Monad_1) {
          return function (p) {
              return function (v) {
                  return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_1))(p)(function (_813) {
                      return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_1))(v);
                  });
              };
          };
      };
      var $dot$greater$greater = function (__dict_Monad_2) {
          return function (pa) {
              return function (pb) {
                  return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_2))(pa)(function (_121) {
                      return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_2))(pb)(function () {
                          return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_2))(_121);
                      });
                  });
              };
          };
      };
      var placeholderP = Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("(<!>)"))(function () {
          return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(Expresso_Parser_Data.Placeholder.value);
      });
      var many$prime = function (__dict_Monad_3) {
          return function (p) {
              return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_3))(p)(function (_123) {
                  return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_3))(Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_3))(many$prime(__dict_Monad_3)(p))(function (_122) {
                      return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_3))(Prelude[":"](_123)(_122));
                  }))(Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_3))([ _123 ]));
              });
          };
      };
      var flatten = function (__dict_Monoid_4) {
          return function (ms) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(Prelude["<>"](__dict_Monoid_4["__superclass_Prelude.Semigroup_0"]()))(Data_Monoid.mempty(__dict_Monoid_4))(ms);
          };
      };
      var manyFlattened = function (__dict_Monoid_5) {
          return function (__dict_Monad_6) {
              return function (p) {
                  return $bar$greater$greater(Text_Parsing_Parser.functorParserT(((__dict_Monad_6["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]()))(many$prime(__dict_Monad_6)(p))(flatten(__dict_Monoid_5));
              };
          };
      };
      var delimiter = ".";
      var ident = (function () {
          var dot = Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(delimiter);
          return $bar$greater$greater(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Parsing_Parser_Combinators.many1Till(Data_Identity.monadIdentity)(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity))(dot))(flatten(Data_Monoid.monoidString));
      })();
      var combinationsSep = "_.";
      var branchOr = $greater$greater$percent(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("Or."))(Expresso_Parser_Data.Or.value);
      var branchAnd = $greater$greater$percent(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("And."))(Expresso_Parser_Data.And.value);
      var branch = Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(branchAnd)(branchOr);
      var betweenS = function (__dict_Monad_7) {
          return function (start) {
              return function (end) {
                  return function (inner) {
                      return Text_Parsing_Parser_Combinators.between(__dict_Monad_7)(Text_Parsing_Parser_String.string(__dict_Monad_7)(start))(Text_Parsing_Parser_String.string(__dict_Monad_7)(end))(inner);
                  };
              };
          };
      };
      var facet = (function () {
          var keyword = betweenS(Data_Identity.monadIdentity)("keyword(")(").")(Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(manyFlattened(Data_Monoid.monoidString)(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.satisfy(Data_Identity.monadIdentity)(Prelude["/="](Prelude.eqString)(")"))))(function (_111) {
              return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(Expresso_Parser_Data.facetKeyword(_111));
          }));
          var geolocation = betweenS(Data_Identity.monadIdentity)("location(")(").")(Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(manyFlattened(Data_Monoid.monoidString)(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.satisfy(Data_Identity.monadIdentity)(Prelude["/="](Prelude.eqString)(")"))))(function (_112) {
              return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(Expresso_Parser_Data.facetGeolocation(_112));
          }));
          var flatValue = $bar$greater$greater(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(ident)(Expresso_Parser_Data.facetValue);
          return Text_Parsing_Parser_Combinators.choice(Data_Identity.monadIdentity)([ keyword, geolocation, flatValue ]);
      })();
      var expressionP = Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(ident)(function (_114) {
          return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(facet)(function (_113) {
              return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(Expresso_Parser_Data.expression(_114)(_113));
          });
      });
      var expressoParser = (function () {
          var hierarchicalParser = betweenS(Data_Identity.monadIdentity)("(C.")(")")(Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(ident)(function (_117) {
              return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))($bar$greater$greater(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(ident)(Expresso_Parser_Data.facetValue))(function (_116) {
                  var parent = Expresso_Parser_Data.aspectAndFacet(_117)(_116);
                  return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(combinationsSep))(function () {
                      return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expressoParser)(function (_115) {
                          return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(Expresso_Parser_Data.parentOf(parent)(_115));
                      });
                  });
              });
          }));
          var branchParser = Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(betweenS(Data_Identity.monadIdentity)("(")(")")(Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(branch)(function (_120) {
              return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expressoParser)(function (_119) {
                  return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.manyTill(Data_Identity.monadIdentity)(Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(combinationsSep))(function () {
                      return expressoParser;
                  }))(Text_Parsing_Parser_Combinators.lookAhead(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(")"))))(function (_118) {
                      return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(Expresso_Parser_Data.branchOf(_120)(Prelude[":"](_119)(_118)));
                  });
              });
          })));
          return Text_Parsing_Parser_Combinators.choice(Data_Identity.monadIdentity)([ branchParser, hierarchicalParser, placeholderP, expressionP ]);
      })();
      var parseExpressoExpression = function (incoming) {
          var _2800 = Text_Parsing_Parser.runParser(incoming)(expressoParser);
          if (_2800 instanceof Data_Either.Left) {
              return Data_Maybe.Nothing.value;
          };
          if (_2800 instanceof Data_Either.Right) {
              return new Data_Maybe.Just(_2800.value0);
          };
          throw new Error("Failed pattern match");
      };
      exports["manyFlattened"] = manyFlattened;
      exports["many'"] = many$prime;
      exports["flatten"] = flatten;
      exports[">>%"] = $greater$greater$percent;
      exports["betweenS"] = betweenS;
      exports[".>>"] = $dot$greater$greater;
      exports["|>>"] = $bar$greater$greater;
      exports["expressoParser"] = expressoParser;
      exports["expressionP"] = expressionP;
      exports["placeholderP"] = placeholderP;
      exports["facet"] = facet;
      exports["branch"] = branch;
      exports["branchOr"] = branchOr;
      exports["branchAnd"] = branchAnd;
      exports["ident"] = ident;
      exports["combinationsSep"] = combinationsSep;
      exports["delimiter"] = delimiter;
      exports["parseExpressoExpression"] = parseExpressoExpression;;
     
    })(Ryvus["Expresso.Parser"] = Ryvus["Expresso.Parser"] || {});
    
    

    
    console.log(Ryvus);
    return Ryvus;
}());

var expressoParser = ryvus["Expresso.Parser"];
var Data = ryvus["Expresso.Parser.Data"];
var Operators = ryvus["Expresso.Operations"];

console.log(expressoParser);
console.log(Data);
console.log(Operators);

expressionOperator = function(operator) {
    return function(left, expressionForRight) {
        var right = expressionForRight.rawExpression;

        return operator(left)(right);
    };
};

function Expression(value) {
    this.rawExpression = value;
    
    this.and = function(expression) {
        var andF = expressionOperator(Operators.expressionAnd);
        var andedResult = andF(value, expression);
        
        return new Expression(andedResult);
    };

    this.or = function(expression) {
        var orF = expressionOperator(Operators.expressionOr);
        var oredResult = orF(value, expression);
        
        return new Expression(oredResult);
    };
    
    this.replacePlaceholderWith = function(expression) {
        var replacedValue = Operators.replacePlaceholder(value)(expression.rawExpression);

        if(replacedValue.value0) return new Expression(replacedValue.value0);

        return undefined;
    };
    
    this.toString = function() { return Data.expressionShow.show(value); };
};

var parse = function(incoming) {
    var parse = expressoParser.parseExpressoExpression(incoming);

    if(parse.value0) return new Expression(parse.value0);

    return undefined;    
};
