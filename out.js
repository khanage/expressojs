(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Alt = function ($less$bar$greater, __superclass_Prelude$dotFunctor_0) {
    this["<|>"] = $less$bar$greater;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
};
var $less$bar$greater = function (dict) {
    return dict["<|>"];
};
module.exports = {
    Alt: Alt, 
    "<|>": $less$bar$greater
};

},{"Prelude":58}],2:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Lazy = require("Control.Lazy");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Alternative = function (__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
    this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
    this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
};
var some = function (__dict_Alternative_0) {
    return function (__dict_Lazy1_1) {
        return function (v) {
            return Prelude["<*>"]((__dict_Alternative_0["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((__dict_Alternative_0["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(v))(Control_Lazy.defer1(__dict_Lazy1_1)(function (_209) {
                return many(__dict_Alternative_0)(__dict_Lazy1_1)(v);
            }));
        };
    };
};
var many = function (__dict_Alternative_2) {
    return function (__dict_Lazy1_3) {
        return function (v) {
            return Control_Alt["<|>"]((__dict_Alternative_2["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(__dict_Alternative_2)(__dict_Lazy1_3)(v))(Prelude.pure(__dict_Alternative_2["__superclass_Prelude.Applicative_0"]())([  ]));
        };
    };
};
module.exports = {
    Alternative: Alternative, 
    many: many, 
    some: some
};

},{"Control.Alt":1,"Control.Lazy":6,"Control.Plus":22,"Prelude":58}],3:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var $less$times = function (__dict_Apply_0) {
    return function (a) {
        return function (b) {
            return Prelude["<*>"](__dict_Apply_0)(Prelude["<$>"](__dict_Apply_0["__superclass_Prelude.Functor_0"]())(Prelude["const"])(a))(b);
        };
    };
};
var $times$greater = function (__dict_Apply_1) {
    return function (a) {
        return function (b) {
            return Prelude["<*>"](__dict_Apply_1)(Prelude["<$>"](__dict_Apply_1["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryArr)))(a))(b);
        };
    };
};
var lift5 = function (__dict_Apply_2) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return Prelude["<*>"](__dict_Apply_2)(Prelude["<*>"](__dict_Apply_2)(Prelude["<*>"](__dict_Apply_2)(Prelude["<*>"](__dict_Apply_2)(Prelude["<$>"](__dict_Apply_2["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d))(e);
                        };
                    };
                };
            };
        };
    };
};
var lift4 = function (__dict_Apply_3) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return Prelude["<*>"](__dict_Apply_3)(Prelude["<*>"](__dict_Apply_3)(Prelude["<*>"](__dict_Apply_3)(Prelude["<$>"](__dict_Apply_3["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d);
                    };
                };
            };
        };
    };
};
var lift3 = function (__dict_Apply_4) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return Prelude["<*>"](__dict_Apply_4)(Prelude["<*>"](__dict_Apply_4)(Prelude["<$>"](__dict_Apply_4["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c);
                };
            };
        };
    };
};
var lift2 = function (__dict_Apply_5) {
    return function (f) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_5)(Prelude["<$>"](__dict_Apply_5["__superclass_Prelude.Functor_0"]())(f)(a))(b);
            };
        };
    };
};
module.exports = {
    lift5: lift5, 
    lift4: lift4, 
    lift3: lift3, 
    lift2: lift2, 
    "*>": $times$greater, 
    "<*": $less$times
};

},{"Prelude":58}],4:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Extend = require("Control.Extend");
var Comonad = function (__superclass_Control$dotExtend$dotExtend_0, extract) {
    this["__superclass_Control.Extend.Extend_0"] = __superclass_Control$dotExtend$dotExtend_0;
    this.extract = extract;
};
var extract = function (dict) {
    return dict.extract;
};
module.exports = {
    Comonad: Comonad, 
    extract: extract
};

},{"Control.Extend":5,"Prelude":58}],5:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Extend = function ($less$less$eq, __superclass_Prelude$dotFunctor_0) {
    this["<<="] = $less$less$eq;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
};
var $less$less$eq = function (dict) {
    return dict["<<="];
};
var $eq$less$eq = function (__dict_Extend_0) {
    return function (f) {
        return function (g) {
            return function (w) {
                return f($less$less$eq(__dict_Extend_0)(g)(w));
            };
        };
    };
};
var $eq$greater$eq = function (__dict_Extend_1) {
    return function (f) {
        return function (g) {
            return function (w) {
                return g($less$less$eq(__dict_Extend_1)(f)(w));
            };
        };
    };
};
var $eq$greater$greater = function (__dict_Extend_2) {
    return function (w) {
        return function (f) {
            return $less$less$eq(__dict_Extend_2)(f)(w);
        };
    };
};
var extendArr = function (__dict_Semigroup_3) {
    return new Extend(function (f) {
        return function (g) {
            return function (w) {
                return f(function (w$prime) {
                    return g(Prelude["<>"](__dict_Semigroup_3)(w)(w$prime));
                });
            };
        };
    }, function () {
        return Prelude.functorArr;
    });
};
var extend = function (__dict_Extend_4) {
    return $less$less$eq(__dict_Extend_4);
};
var duplicate = function (__dict_Extend_5) {
    return function (w) {
        return $less$less$eq(__dict_Extend_5)(Prelude.id(Prelude.categoryArr))(w);
    };
};
module.exports = {
    Extend: Extend, 
    duplicate: duplicate, 
    extend: extend, 
    "=<=": $eq$less$eq, 
    "=>=": $eq$greater$eq, 
    "=>>": $eq$greater$greater, 
    "<<=": $less$less$eq, 
    extendArr: extendArr
};

},{"Prelude":58}],6:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Lazy = function (defer) {
    this.defer = defer;
};
var Lazy1 = function (defer1) {
    this.defer1 = defer1;
};
var Lazy2 = function (defer2) {
    this.defer2 = defer2;
};
var defer2 = function (dict) {
    return dict.defer2;
};
var fix2 = function (__dict_Lazy2_0) {
    return function (f) {
        return defer2(__dict_Lazy2_0)(function (_184) {
            return f(fix2(__dict_Lazy2_0)(f));
        });
    };
};
var defer1 = function (dict) {
    return dict.defer1;
};
var fix1 = function (__dict_Lazy1_1) {
    return function (f) {
        return defer1(__dict_Lazy1_1)(function (_183) {
            return f(fix1(__dict_Lazy1_1)(f));
        });
    };
};
var defer = function (dict) {
    return dict.defer;
};
var fix = function (__dict_Lazy_2) {
    return function (f) {
        return defer(__dict_Lazy_2)(function (_182) {
            return f(fix(__dict_Lazy_2)(f));
        });
    };
};
module.exports = {
    Lazy2: Lazy2, 
    Lazy1: Lazy1, 
    Lazy: Lazy, 
    fix2: fix2, 
    fix1: fix1, 
    fix: fix, 
    defer2: defer2, 
    defer1: defer1, 
    defer: defer
};

},{"Prelude":58}],7:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");

    function returnE(a) {
      return function() {
        return a;
      };
    }
    ;

    function bindE(a) {
      return function(f) {
        return function() {
          return f(a())();
        };
      };
    }
    ;

    function runPure(f) {
      return f();
    }
    ;

    function untilE(f) {
      return function() {
        while (!f());
        return {};
      };
    }
    ;

    function whileE(f) {
      return function(a) {
        return function() {
          while (f()) {
            a();
          }
          return {};
        };
      };
    }
    ;

    function forE(lo) {
      return function(hi) {
        return function(f) {
          return function() {
            for (var i = lo; i < hi; i++) {
              f(i)();
            }
          };
        };
      };
    }
    ;

    function foreachE(as) {
      return function(f) {
        return function() {
          for (var i = 0; i < as.length; i++) {
            f(as[i])();
          }
        };
      };
    }
    ;
var monadEff = new Prelude.Monad(function () {
    return applicativeEff;
}, function () {
    return bindEff;
});
var bindEff = new Prelude.Bind(bindE, function () {
    return applyEff;
});
var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
    return functorEff;
});
var applicativeEff = new Prelude.Applicative(function () {
    return applyEff;
}, returnE);
var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
module.exports = {
    foreachE: foreachE, 
    forE: forE, 
    whileE: whileE, 
    untilE: untilE, 
    runPure: runPure, 
    functorEff: functorEff, 
    applyEff: applyEff, 
    applicativeEff: applicativeEff, 
    bindEff: bindEff, 
    monadEff: monadEff
};

},{"Prelude":58}],8:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Monad_Error_Trans = require("Control.Monad.Error.Trans");
var Control_Monad_Except_Trans = require("Control.Monad.Except.Trans");
var Control_Monad_Trans = require("Control.Monad.Trans");
var Control_Monad_Maybe_Trans = require("Control.Monad.Maybe.Trans");
var Control_Monad_Reader_Trans = require("Control.Monad.Reader.Trans");
var Control_Monad_Writer_Trans = require("Control.Monad.Writer.Trans");
var Control_Monad_State_Trans = require("Control.Monad.State.Trans");
var Control_Monad_Error = require("Control.Monad.Error");
var Data_Either = require("Data.Either");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var MonadError = function (catchError, throwError) {
    this.catchError = catchError;
    this.throwError = throwError;
};
var throwError = function (dict) {
    return dict.throwError;
};
var monadErrorMaybe = new MonadError(function (_406) {
    return function (f) {
        if (_406 instanceof Data_Maybe.Nothing) {
            return f(Prelude.unit);
        };
        if (_406 instanceof Data_Maybe.Just) {
            return new Data_Maybe.Just(_406.value0);
        };
        throw new Error("Failed pattern match");
    };
}, Prelude["const"](Data_Maybe.Nothing.value));
var monadErrorExceptT = function (__dict_Monad_0) {
    return new MonadError(Control_Monad_Except_Trans.catchE(__dict_Monad_0), Control_Monad_Except_Trans.throwE(__dict_Monad_0["__superclass_Prelude.Applicative_0"]()));
};
var monadErrorErrorT = function (__dict_Monad_1) {
    return new MonadError(function (m) {
        return function (h) {
            return Control_Monad_Error_Trans.ErrorT(Prelude[">>="](__dict_Monad_1["__superclass_Prelude.Bind_1"]())(Control_Monad_Error_Trans.runErrorT(m))(function (_29) {
                if (_29 instanceof Data_Either.Left) {
                    return Control_Monad_Error_Trans.runErrorT(h(_29.value0));
                };
                if (_29 instanceof Data_Either.Right) {
                    return Prelude["return"](__dict_Monad_1)(new Data_Either.Right(_29.value0));
                };
                throw new Error("Failed pattern match");
            }));
        };
    }, function (e) {
        return Control_Monad_Error_Trans.ErrorT(Prelude["return"](__dict_Monad_1)(new Data_Either.Left(e)));
    });
};
var monadErrorEither = new MonadError(function (_405) {
    return function (h) {
        if (_405 instanceof Data_Either.Left) {
            return h(_405.value0);
        };
        if (_405 instanceof Data_Either.Right) {
            return new Data_Either.Right(_405.value0);
        };
        throw new Error("Failed pattern match");
    };
}, Data_Either.Left.create);
var catchError = function (dict) {
    return dict.catchError;
};
var catchJust = function (__dict_MonadError_2) {
    return function (p) {
        return function (act) {
            return function (handler) {
                var handle = function (e) {
                    var _1445 = p(e);
                    if (_1445 instanceof Data_Maybe.Nothing) {
                        return throwError(__dict_MonadError_2)(e);
                    };
                    if (_1445 instanceof Data_Maybe.Just) {
                        return handler(_1445.value0);
                    };
                    throw new Error("Failed pattern match");
                };
                return catchError(__dict_MonadError_2)(act)(handle);
            };
        };
    };
};
var monadErrorMaybeT = function (__dict_Monad_3) {
    return function (__dict_MonadError_4) {
        return new MonadError(Control_Monad_Maybe_Trans.liftCatchMaybe(catchError(__dict_MonadError_4)), function (e) {
            return Control_Monad_Trans.lift(Control_Monad_Maybe_Trans.monadTransMaybeT)(__dict_Monad_3)(throwError(__dict_MonadError_4)(e));
        });
    };
};
var monadErrorReaderT = function (__dict_Monad_5) {
    return function (__dict_MonadError_6) {
        return new MonadError(Control_Monad_Reader_Trans.liftCatchReader(catchError(__dict_MonadError_6)), function (e) {
            return Control_Monad_Trans.lift(Control_Monad_Reader_Trans.monadTransReaderT)(__dict_Monad_5)(throwError(__dict_MonadError_6)(e));
        });
    };
};
var monadErrorStateT = function (__dict_Monad_7) {
    return function (__dict_MonadError_8) {
        return new MonadError(Control_Monad_State_Trans.liftCatchState(catchError(__dict_MonadError_8)), function (e) {
            return Control_Monad_Trans.lift(Control_Monad_State_Trans.monadTransStateT)(__dict_Monad_7)(throwError(__dict_MonadError_8)(e));
        });
    };
};
var monadErrorWriterT = function (__dict_Monad_9) {
    return function (__dict_Monoid_10) {
        return function (__dict_MonadError_11) {
            return new MonadError(Control_Monad_Writer_Trans.liftCatchWriter(catchError(__dict_MonadError_11)), function (e) {
                return Control_Monad_Trans.lift(Control_Monad_Writer_Trans.monadTransWriterT(__dict_Monoid_10))(__dict_Monad_9)(throwError(__dict_MonadError_11)(e));
            });
        };
    };
};
module.exports = {
    MonadError: MonadError, 
    catchJust: catchJust, 
    catchError: catchError, 
    throwError: throwError, 
    monadErrorEither: monadErrorEither, 
    monadErrorMaybe: monadErrorMaybe, 
    monadErrorErrorT: monadErrorErrorT, 
    monadErrorExceptT: monadErrorExceptT, 
    monadErrorMaybeT: monadErrorMaybeT, 
    monadErrorReaderT: monadErrorReaderT, 
    monadErrorWriterT: monadErrorWriterT, 
    monadErrorStateT: monadErrorStateT
};

},{"Control.Monad.Error":10,"Control.Monad.Error.Trans":9,"Control.Monad.Except.Trans":11,"Control.Monad.Maybe.Trans":12,"Control.Monad.Reader.Trans":15,"Control.Monad.State.Trans":17,"Control.Monad.Trans":18,"Control.Monad.Writer.Trans":19,"Data.Either":27,"Data.Maybe":32,"Data.Monoid":38,"Prelude":58}],9:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Apply = require("Control.Apply");
var Control_Monad_Error = require("Control.Monad.Error");
var Control_Alt = require("Control.Alt");
var Control_Alternative = require("Control.Alternative");
var Control_Plus = require("Control.Plus");
var Control_Monad_Trans = require("Control.Monad.Trans");
var Control_MonadPlus = require("Control.MonadPlus");
var Data_Either = require("Data.Either");
var Data_Monoid = require("Data.Monoid");
var Data_Tuple = require("Data.Tuple");
var ErrorT = function (x) {
    return x;
};
var runErrorT = function (_382) {
    return _382;
};
var monadTransErrorT = new Control_Monad_Trans.MonadTrans(function (__dict_Monad_2) {
    return function (m) {
        return ErrorT(Prelude[">>="](__dict_Monad_2["__superclass_Prelude.Bind_1"]())(m)(function (_13) {
            return Prelude["return"](__dict_Monad_2)(new Data_Either.Right(_13));
        }));
    };
});
var mapErrorT = function (f) {
    return function (m) {
        return ErrorT(f(runErrorT(m)));
    };
};
var liftPassError = function (__dict_Monad_6) {
    return function (pass) {
        return mapErrorT(function (m) {
            return pass(Prelude[">>="](__dict_Monad_6["__superclass_Prelude.Bind_1"]())(m)(function (_15) {
                return Prelude["return"](__dict_Monad_6)((function () {
                    if (_15 instanceof Data_Either.Left) {
                        return new Data_Tuple.Tuple(new Data_Either.Left(_15.value0), Prelude.id(Prelude.categoryArr));
                    };
                    if (_15 instanceof Data_Either.Right) {
                        return new Data_Tuple.Tuple(new Data_Either.Right(_15.value0.value0), _15.value0.value1);
                    };
                    throw new Error("Failed pattern match");
                })());
            }));
        });
    };
};
var liftListenError = function (__dict_Monad_7) {
    return function (listen) {
        return mapErrorT(function (m) {
            return Prelude[">>="](__dict_Monad_7["__superclass_Prelude.Bind_1"]())(listen(m))(function (_14) {
                return Prelude["return"](__dict_Monad_7)(Prelude["<$>"](Data_Either.functorEither)(function (r) {
                    return new Data_Tuple.Tuple(r, _14.value1);
                })(_14.value0));
            });
        });
    };
};
var liftCallCCError = function (callCC) {
    return function (f) {
        return ErrorT(callCC(function (c) {
            return runErrorT(f(function (a) {
                return ErrorT(c(new Data_Either.Right(a)));
            }));
        }));
    };
};
var functorErrorT = function (__dict_Functor_8) {
    return new Prelude.Functor(function (f) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(ErrorT)(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["<$>"](__dict_Functor_8)(Prelude["<$>"](Data_Either.functorEither)(f)))(runErrorT));
    });
};
var applyErrorT = function (__dict_Apply_10) {
    return new Prelude.Apply(function (_383) {
        return function (_384) {
            return ErrorT(Prelude["<*>"](__dict_Apply_10)(Prelude["<$>"](__dict_Apply_10["__superclass_Prelude.Functor_0"]())(Control_Apply.lift2(Data_Either.applyEither)(Prelude["$"]))(_383))(_384));
        };
    }, function () {
        return functorErrorT(__dict_Apply_10["__superclass_Prelude.Functor_0"]());
    });
};
var bindErrorT = function (__dict_Monad_9) {
    return new Prelude.Bind(function (m) {
        return function (f) {
            return ErrorT(Prelude[">>="](__dict_Monad_9["__superclass_Prelude.Bind_1"]())(runErrorT(m))(function (_12) {
                if (_12 instanceof Data_Either.Left) {
                    return Prelude["return"](__dict_Monad_9)(new Data_Either.Left(_12.value0));
                };
                if (_12 instanceof Data_Either.Right) {
                    return runErrorT(f(_12.value0));
                };
                throw new Error("Failed pattern match");
            }));
        };
    }, function () {
        return applyErrorT((__dict_Monad_9["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]());
    });
};
var applicativeErrorT = function (__dict_Applicative_11) {
    return new Prelude.Applicative(function () {
        return applyErrorT(__dict_Applicative_11["__superclass_Prelude.Apply_0"]());
    }, function (a) {
        return ErrorT(Prelude.pure(__dict_Applicative_11)(new Data_Either.Right(a)));
    });
};
var monadErrorT = function (__dict_Monad_5) {
    return new Prelude.Monad(function () {
        return applicativeErrorT(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    }, function () {
        return bindErrorT(__dict_Monad_5);
    });
};
var altErrorT = function (__dict_Monad_14) {
    return new Control_Alt.Alt(function (x) {
        return function (y) {
            return ErrorT(Prelude[">>="](__dict_Monad_14["__superclass_Prelude.Bind_1"]())(runErrorT(x))(function (e) {
                if (e instanceof Data_Either.Left) {
                    return runErrorT(y);
                };
                return Prelude["return"](__dict_Monad_14)(e);
            }));
        };
    }, function () {
        return functorErrorT(((__dict_Monad_14["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
    });
};
var plusErrorT = function (__dict_Monad_0) {
    return function (__dict_Error_1) {
        return new Control_Plus.Plus(function () {
            return altErrorT(__dict_Monad_0);
        }, Prelude["return"](__dict_Monad_0)(Data_Either.Left.create(Control_Monad_Error.strMsg(__dict_Error_1)("No alternative"))));
    };
};
var alternativeErrorT = function (__dict_Monad_12) {
    return function (__dict_Error_13) {
        return new Control_Alternative.Alternative(function () {
            return plusErrorT(__dict_Monad_12)(__dict_Error_13);
        }, function () {
            return applicativeErrorT(__dict_Monad_12["__superclass_Prelude.Applicative_0"]());
        });
    };
};
var monadPlusErrorT = function (__dict_Monad_3) {
    return function (__dict_Error_4) {
        return new Control_MonadPlus.MonadPlus(function () {
            return alternativeErrorT(__dict_Monad_3)(__dict_Error_4);
        }, function () {
            return monadErrorT(__dict_Monad_3);
        });
    };
};
module.exports = {
    ErrorT: ErrorT, 
    liftCallCCError: liftCallCCError, 
    liftPassError: liftPassError, 
    liftListenError: liftListenError, 
    mapErrorT: mapErrorT, 
    runErrorT: runErrorT, 
    functorErrorT: functorErrorT, 
    applyErrorT: applyErrorT, 
    applicativeErrorT: applicativeErrorT, 
    altErrorT: altErrorT, 
    plusErrorT: plusErrorT, 
    alternativeErrorT: alternativeErrorT, 
    bindErrorT: bindErrorT, 
    monadErrorT: monadErrorT, 
    monadPlusErrorT: monadPlusErrorT, 
    monadTransErrorT: monadTransErrorT
};

},{"Control.Alt":1,"Control.Alternative":2,"Control.Apply":3,"Control.Monad.Error":10,"Control.Monad.Trans":18,"Control.MonadPlus":21,"Control.Plus":22,"Data.Either":27,"Data.Monoid":38,"Data.Tuple":44,"Prelude":58}],10:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var $$Error = function (noMsg, strMsg) {
    this.noMsg = noMsg;
    this.strMsg = strMsg;
};
var strMsg = function (dict) {
    return dict.strMsg;
};
var noMsg = function (dict) {
    return dict.noMsg;
};
var errorString = new $$Error("", Prelude.id(Prelude.categoryArr));
module.exports = {
    "Error": $$Error, 
    strMsg: strMsg, 
    noMsg: noMsg, 
    errorString: errorString
};

},{"Prelude":58}],11:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Either = require("Data.Either");
var Data_Monoid = require("Data.Monoid");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
var ExceptT = function (x) {
    return x;
};
var throwE = function (__dict_Applicative_0) {
    return Prelude["<<<"](Prelude.semigroupoidArr)(ExceptT)(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude.pure(__dict_Applicative_0))(Data_Either.Left.create));
};
var runExceptT = function (_256) {
    return _256;
};
var withExceptT = function (__dict_Functor_1) {
    return function (f) {
        var mapLeft = function (f_1) {
            return function (_257) {
                if (_257 instanceof Data_Either.Right) {
                    return new Data_Either.Right(_257.value0);
                };
                if (_257 instanceof Data_Either.Left) {
                    return new Data_Either.Left(f_1(_257.value0));
                };
                throw new Error("Failed pattern match");
            };
        };
        return Prelude["<<<"](Prelude.semigroupoidArr)(ExceptT)(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["<$>"](__dict_Functor_1)(mapLeft(f)))(runExceptT));
    };
};
var mapExceptT = function (f) {
    return function (m) {
        return f(runExceptT(m));
    };
};
var functorExceptT = function (__dict_Functor_7) {
    return new Prelude.Functor(function (f) {
        return mapExceptT(Prelude["<$>"](__dict_Functor_7)(Prelude["<$>"](Data_Either.functorEither)(f)));
    });
};
var catchE = function (__dict_Monad_8) {
    return function (m) {
        return function (handler) {
            return Prelude[">>="](__dict_Monad_8["__superclass_Prelude.Bind_1"]())(runExceptT(m))(Data_Either.either(Prelude["<<<"](Prelude.semigroupoidArr)(runExceptT)(handler))(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude.pure(__dict_Monad_8["__superclass_Prelude.Applicative_0"]()))(Data_Either.Right.create)));
        };
    };
};
var applyExceptT = function (__dict_Apply_10) {
    return new Prelude.Apply(function (_258) {
        return function (_259) {
            var f$prime = Prelude["<$>"](__dict_Apply_10["__superclass_Prelude.Functor_0"]())(Prelude["<*>"](Data_Either.applyEither))(_258);
            var x$prime = Prelude["<*>"](__dict_Apply_10)(f$prime)(_259);
            return x$prime;
        };
    }, function () {
        return functorExceptT(__dict_Apply_10["__superclass_Prelude.Functor_0"]());
    });
};
var bindExceptT = function (__dict_Monad_9) {
    return new Prelude.Bind(function (m) {
        return function (k) {
            return Prelude[">>="](__dict_Monad_9["__superclass_Prelude.Bind_1"]())(runExceptT(m))(Data_Either.either(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["return"](__dict_Monad_9))(Data_Either.Left.create))(Prelude["<<<"](Prelude.semigroupoidArr)(runExceptT)(k)));
        };
    }, function () {
        return applyExceptT((__dict_Monad_9["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]());
    });
};
var applicativeExceptT = function (__dict_Applicative_11) {
    return new Prelude.Applicative(function () {
        return applyExceptT(__dict_Applicative_11["__superclass_Prelude.Apply_0"]());
    }, Prelude["<<<"](Prelude.semigroupoidArr)(ExceptT)(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude.pure(__dict_Applicative_11))(Data_Either.Right.create)));
};
var monadExceptT = function (__dict_Monad_6) {
    return new Prelude.Monad(function () {
        return applicativeExceptT(__dict_Monad_6["__superclass_Prelude.Applicative_0"]());
    }, function () {
        return bindExceptT(__dict_Monad_6);
    });
};
var altExceptT = function (__dict_Semigroup_14) {
    return function (__dict_Monad_15) {
        return new Control_Alt.Alt(function (m) {
            return function (n) {
                return ExceptT(Prelude[">>="](__dict_Monad_15["__superclass_Prelude.Bind_1"]())(runExceptT(m))(function (_11) {
                    if (_11 instanceof Data_Either.Right) {
                        return Prelude.pure(__dict_Monad_15["__superclass_Prelude.Applicative_0"]())(new Data_Either.Right(_11.value0));
                    };
                    if (_11 instanceof Data_Either.Left) {
                        return Prelude[">>="](__dict_Monad_15["__superclass_Prelude.Bind_1"]())(runExceptT(n))(function (_10) {
                            if (_10 instanceof Data_Either.Right) {
                                return Prelude.pure(__dict_Monad_15["__superclass_Prelude.Applicative_0"]())(new Data_Either.Right(_10.value0));
                            };
                            if (_10 instanceof Data_Either.Left) {
                                return Prelude.pure(__dict_Monad_15["__superclass_Prelude.Applicative_0"]())(new Data_Either.Left(Prelude["<>"](__dict_Semigroup_14)(_11.value0)(_10.value0)));
                            };
                            throw new Error("Failed pattern match");
                        });
                    };
                    throw new Error("Failed pattern match");
                }));
            };
        }, function () {
            return functorExceptT(((__dict_Monad_15["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
        });
    };
};
var plusExceptT = function (__dict_Monoid_2) {
    return function (__dict_Monad_3) {
        return new Control_Plus.Plus(function () {
            return altExceptT(__dict_Monoid_2["__superclass_Prelude.Semigroup_0"]())(__dict_Monad_3);
        }, throwE(__dict_Monad_3["__superclass_Prelude.Applicative_0"]())(Data_Monoid.mempty(__dict_Monoid_2)));
    };
};
var alternativeExceptT = function (__dict_Monoid_12) {
    return function (__dict_Monad_13) {
        return new Control_Alternative.Alternative(function () {
            return plusExceptT(__dict_Monoid_12)(__dict_Monad_13);
        }, function () {
            return applicativeExceptT(__dict_Monad_13["__superclass_Prelude.Applicative_0"]());
        });
    };
};
var monadPlusExceptT = function (__dict_Monoid_4) {
    return function (__dict_Monad_5) {
        return new Control_MonadPlus.MonadPlus(function () {
            return alternativeExceptT(__dict_Monoid_4)(__dict_Monad_5);
        }, function () {
            return monadExceptT(__dict_Monad_5);
        });
    };
};
module.exports = {
    ExceptT: ExceptT, 
    catchE: catchE, 
    throwE: throwE, 
    mapExceptT: mapExceptT, 
    withExceptT: withExceptT, 
    runExceptT: runExceptT, 
    functorExceptT: functorExceptT, 
    applyExceptT: applyExceptT, 
    applicativeExceptT: applicativeExceptT, 
    bindExceptT: bindExceptT, 
    monadExceptT: monadExceptT, 
    altExceptT: altExceptT, 
    plusExceptT: plusExceptT, 
    alternativeExceptT: alternativeExceptT, 
    monadPlusExceptT: monadPlusExceptT
};

},{"Control.Alt":1,"Control.Alternative":2,"Control.MonadPlus":21,"Control.Plus":22,"Data.Either":27,"Data.Monoid":38,"Prelude":58}],12:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Control_Monad = require("Control.Monad");
var Control_Monad_Trans = require("Control.Monad.Trans");
var Control_MonadPlus = require("Control.MonadPlus");
var Data_Either = require("Data.Either");
var Data_Maybe = require("Data.Maybe");
var Data_Tuple = require("Data.Tuple");
var MaybeT = function (x) {
    return x;
};
var runMaybeT = function (_390) {
    return _390;
};
var monadTransMaybeT = new Control_Monad_Trans.MonadTrans(function (__dict_Monad_1) {
    return Prelude["<<<"](Prelude.semigroupoidArr)(MaybeT)(Prelude.liftM1(__dict_Monad_1)(Data_Maybe.Just.create));
});
var mapMaybeT = function (f) {
    return Prelude["<<<"](Prelude.semigroupoidArr)(MaybeT)(Prelude["<<<"](Prelude.semigroupoidArr)(f)(runMaybeT));
};
var liftPassMaybe = function (__dict_Monad_4) {
    return function (pass) {
        return mapMaybeT(function (m) {
            return pass(Prelude[">>="](__dict_Monad_4["__superclass_Prelude.Bind_1"]())(m)(function (_21) {
                return Prelude["return"](__dict_Monad_4)((function () {
                    if (_21 instanceof Data_Maybe.Nothing) {
                        return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Prelude.id(Prelude.categoryArr));
                    };
                    if (_21 instanceof Data_Maybe.Just) {
                        return new Data_Tuple.Tuple(new Data_Maybe.Just(_21.value0.value0), _21.value0.value1);
                    };
                    throw new Error("Failed pattern match");
                })());
            }));
        });
    };
};
var liftListenMaybe = function (__dict_Monad_5) {
    return function (listen) {
        return mapMaybeT(function (m) {
            return Prelude[">>="](__dict_Monad_5["__superclass_Prelude.Bind_1"]())(listen(m))(function (_20) {
                return Prelude["return"](__dict_Monad_5)(Prelude["<$>"](Data_Maybe.functorMaybe)(function (r) {
                    return new Data_Tuple.Tuple(r, _20.value1);
                })(_20.value0));
            });
        });
    };
};
var liftCatchMaybe = function ($$catch) {
    return function (m) {
        return function (h) {
            return MaybeT($$catch(runMaybeT(m))(Prelude["<<<"](Prelude.semigroupoidArr)(runMaybeT)(h)));
        };
    };
};
var liftCallCCMaybe = function (callCC) {
    return function (f) {
        return MaybeT(callCC(function (c) {
            return runMaybeT(f(function (a) {
                return MaybeT(c(new Data_Maybe.Just(a)));
            }));
        }));
    };
};
var monadMaybeT = function (__dict_Monad_3) {
    return new Prelude.Monad(function () {
        return applicativeMaybeT(__dict_Monad_3);
    }, function () {
        return bindMaybeT(__dict_Monad_3);
    });
};
var functorMaybeT = function (__dict_Monad_6) {
    return new Prelude.Functor(Prelude.liftA1(applicativeMaybeT(__dict_Monad_6)));
};
var bindMaybeT = function (__dict_Monad_7) {
    return new Prelude.Bind(function (x) {
        return function (f) {
            return MaybeT(Prelude[">>="](__dict_Monad_7["__superclass_Prelude.Bind_1"]())(runMaybeT(x))(function (_18) {
                if (_18 instanceof Data_Maybe.Nothing) {
                    return Prelude["return"](__dict_Monad_7)(Data_Maybe.Nothing.value);
                };
                if (_18 instanceof Data_Maybe.Just) {
                    return runMaybeT(f(_18.value0));
                };
                throw new Error("Failed pattern match");
            }));
        };
    }, function () {
        return applyMaybeT(__dict_Monad_7);
    });
};
var applyMaybeT = function (__dict_Monad_8) {
    return new Prelude.Apply(Prelude.ap(monadMaybeT(__dict_Monad_8)), function () {
        return functorMaybeT(__dict_Monad_8);
    });
};
var applicativeMaybeT = function (__dict_Monad_9) {
    return new Prelude.Applicative(function () {
        return applyMaybeT(__dict_Monad_9);
    }, Prelude["<<<"](Prelude.semigroupoidArr)(MaybeT)(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude.pure(__dict_Monad_9["__superclass_Prelude.Applicative_0"]()))(Data_Maybe.Just.create)));
};
var altMaybeT = function (__dict_Monad_11) {
    return new Control_Alt.Alt(function (m1) {
        return function (m2) {
            return Prelude[">>="](__dict_Monad_11["__superclass_Prelude.Bind_1"]())(runMaybeT(m1))(function (_19) {
                if (_19 instanceof Data_Maybe.Nothing) {
                    return runMaybeT(m2);
                };
                return Prelude["return"](__dict_Monad_11)(_19);
            });
        };
    }, function () {
        return functorMaybeT(__dict_Monad_11);
    });
};
var plusMaybeT = function (__dict_Monad_0) {
    return new Control_Plus.Plus(function () {
        return altMaybeT(__dict_Monad_0);
    }, Prelude.pure(__dict_Monad_0["__superclass_Prelude.Applicative_0"]())(Data_Maybe.Nothing.value));
};
var alternativeMaybeT = function (__dict_Monad_10) {
    return new Control_Alternative.Alternative(function () {
        return plusMaybeT(__dict_Monad_10);
    }, function () {
        return applicativeMaybeT(__dict_Monad_10);
    });
};
var monadPlusMaybeT = function (__dict_Monad_2) {
    return new Control_MonadPlus.MonadPlus(function () {
        return alternativeMaybeT(__dict_Monad_2);
    }, function () {
        return monadMaybeT(__dict_Monad_2);
    });
};
module.exports = {
    MaybeT: MaybeT, 
    liftCallCCMaybe: liftCallCCMaybe, 
    liftPassMaybe: liftPassMaybe, 
    liftListenMaybe: liftListenMaybe, 
    liftCatchMaybe: liftCatchMaybe, 
    mapMaybeT: mapMaybeT, 
    runMaybeT: runMaybeT, 
    functorMaybeT: functorMaybeT, 
    applyMaybeT: applyMaybeT, 
    applicativeMaybeT: applicativeMaybeT, 
    bindMaybeT: bindMaybeT, 
    monadMaybeT: monadMaybeT, 
    monadTransMaybeT: monadTransMaybeT, 
    altMaybeT: altMaybeT, 
    plusMaybeT: plusMaybeT, 
    alternativeMaybeT: alternativeMaybeT, 
    monadPlusMaybeT: monadPlusMaybeT
};

},{"Control.Alt":1,"Control.Alternative":2,"Control.Monad":20,"Control.Monad.Trans":18,"Control.MonadPlus":21,"Control.Plus":22,"Data.Either":27,"Data.Maybe":32,"Data.Tuple":44,"Prelude":58}],13:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Tuple = require("Data.Tuple");
var Data_Monoid = require("Data.Monoid");
var Control_Monad_Trans = require("Control.Monad.Trans");
var RWST = function (x) {
    return x;
};
var runRWST = function (_396) {
    return _396;
};
var withRWST = function (f) {
    return function (m) {
        return function (r) {
            return function (s) {
                return Data_Tuple.uncurry(runRWST(m))(f(r)(s));
            };
        };
    };
};
var mkSee = function (__dict_Monoid_2) {
    return function (s) {
        return function (a) {
            return function (w) {
                return {
                    state: s, 
                    result: a, 
                    log: w
                };
            };
        };
    };
};
var monadTransRWST = function (__dict_Monoid_3) {
    return new Control_Monad_Trans.MonadTrans(function (__dict_Monad_4) {
        return function (m) {
            return function (_395) {
                return function (s) {
                    return Prelude[">>="](__dict_Monad_4["__superclass_Prelude.Bind_1"]())(m)(function (a) {
                        return Prelude["return"](__dict_Monad_4)(mkSee(__dict_Monoid_3)(s)(a)(Data_Monoid.mempty(__dict_Monoid_3)));
                    });
                };
            };
        };
    });
};
var mapRWST = function (f) {
    return function (m) {
        return function (r) {
            return function (s) {
                return f(runRWST(m)(r)(s));
            };
        };
    };
};
var functorRWST = function (__dict_Functor_5) {
    return new Prelude.Functor(function (f) {
        return function (m) {
            return function (r) {
                return function (s) {
                    return Prelude["<$>"](__dict_Functor_5)(function (see) {
                        var _1381 = {};
                        for (var _1382 in see) {
                            if (see.hasOwnProperty(_1382)) {
                                _1381[_1382] = see[_1382];
                            };
                        };
                        _1381.result = f(see.result);
                        return _1381;
                    })(runRWST(m)(r)(s));
                };
            };
        };
    });
};
var execRWST = function (__dict_Monad_6) {
    return function (m) {
        return function (r) {
            return function (s) {
                return Prelude[">>="](__dict_Monad_6["__superclass_Prelude.Bind_1"]())(runRWST(m)(r)(s))(function (see) {
                    return Prelude["return"](__dict_Monad_6)(new Data_Tuple.Tuple(see.state, see.log));
                });
            };
        };
    };
};
var evalRWST = function (__dict_Monad_7) {
    return function (m) {
        return function (r) {
            return function (s) {
                return Prelude[">>="](__dict_Monad_7["__superclass_Prelude.Bind_1"]())(runRWST(m)(r)(s))(function (see) {
                    return Prelude["return"](__dict_Monad_7)(new Data_Tuple.Tuple(see.result, see.log));
                });
            };
        };
    };
};
var applyRWST = function (__dict_Bind_10) {
    return function (__dict_Monoid_11) {
        return new Prelude.Apply(function (f) {
            return function (m) {
                return function (r) {
                    return function (s) {
                        return Prelude[">>="](__dict_Bind_10)(runRWST(f)(r)(s))(function (_392) {
                            return Prelude["<#>"]((__dict_Bind_10["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(runRWST(m)(r)(_392.state))(function (_391) {
                                return mkSee(__dict_Monoid_11)(_391.state)(_392.result(_391.result))(Prelude["++"](__dict_Monoid_11["__superclass_Prelude.Semigroup_0"]())(_392.log)(_391.log));
                            });
                        });
                    };
                };
            };
        }, function () {
            return functorRWST((__dict_Bind_10["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
        });
    };
};
var bindRWST = function (__dict_Bind_8) {
    return function (__dict_Monoid_9) {
        return new Prelude.Bind(function (m) {
            return function (f) {
                return function (r) {
                    return function (s) {
                        return Prelude[">>="](__dict_Bind_8)(runRWST(m)(r)(s))(function (_393) {
                            return Prelude["<#>"]((__dict_Bind_8["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(runRWST(f(_393.result))(r)(_393.state))(function (see$prime) {
                                var _1392 = {};
                                for (var _1393 in see$prime) {
                                    if (see$prime.hasOwnProperty(_1393)) {
                                        _1392[_1393] = see$prime[_1393];
                                    };
                                };
                                _1392.log = Prelude["++"](__dict_Monoid_9["__superclass_Prelude.Semigroup_0"]())(_393.log)(see$prime.log);
                                return _1392;
                            });
                        });
                    };
                };
            };
        }, function () {
            return applyRWST(__dict_Bind_8)(__dict_Monoid_9);
        });
    };
};
var applicativeRWST = function (__dict_Monad_12) {
    return function (__dict_Monoid_13) {
        return new Prelude.Applicative(function () {
            return applyRWST(__dict_Monad_12["__superclass_Prelude.Bind_1"]())(__dict_Monoid_13);
        }, function (a) {
            return function (_394) {
                return function (s) {
                    return Prelude.pure(__dict_Monad_12["__superclass_Prelude.Applicative_0"]())(mkSee(__dict_Monoid_13)(s)(a)(Data_Monoid.mempty(__dict_Monoid_13)));
                };
            };
        });
    };
};
var monadRWST = function (__dict_Monad_0) {
    return function (__dict_Monoid_1) {
        return new Prelude.Monad(function () {
            return applicativeRWST(__dict_Monad_0)(__dict_Monoid_1);
        }, function () {
            return bindRWST(__dict_Monad_0["__superclass_Prelude.Bind_1"]())(__dict_Monoid_1);
        });
    };
};
module.exports = {
    RWST: RWST, 
    withRWST: withRWST, 
    mapRWST: mapRWST, 
    execRWST: execRWST, 
    evalRWST: evalRWST, 
    runRWST: runRWST, 
    mkSee: mkSee, 
    functorRWST: functorRWST, 
    applyRWST: applyRWST, 
    bindRWST: bindRWST, 
    applicativeRWST: applicativeRWST, 
    monadRWST: monadRWST, 
    monadTransRWST: monadTransRWST
};

},{"Control.Monad.Trans":18,"Data.Monoid":38,"Data.Tuple":44,"Prelude":58}],14:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Identity = require("Data.Identity");
var Control_Monad_RWS_Trans = require("Control.Monad.RWS.Trans");
var Data_Monoid = require("Data.Monoid");
var Data_Tuple = require("Data.Tuple");
var writer = function (__dict_Applicative_0) {
    return function (_598) {
        return function (_592) {
            return function (s) {
                return Prelude.pure(__dict_Applicative_0)({
                    state: s, 
                    result: _598.value0, 
                    log: _598.value1
                });
            };
        };
    };
};
var withRWS = Control_Monad_RWS_Trans.withRWST;
var tell = function (__dict_Applicative_1) {
    return function (w) {
        return writer(__dict_Applicative_1)(new Data_Tuple.Tuple(Prelude.unit, w));
    };
};
var state = function (__dict_Applicative_2) {
    return function (__dict_Monoid_3) {
        return function (f) {
            return function (_596) {
                return function (s) {
                    var _1983 = f(s);
                    return Prelude.pure(__dict_Applicative_2)(Control_Monad_RWS_Trans.mkSee(__dict_Monoid_3)(_1983.value1)(_1983.value0)(Data_Monoid.mempty(__dict_Monoid_3)));
                };
            };
        };
    };
};
var rws = function (f) {
    return function (r) {
        return function (s) {
            return Prelude["return"](Data_Identity.monadIdentity)(f(r)(s));
        };
    };
};
var runRWS = function (m) {
    return function (r) {
        return function (s) {
            return Data_Identity.runIdentity(Control_Monad_RWS_Trans.runRWST(m)(r)(s));
        };
    };
};
var reader = function (__dict_Applicative_4) {
    return function (__dict_Monoid_5) {
        return function (f) {
            return function (r) {
                return function (s) {
                    return Prelude.pure(__dict_Applicative_4)(Control_Monad_RWS_Trans.mkSee(__dict_Monoid_5)(s)(f(r))(Data_Monoid.mempty(__dict_Monoid_5)));
                };
            };
        };
    };
};
var put = function (__dict_Applicative_6) {
    return function (__dict_Monoid_7) {
        return function (s) {
            return state(__dict_Applicative_6)(__dict_Monoid_7)(function (_597) {
                return new Data_Tuple.Tuple(Prelude.unit, s);
            });
        };
    };
};
var pass = function (__dict_Monad_8) {
    return function (m) {
        return function (r) {
            return function (s) {
                return Prelude[">>="](__dict_Monad_8["__superclass_Prelude.Bind_1"]())(Control_Monad_RWS_Trans.runRWST(m)(r)(s))(function (_594) {
                    return Prelude.pure(__dict_Monad_8["__superclass_Prelude.Applicative_0"]())({
                        state: _594.state, 
                        result: _594.result.value0, 
                        log: _594.result.value1(_594.log)
                    });
                });
            };
        };
    };
};
var modify = function (__dict_Applicative_9) {
    return function (__dict_Monoid_10) {
        return function (f) {
            return state(__dict_Applicative_9)(__dict_Monoid_10)(function (s) {
                return new Data_Tuple.Tuple(Prelude.unit, f(s));
            });
        };
    };
};
var mapRWS = function (f) {
    return Control_Monad_RWS_Trans.mapRWST(Prelude[">>>"](Prelude.semigroupoidArr)(Data_Identity.runIdentity)(Prelude[">>>"](Prelude.semigroupoidArr)(f)(Data_Identity.Identity)));
};
var local = function (f) {
    return function (m) {
        return function (r) {
            return function (s) {
                return Control_Monad_RWS_Trans.runRWST(m)(f(r))(s);
            };
        };
    };
};
var listens = function (__dict_Monad_11) {
    return function (f) {
        return function (m) {
            return function (r) {
                return function (s) {
                    return Prelude[">>="](__dict_Monad_11["__superclass_Prelude.Bind_1"]())(Control_Monad_RWS_Trans.runRWST(m)(r)(s))(function (_595) {
                        return Prelude.pure(__dict_Monad_11["__superclass_Prelude.Applicative_0"]())({
                            state: _595.state, 
                            result: new Data_Tuple.Tuple(_595.result, f(_595.log)), 
                            log: _595.log
                        });
                    });
                };
            };
        };
    };
};
var listen = function (__dict_Monad_12) {
    return function (m) {
        return function (r) {
            return function (s) {
                return Prelude[">>="](__dict_Monad_12["__superclass_Prelude.Bind_1"]())(Control_Monad_RWS_Trans.runRWST(m)(r)(s))(function (_593) {
                    return Prelude.pure(__dict_Monad_12["__superclass_Prelude.Applicative_0"]())({
                        state: _593.state, 
                        result: new Data_Tuple.Tuple(_593.result, _593.log), 
                        log: _593.log
                    });
                });
            };
        };
    };
};
var gets = function (__dict_Applicative_13) {
    return function (__dict_Monoid_14) {
        return function (f) {
            return state(__dict_Applicative_13)(__dict_Monoid_14)(function (s) {
                return new Data_Tuple.Tuple(f(s), s);
            });
        };
    };
};
var get = function (__dict_Applicative_15) {
    return function (__dict_Monoid_16) {
        return state(__dict_Applicative_15)(__dict_Monoid_16)(function (s) {
            return new Data_Tuple.Tuple(s, s);
        });
    };
};
var execRWS = function (m) {
    return function (r) {
        return function (s) {
            return Data_Identity.runIdentity(Control_Monad_RWS_Trans.execRWST(Data_Identity.monadIdentity)(m)(r)(s));
        };
    };
};
var evalRWS = function (m) {
    return function (r) {
        return function (s) {
            return Data_Identity.runIdentity(Control_Monad_RWS_Trans.evalRWST(Data_Identity.monadIdentity)(m)(r)(s));
        };
    };
};
var censor = function (__dict_Monad_17) {
    return function (f) {
        return function (m) {
            return function (r) {
                return function (s) {
                    return Prelude[">>="](__dict_Monad_17["__superclass_Prelude.Bind_1"]())(Control_Monad_RWS_Trans.runRWST(m)(r)(s))(function (see) {
                        return Prelude.pure(__dict_Monad_17["__superclass_Prelude.Applicative_0"]())((function () {
                            var _2001 = {};
                            for (var _2002 in see) {
                                if (see.hasOwnProperty(_2002)) {
                                    _2001[_2002] = see[_2002];
                                };
                            };
                            _2001.log = f(see.log);
                            return _2001;
                        })());
                    });
                };
            };
        };
    };
};
var ask = function (__dict_Applicative_18) {
    return function (__dict_Monoid_19) {
        return function (r) {
            return function (s) {
                return Prelude.pure(__dict_Applicative_18)(Control_Monad_RWS_Trans.mkSee(__dict_Monoid_19)(s)(r)(Data_Monoid.mempty(__dict_Monoid_19)));
            };
        };
    };
};
module.exports = {
    modify: modify, 
    put: put, 
    gets: gets, 
    get: get, 
    state: state, 
    censor: censor, 
    listens: listens, 
    tell: tell, 
    pass: pass, 
    listen: listen, 
    writer: writer, 
    reader: reader, 
    local: local, 
    ask: ask, 
    withRWS: withRWS, 
    mapRWS: mapRWS, 
    execRWS: execRWS, 
    evalRWS: evalRWS, 
    runRWS: runRWS, 
    rws: rws
};

},{"Control.Monad.RWS.Trans":13,"Data.Identity":31,"Data.Monoid":38,"Data.Tuple":44,"Prelude":58}],15:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Control_Monad_Trans = require("Control.Monad.Trans");
var Control_MonadPlus = require("Control.MonadPlus");
var ReaderT = function (x) {
    return x;
};
var runReaderT = function (_211) {
    return _211;
};
var withReaderT = function (f) {
    return function (m) {
        return ReaderT(Prelude["<<<"](Prelude.semigroupoidArr)(runReaderT(m))(f));
    };
};
var mapReaderT = function (f) {
    return function (m) {
        return ReaderT(Prelude["<<<"](Prelude.semigroupoidArr)(f)(runReaderT(m)));
    };
};
var liftReaderT = function (m) {
    return Prelude["const"](m);
};
var monadTransReaderT = new Control_Monad_Trans.MonadTrans(function (__dict_Monad_2) {
    return liftReaderT;
});
var liftCatchReader = function ($$catch) {
    return function (m) {
        return function (h) {
            return ReaderT(function (r) {
                return $$catch(runReaderT(m)(r))(function (e) {
                    return runReaderT(h(e))(r);
                });
            });
        };
    };
};
var liftCallCCReader = function (callCC) {
    return function (f) {
        return ReaderT(function (r) {
            return callCC(function (c) {
                return runReaderT(f(function (a) {
                    return ReaderT(Prelude["const"](c(a)));
                }))(r);
            });
        });
    };
};
var functorReaderT = function (__dict_Functor_4) {
    return new Prelude.Functor(function (f) {
        return mapReaderT(Prelude["<$>"](__dict_Functor_4)(f));
    });
};
var applyReaderT = function (__dict_Applicative_6) {
    return new Prelude.Apply(function (f) {
        return function (v) {
            return function (r) {
                return Prelude["<*>"](__dict_Applicative_6["__superclass_Prelude.Apply_0"]())(runReaderT(f)(r))(runReaderT(v)(r));
            };
        };
    }, function () {
        return functorReaderT((__dict_Applicative_6["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
    });
};
var bindReaderT = function (__dict_Monad_5) {
    return new Prelude.Bind(function (m) {
        return function (k) {
            return function (r) {
                return Prelude[">>="](__dict_Monad_5["__superclass_Prelude.Bind_1"]())(runReaderT(m)(r))(function (_9) {
                    return runReaderT(k(_9))(r);
                });
            };
        };
    }, function () {
        return applyReaderT(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    });
};
var applicativeReaderT = function (__dict_Applicative_7) {
    return new Prelude.Applicative(function () {
        return applyReaderT(__dict_Applicative_7);
    }, Prelude["<<<"](Prelude.semigroupoidArr)(liftReaderT)(Prelude.pure(__dict_Applicative_7)));
};
var monadReaderT = function (__dict_Monad_0) {
    return new Prelude.Monad(function () {
        return applicativeReaderT(__dict_Monad_0["__superclass_Prelude.Applicative_0"]());
    }, function () {
        return bindReaderT(__dict_Monad_0);
    });
};
var altReaderT = function (__dict_Alt_9) {
    return new Control_Alt.Alt(function (m) {
        return function (n) {
            return function (r) {
                return Control_Alt["<|>"](__dict_Alt_9)(runReaderT(m)(r))(runReaderT(n)(r));
            };
        };
    }, function () {
        return functorReaderT(__dict_Alt_9["__superclass_Prelude.Functor_0"]());
    });
};
var plusReaderT = function (__dict_Plus_3) {
    return new Control_Plus.Plus(function () {
        return altReaderT(__dict_Plus_3["__superclass_Control.Alt.Alt_0"]());
    }, liftReaderT(Control_Plus.empty(__dict_Plus_3)));
};
var alternativeReaderT = function (__dict_Alternative_8) {
    return new Control_Alternative.Alternative(function () {
        return plusReaderT(__dict_Alternative_8["__superclass_Control.Plus.Plus_1"]());
    }, function () {
        return applicativeReaderT(__dict_Alternative_8["__superclass_Prelude.Applicative_0"]());
    });
};
var monadPlusReaderT = function (__dict_MonadPlus_1) {
    return new Control_MonadPlus.MonadPlus(function () {
        return alternativeReaderT(__dict_MonadPlus_1["__superclass_Control.Alternative.Alternative_1"]());
    }, function () {
        return monadReaderT(__dict_MonadPlus_1["__superclass_Prelude.Monad_0"]());
    });
};
module.exports = {
    ReaderT: ReaderT, 
    liftCallCCReader: liftCallCCReader, 
    liftCatchReader: liftCatchReader, 
    liftReaderT: liftReaderT, 
    mapReaderT: mapReaderT, 
    withReaderT: withReaderT, 
    runReaderT: runReaderT, 
    functorReaderT: functorReaderT, 
    applyReaderT: applyReaderT, 
    applicativeReaderT: applicativeReaderT, 
    altReaderT: altReaderT, 
    plusReaderT: plusReaderT, 
    alternativeReaderT: alternativeReaderT, 
    bindReaderT: bindReaderT, 
    monadReaderT: monadReaderT, 
    monadPlusReaderT: monadPlusReaderT, 
    monadTransReaderT: monadTransReaderT
};

},{"Control.Alt":1,"Control.Alternative":2,"Control.Monad.Trans":18,"Control.MonadPlus":21,"Control.Plus":22,"Prelude":58}],16:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Monad_Trans = require("Control.Monad.Trans");
var Control_Monad_RWS = require("Control.Monad.RWS");
var Control_Monad_State_Trans = require("Control.Monad.State.Trans");
var Control_Monad_Error = require("Control.Monad.Error");
var Control_Monad_Error_Trans = require("Control.Monad.Error.Trans");
var Control_Monad_Maybe_Trans = require("Control.Monad.Maybe.Trans");
var Control_Monad_Reader_Trans = require("Control.Monad.Reader.Trans");
var Control_Monad_RWS_Trans = require("Control.Monad.RWS.Trans");
var Control_Monad_Writer_Trans = require("Control.Monad.Writer.Trans");
var Data_Monoid = require("Data.Monoid");
var Data_Tuple = require("Data.Tuple");
var MonadState = function (state) {
    this.state = state;
};
var state = function (dict) {
    return dict.state;
};
var put = function (__dict_Monad_0) {
    return function (__dict_MonadState_1) {
        return function (s) {
            return state(__dict_MonadState_1)(function (_599) {
                return new Data_Tuple.Tuple(Prelude.unit, s);
            });
        };
    };
};
var monadStateWriterT = function (__dict_Monad_2) {
    return function (__dict_Monoid_3) {
        return function (__dict_MonadState_4) {
            return new MonadState(function (f) {
                return Control_Monad_Trans.lift(Control_Monad_Writer_Trans.monadTransWriterT(__dict_Monoid_3))(__dict_Monad_2)(state(__dict_MonadState_4)(f));
            });
        };
    };
};
var monadStateStateT1 = function (__dict_Monad_5) {
    return function (__dict_MonadState_6) {
        return new MonadState(function (f) {
            return Control_Monad_Trans.lift(Control_Monad_State_Trans.monadTransStateT)(__dict_Monad_5)(state(__dict_MonadState_6)(f));
        });
    };
};
var monadStateStateT = function (__dict_Monad_7) {
    return new MonadState(function (f) {
        return Control_Monad_State_Trans.StateT(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["return"](__dict_Monad_7))(f));
    });
};
var monadStateReaderT = function (__dict_Monad_8) {
    return function (__dict_MonadState_9) {
        return new MonadState(function (f) {
            return Control_Monad_Trans.lift(Control_Monad_Reader_Trans.monadTransReaderT)(__dict_Monad_8)(state(__dict_MonadState_9)(f));
        });
    };
};
var monadStateRWST = function (__dict_Monad_10) {
    return function (__dict_Monoid_11) {
        return new MonadState(Control_Monad_RWS.state(__dict_Monad_10["__superclass_Prelude.Applicative_0"]())(__dict_Monoid_11));
    };
};
var monadStateMaybeT = function (__dict_Monad_12) {
    return function (__dict_MonadState_13) {
        return new MonadState(function (f) {
            return Control_Monad_Trans.lift(Control_Monad_Maybe_Trans.monadTransMaybeT)(__dict_Monad_12)(state(__dict_MonadState_13)(f));
        });
    };
};
var monadStateErrorT = function (__dict_Monad_14) {
    return function (__dict_MonadState_15) {
        return new MonadState(function (f) {
            return Control_Monad_Trans.lift(Control_Monad_Error_Trans.monadTransErrorT)(__dict_Monad_14)(state(__dict_MonadState_15)(f));
        });
    };
};
var modify = function (__dict_Monad_16) {
    return function (__dict_MonadState_17) {
        return function (f) {
            return state(__dict_MonadState_17)(function (s) {
                return new Data_Tuple.Tuple(Prelude.unit, f(s));
            });
        };
    };
};
var gets = function (__dict_Monad_18) {
    return function (__dict_MonadState_19) {
        return function (f) {
            return state(__dict_MonadState_19)(function (s) {
                return new Data_Tuple.Tuple(f(s), s);
            });
        };
    };
};
var get = function (__dict_Monad_20) {
    return function (__dict_MonadState_21) {
        return state(__dict_MonadState_21)(function (s) {
            return new Data_Tuple.Tuple(s, s);
        });
    };
};
module.exports = {
    MonadState: MonadState, 
    modify: modify, 
    put: put, 
    gets: gets, 
    get: get, 
    state: state, 
    monadStateStateT: monadStateStateT, 
    monadStateStateT1: monadStateStateT1, 
    monadStateErrorT: monadStateErrorT, 
    monadStateMaybeT: monadStateMaybeT, 
    monadStateReaderT: monadStateReaderT, 
    monadStateWriterT: monadStateWriterT, 
    monadStateRWST: monadStateRWST
};

},{"Control.Monad.Error":10,"Control.Monad.Error.Trans":9,"Control.Monad.Maybe.Trans":12,"Control.Monad.RWS":14,"Control.Monad.RWS.Trans":13,"Control.Monad.Reader.Trans":15,"Control.Monad.State.Trans":17,"Control.Monad.Trans":18,"Control.Monad.Writer.Trans":19,"Data.Monoid":38,"Data.Tuple":44,"Prelude":58}],17:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Tuple = require("Data.Tuple");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Control_Monad_Trans = require("Control.Monad.Trans");
var Control_MonadPlus = require("Control.MonadPlus");
var Control_Lazy = require("Control.Lazy");
var StateT = function (x) {
    return x;
};
var runStateT = function (_399) {
    return _399;
};
var withStateT = function (f) {
    return function (s) {
        return StateT(Prelude["<<<"](Prelude.semigroupoidArr)(runStateT(s))(f));
    };
};
var monadTransStateT = new Control_Monad_Trans.MonadTrans(function (__dict_Monad_2) {
    return function (m) {
        return function (s) {
            return Prelude[">>="](__dict_Monad_2["__superclass_Prelude.Bind_1"]())(m)(function (_23) {
                return Prelude["return"](__dict_Monad_2)(new Data_Tuple.Tuple(_23, s));
            });
        };
    };
});
var mapStateT = function (f) {
    return function (m) {
        return StateT(Prelude["<<<"](Prelude.semigroupoidArr)(f)(runStateT(m)));
    };
};
var liftPassState = function (__dict_Monad_5) {
    return function (pass) {
        return function (m) {
            return StateT(function (s) {
                return pass(Prelude[">>="](__dict_Monad_5["__superclass_Prelude.Bind_1"]())(runStateT(m)(s))(function (_25) {
                    return Prelude["return"](__dict_Monad_5)(new Data_Tuple.Tuple(new Data_Tuple.Tuple(_25.value0.value0, _25.value1), _25.value0.value1));
                }));
            });
        };
    };
};
var liftListenState = function (__dict_Monad_6) {
    return function (listen) {
        return function (m) {
            return StateT(function (s) {
                return Prelude[">>="](__dict_Monad_6["__superclass_Prelude.Bind_1"]())(listen(runStateT(m)(s)))(function (_24) {
                    return Prelude["return"](__dict_Monad_6)(new Data_Tuple.Tuple(new Data_Tuple.Tuple(_24.value0.value0, _24.value1), _24.value0.value1));
                });
            });
        };
    };
};
var liftCatchState = function ($$catch) {
    return function (m) {
        return function (h) {
            return StateT(function (s) {
                return $$catch(runStateT(m)(s))(function (e) {
                    return runStateT(h(e))(s);
                });
            });
        };
    };
};
var liftCallCCState$prime = function (callCC) {
    return function (f) {
        return StateT(function (s) {
            return callCC(function (c) {
                return runStateT(f(function (a) {
                    return StateT(function (s$prime) {
                        return c(new Data_Tuple.Tuple(a, s$prime));
                    });
                }))(s);
            });
        });
    };
};
var liftCallCCState = function (callCC) {
    return function (f) {
        return StateT(function (s) {
            return callCC(function (c) {
                return runStateT(f(function (a) {
                    return StateT(function (_398) {
                        return c(new Data_Tuple.Tuple(a, s));
                    });
                }))(s);
            });
        });
    };
};
var lazy1StateT = new Control_Lazy.Lazy1(function (f) {
    return StateT(function (s) {
        return runStateT(f(Prelude.unit))(s);
    });
});
var execStateT = function (__dict_Apply_8) {
    return function (m) {
        return function (s) {
            return Prelude["<$>"](__dict_Apply_8["__superclass_Prelude.Functor_0"]())(Data_Tuple.snd)(runStateT(m)(s));
        };
    };
};
var evalStateT = function (__dict_Apply_9) {
    return function (m) {
        return function (s) {
            return Prelude["<$>"](__dict_Apply_9["__superclass_Prelude.Functor_0"]())(Data_Tuple.fst)(runStateT(m)(s));
        };
    };
};
var monadStateT = function (__dict_Monad_3) {
    return new Prelude.Monad(function () {
        return applicativeStateT(__dict_Monad_3);
    }, function () {
        return bindStateT(__dict_Monad_3);
    });
};
var functorStateT = function (__dict_Monad_7) {
    return new Prelude.Functor(Prelude.liftM1(monadStateT(__dict_Monad_7)));
};
var bindStateT = function (__dict_Monad_10) {
    return new Prelude.Bind(function (_400) {
        return function (f) {
            return function (s) {
                return Prelude[">>="](__dict_Monad_10["__superclass_Prelude.Bind_1"]())(_400(s))(function (_22) {
                    return runStateT(f(_22.value0))(_22.value1);
                });
            };
        };
    }, function () {
        return applyStateT(__dict_Monad_10);
    });
};
var applyStateT = function (__dict_Monad_11) {
    return new Prelude.Apply(Prelude.ap(monadStateT(__dict_Monad_11)), function () {
        return functorStateT(__dict_Monad_11);
    });
};
var applicativeStateT = function (__dict_Monad_12) {
    return new Prelude.Applicative(function () {
        return applyStateT(__dict_Monad_12);
    }, function (a) {
        return StateT(function (s) {
            return Prelude["return"](__dict_Monad_12)(new Data_Tuple.Tuple(a, s));
        });
    });
};
var altStateT = function (__dict_Monad_15) {
    return function (__dict_Alt_16) {
        return new Control_Alt.Alt(function (x) {
            return function (y) {
                return StateT(function (s) {
                    return Control_Alt["<|>"](__dict_Alt_16)(runStateT(x)(s))(runStateT(y)(s));
                });
            };
        }, function () {
            return functorStateT(__dict_Monad_15);
        });
    };
};
var plusStateT = function (__dict_Monad_0) {
    return function (__dict_Plus_1) {
        return new Control_Plus.Plus(function () {
            return altStateT(__dict_Monad_0)(__dict_Plus_1["__superclass_Control.Alt.Alt_0"]());
        }, StateT(function (_397) {
            return Control_Plus.empty(__dict_Plus_1);
        }));
    };
};
var alternativeStateT = function (__dict_Monad_13) {
    return function (__dict_Alternative_14) {
        return new Control_Alternative.Alternative(function () {
            return plusStateT(__dict_Monad_13)(__dict_Alternative_14["__superclass_Control.Plus.Plus_1"]());
        }, function () {
            return applicativeStateT(__dict_Monad_13);
        });
    };
};
var monadPlusStateT = function (__dict_MonadPlus_4) {
    return new Control_MonadPlus.MonadPlus(function () {
        return alternativeStateT(__dict_MonadPlus_4["__superclass_Prelude.Monad_0"]())(__dict_MonadPlus_4["__superclass_Control.Alternative.Alternative_1"]());
    }, function () {
        return monadStateT(__dict_MonadPlus_4["__superclass_Prelude.Monad_0"]());
    });
};
module.exports = {
    StateT: StateT, 
    "liftCallCCState'": liftCallCCState$prime, 
    liftCallCCState: liftCallCCState, 
    liftPassState: liftPassState, 
    liftListenState: liftListenState, 
    liftCatchState: liftCatchState, 
    withStateT: withStateT, 
    mapStateT: mapStateT, 
    execStateT: execStateT, 
    evalStateT: evalStateT, 
    runStateT: runStateT, 
    functorStateT: functorStateT, 
    applyStateT: applyStateT, 
    applicativeStateT: applicativeStateT, 
    altStateT: altStateT, 
    plusStateT: plusStateT, 
    alternativeStateT: alternativeStateT, 
    bindStateT: bindStateT, 
    monadStateT: monadStateT, 
    monadPlusStateT: monadPlusStateT, 
    monadTransStateT: monadTransStateT, 
    lazy1StateT: lazy1StateT
};

},{"Control.Alt":1,"Control.Alternative":2,"Control.Lazy":6,"Control.Monad.Trans":18,"Control.MonadPlus":21,"Control.Plus":22,"Data.Tuple":44,"Prelude":58}],18:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var MonadTrans = function (lift) {
    this.lift = lift;
};
var lift = function (dict) {
    return dict.lift;
};
module.exports = {
    MonadTrans: MonadTrans, 
    lift: lift
};

},{"Prelude":58}],19:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Tuple = require("Data.Tuple");
var Data_Monoid = require("Data.Monoid");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Control_Monad_Trans = require("Control.Monad.Trans");
var Control_MonadPlus = require("Control.MonadPlus");
var WriterT = function (x) {
    return x;
};
var runWriterT = function (_402) {
    return _402;
};
var monadTransWriterT = function (__dict_Monoid_4) {
    return new Control_Monad_Trans.MonadTrans(function (__dict_Monad_5) {
        return function (m) {
            return WriterT(Prelude[">>="](__dict_Monad_5["__superclass_Prelude.Bind_1"]())(m)(function (_28) {
                return Prelude["return"](__dict_Monad_5)(new Data_Tuple.Tuple(_28, Data_Monoid.mempty(__dict_Monoid_4)));
            }));
        };
    });
};
var mapWriterT = function (f) {
    return function (m) {
        return WriterT(f(runWriterT(m)));
    };
};
var liftCatchWriter = function ($$catch) {
    return function (m) {
        return function (h) {
            return WriterT($$catch(runWriterT(m))(function (e) {
                return runWriterT(h(e));
            }));
        };
    };
};
var liftCallCCWriter = function (__dict_Monoid_8) {
    return function (callCC) {
        return function (f) {
            return WriterT(callCC(function (c) {
                return runWriterT(f(function (a) {
                    return WriterT(c(new Data_Tuple.Tuple(a, Data_Monoid.mempty(__dict_Monoid_8))));
                }));
            }));
        };
    };
};
var functorWriterT = function (__dict_Functor_9) {
    return new Prelude.Functor(function (f) {
        return mapWriterT(Prelude["<$>"](__dict_Functor_9)(function (_401) {
            return new Data_Tuple.Tuple(f(_401.value0), _401.value1);
        }));
    });
};
var execWriterT = function (__dict_Apply_10) {
    return function (m) {
        return Prelude["<$>"](__dict_Apply_10["__superclass_Prelude.Functor_0"]())(Data_Tuple.snd)(runWriterT(m));
    };
};
var applyWriterT = function (__dict_Monoid_13) {
    return function (__dict_Apply_14) {
        return new Prelude.Apply(function (f) {
            return function (v) {
                return WriterT((function () {
                    var k = function (_403) {
                        return function (_404) {
                            return new Data_Tuple.Tuple(_403.value0(_404.value0), Prelude["<>"](__dict_Monoid_13["__superclass_Prelude.Semigroup_0"]())(_403.value1)(_404.value1));
                        };
                    };
                    return Prelude["<*>"](__dict_Apply_14)(Prelude["<$>"](__dict_Apply_14["__superclass_Prelude.Functor_0"]())(k)(runWriterT(f)))(runWriterT(v));
                })());
            };
        }, function () {
            return functorWriterT(__dict_Apply_14["__superclass_Prelude.Functor_0"]());
        });
    };
};
var bindWriterT = function (__dict_Monoid_11) {
    return function (__dict_Monad_12) {
        return new Prelude.Bind(function (m) {
            return function (k) {
                return WriterT(Prelude[">>="](__dict_Monad_12["__superclass_Prelude.Bind_1"]())(runWriterT(m))(function (_27) {
                    return Prelude[">>="](__dict_Monad_12["__superclass_Prelude.Bind_1"]())(runWriterT(k(_27.value0)))(function (_26) {
                        return Prelude["return"](__dict_Monad_12)(new Data_Tuple.Tuple(_26.value0, Prelude["<>"](__dict_Monoid_11["__superclass_Prelude.Semigroup_0"]())(_27.value1)(_26.value1)));
                    });
                }));
            };
        }, function () {
            return applyWriterT(__dict_Monoid_11)((__dict_Monad_12["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]());
        });
    };
};
var applicativeWriterT = function (__dict_Monoid_15) {
    return function (__dict_Applicative_16) {
        return new Prelude.Applicative(function () {
            return applyWriterT(__dict_Monoid_15)(__dict_Applicative_16["__superclass_Prelude.Apply_0"]());
        }, function (a) {
            return WriterT(Prelude.pure(__dict_Applicative_16)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(__dict_Monoid_15))));
        });
    };
};
var monadWriterT = function (__dict_Monoid_2) {
    return function (__dict_Monad_3) {
        return new Prelude.Monad(function () {
            return applicativeWriterT(__dict_Monoid_2)(__dict_Monad_3["__superclass_Prelude.Applicative_0"]());
        }, function () {
            return bindWriterT(__dict_Monoid_2)(__dict_Monad_3);
        });
    };
};
var altWriterT = function (__dict_Monoid_19) {
    return function (__dict_Alt_20) {
        return new Control_Alt.Alt(function (m) {
            return function (n) {
                return WriterT(Control_Alt["<|>"](__dict_Alt_20)(runWriterT(m))(runWriterT(n)));
            };
        }, function () {
            return functorWriterT(__dict_Alt_20["__superclass_Prelude.Functor_0"]());
        });
    };
};
var plusWriterT = function (__dict_Monoid_0) {
    return function (__dict_Plus_1) {
        return new Control_Plus.Plus(function () {
            return altWriterT(__dict_Monoid_0)(__dict_Plus_1["__superclass_Control.Alt.Alt_0"]());
        }, Control_Plus.empty(__dict_Plus_1));
    };
};
var alternativeWriterT = function (__dict_Monoid_17) {
    return function (__dict_Alternative_18) {
        return new Control_Alternative.Alternative(function () {
            return plusWriterT(__dict_Monoid_17)(__dict_Alternative_18["__superclass_Control.Plus.Plus_1"]());
        }, function () {
            return applicativeWriterT(__dict_Monoid_17)(__dict_Alternative_18["__superclass_Prelude.Applicative_0"]());
        });
    };
};
var monadPlusWriterT = function (__dict_Monoid_6) {
    return function (__dict_MonadPlus_7) {
        return new Control_MonadPlus.MonadPlus(function () {
            return alternativeWriterT(__dict_Monoid_6)(__dict_MonadPlus_7["__superclass_Control.Alternative.Alternative_1"]());
        }, function () {
            return monadWriterT(__dict_Monoid_6)(__dict_MonadPlus_7["__superclass_Prelude.Monad_0"]());
        });
    };
};
module.exports = {
    WriterT: WriterT, 
    liftCallCCWriter: liftCallCCWriter, 
    liftCatchWriter: liftCatchWriter, 
    mapWriterT: mapWriterT, 
    execWriterT: execWriterT, 
    runWriterT: runWriterT, 
    functorWriterT: functorWriterT, 
    applyWriterT: applyWriterT, 
    applicativeWriterT: applicativeWriterT, 
    altWriterT: altWriterT, 
    plusWriterT: plusWriterT, 
    alternativeWriterT: alternativeWriterT, 
    bindWriterT: bindWriterT, 
    monadWriterT: monadWriterT, 
    monadPlusWriterT: monadPlusWriterT, 
    monadTransWriterT: monadTransWriterT
};

},{"Control.Alt":1,"Control.Alternative":2,"Control.Monad.Trans":18,"Control.MonadPlus":21,"Control.Plus":22,"Data.Monoid":38,"Data.Tuple":44,"Prelude":58}],20:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var when = function (__dict_Monad_0) {
    return function (_179) {
        return function (m) {
            if (_179) {
                return m;
            };
            if (!_179) {
                return Prelude["return"](__dict_Monad_0)(Prelude.unit);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var unless = function (__dict_Monad_1) {
    return function (_180) {
        return function (m) {
            if (!_180) {
                return m;
            };
            if (_180) {
                return Prelude["return"](__dict_Monad_1)(Prelude.unit);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var replicateM = function (__dict_Monad_2) {
    return function (_177) {
        return function (m) {
            if (_177 === 0) {
                return Prelude["return"](__dict_Monad_2)([  ]);
            };
            return Prelude[">>="](__dict_Monad_2["__superclass_Prelude.Bind_1"]())(m)(function (_6) {
                return Prelude[">>="](__dict_Monad_2["__superclass_Prelude.Bind_1"]())(replicateM(__dict_Monad_2)(_177 - 1)(m))(function (_5) {
                    return Prelude["return"](__dict_Monad_2)(Prelude[":"](_6)(_5));
                });
            });
        };
    };
};
var foldM = function (__dict_Monad_3) {
    return function (f) {
        return function (a) {
            return function (_178) {
                if (_178.length === 0) {
                    return Prelude["return"](__dict_Monad_3)(a);
                };
                if (_178.length >= 1) {
                    var _917 = _178.slice(1);
                    return Prelude[">>="](__dict_Monad_3["__superclass_Prelude.Bind_1"]())(f(a)(_178[0]))(function (a$prime) {
                        return foldM(__dict_Monad_3)(f)(a$prime)(_917);
                    });
                };
                throw new Error("Failed pattern match");
            };
        };
    };
};
var filterM = function (__dict_Monad_4) {
    return function (p) {
        return function (_181) {
            if (_181.length === 0) {
                return Prelude["return"](__dict_Monad_4)([  ]);
            };
            if (_181.length >= 1) {
                var _924 = _181.slice(1);
                return Prelude[">>="](__dict_Monad_4["__superclass_Prelude.Bind_1"]())(p(_181[0]))(function (_8) {
                    return Prelude[">>="](__dict_Monad_4["__superclass_Prelude.Bind_1"]())(filterM(__dict_Monad_4)(p)(_924))(function (_7) {
                        return Prelude["return"](__dict_Monad_4)((function () {
                            if (_8) {
                                return Prelude[":"](_181[0])(_7);
                            };
                            if (!_8) {
                                return _7;
                            };
                            throw new Error("Failed pattern match");
                        })());
                    });
                });
            };
            throw new Error("Failed pattern match");
        };
    };
};
module.exports = {
    filterM: filterM, 
    unless: unless, 
    when: when, 
    foldM: foldM, 
    replicateM: replicateM
};

},{"Prelude":58}],21:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var MonadPlus = function (__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Prelude$dotMonad_0) {
    this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
    this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
};
var guard = function (__dict_MonadPlus_0) {
    return function (_210) {
        if (_210) {
            return Prelude["return"](__dict_MonadPlus_0["__superclass_Prelude.Monad_0"]())(Prelude.unit);
        };
        if (!_210) {
            return Control_Plus.empty((__dict_MonadPlus_0["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
        };
        throw new Error("Failed pattern match");
    };
};
module.exports = {
    MonadPlus: MonadPlus, 
    guard: guard
};

},{"Control.Alternative":2,"Control.Plus":22,"Prelude":58}],22:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
    this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
    this.empty = empty;
};
var empty = function (dict) {
    return dict.empty;
};
module.exports = {
    Plus: Plus, 
    empty: empty
};

},{"Control.Alt":1,"Prelude":58}],23:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
var Prelude_Unsafe = require("Prelude.Unsafe");
function snoc(l) {  return function (e) {    var l1 = l.slice();    l1.push(e);     return l1;  };};
function length (xs) {  return xs.length;};
function findIndex (f) {  return function (arr) {    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
function findLastIndex (f) {  return function (arr) {    for (var i = arr.length - 1; i >= 0; i--) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
function append (l1) {  return function (l2) {    return l1.concat(l2);  };};
function concat (xss) {  var result = [];  for (var i = 0, l = xss.length; i < l; i++) {    result.push.apply(result, xss[i]);  }  return result;};
function reverse (l) {  return l.slice().reverse();};
function drop (n) {  return function (l) {    return l.slice(n);  };};
function slice (s) {  return function (e) {    return function (l) {      return l.slice(s, e);    };  };};
function insertAt (index) {  return function (a) {    return function (l) {      var l1 = l.slice();      l1.splice(index, 0, a);      return l1;    };   };};
function deleteAt (index) {  return function (n) {    return function (l) {      var l1 = l.slice();      l1.splice(index, n);      return l1;    };   };};
function updateAt (index) {  return function (a) {    return function (l) {      var i = ~~index;      if (i < 0 || i >= l.length) return l;      var l1 = l.slice();      l1[i] = a;      return l1;    };   };};
function concatMap (f) {  return function (arr) {    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      Array.prototype.push.apply(result, f(arr[i]));    }    return result;  };};
function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
function filter (f) {  return function (arr) {    var n = 0;    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        result[n++] = arr[i];      }    }    return result;  };};
function range (start) {  return function (end) {    var i = ~~start, e = ~~end;    var step = i > e ? -1 : 1;    var result = [i], n = 1;    while (i !== e) {      i += step;      result[n++] = i;    }    return result;  };};
function zipWith (f) {  return function (xs) {    return function (ys) {      var l = xs.length < ys.length ? xs.length : ys.length;      var result = new Array(l);      for (var i = 0; i < l; i++) {        result[i] = f(xs[i])(ys[i]);      }      return result;    };  };};
function sortJS (f) {  return function (l) {    return l.slice().sort(function (x, y) {      return f(x)(y);    });  };};

function replicate(nn) {
  return function(v) {
    var n = nn > 0? nn : 0;
    var r = new Array(n);
    for (var i = 0; i < n; i++)
      r[i] = v;
    return r;
   };
}
;
var $dot$dot = range;
var $bang$bang = function (xs) {
    return function (n) {
        var isInt = function (n_1) {
            return n_1 !== ~~n_1;
        };
        var _1061 = n < 0 || (n >= length(xs) || isInt(n));
        if (_1061) {
            return Data_Maybe.Nothing.value;
        };
        if (!_1061) {
            return new Data_Maybe.Just(xs[n]);
        };
        throw new Error("Failed pattern match");
    };
};
var take = function (n) {
    return slice(0)(n);
};
var tail = function (_243) {
    if (_243.length >= 1) {
        var _1064 = _243.slice(1);
        return new Data_Maybe.Just(_1064);
    };
    return Data_Maybe.Nothing.value;
};
var span = (function () {
    var go = function (__copy_acc) {
        return function (__copy_p) {
            return function (__copy__253) {
                var acc = __copy_acc;
                var p = __copy_p;
                var _253 = __copy__253;
                tco: while (true) {
                    if (_253.length >= 1) {
                        var _1069 = _253.slice(1);
                        if (p(_253[0])) {
                            var __tco_acc = Prelude[":"](_253[0])(acc);
                            var __tco_p = p;
                            acc = __tco_acc;
                            p = __tco_p;
                            _253 = _1069;
                            continue tco;
                        };
                    };
                    return {
                        init: reverse(acc), 
                        rest: _253
                    };
                };
            };
        };
    };
    return go([  ]);
})();
var takeWhile = function (p) {
    return function (xs) {
        return (span(p)(xs)).init;
    };
};
var sortBy = function (comp) {
    return function (xs) {
        var comp$prime = function (x) {
            return function (y) {
                var _1070 = comp(x)(y);
                if (_1070 instanceof Prelude.GT) {
                    return 1;
                };
                if (_1070 instanceof Prelude.EQ) {
                    return 0;
                };
                if (_1070 instanceof Prelude.LT) {
                    return -1;
                };
                throw new Error("Failed pattern match");
            };
        };
        return sortJS(comp$prime)(xs);
    };
};
var sort = function (__dict_Ord_0) {
    return function (xs) {
        return sortBy(Prelude.compare(__dict_Ord_0))(xs);
    };
};
var singleton = function (a) {
    return [ a ];
};
var semigroupArray = new Prelude.Semigroup(append);
var $$null = function (_245) {
    if (_245.length === 0) {
        return true;
    };
    return false;
};
var nubBy = function ($eq$eq) {
    return function (_249) {
        if (_249.length === 0) {
            return [  ];
        };
        if (_249.length >= 1) {
            var _1075 = _249.slice(1);
            return Prelude[":"](_249[0])(nubBy($eq$eq)(filter(function (y) {
                return !$eq$eq(_249[0])(y);
            })(_1075)));
        };
        throw new Error("Failed pattern match");
    };
};
var nub = function (__dict_Eq_1) {
    return nubBy(Prelude["=="](__dict_Eq_1));
};
var modifyAt = function (i) {
    return function (f) {
        return function (xs) {
            var _1076 = $bang$bang(xs)(i);
            if (_1076 instanceof Data_Maybe.Just) {
                return updateAt(i)(f(_1076.value0))(xs);
            };
            if (_1076 instanceof Data_Maybe.Nothing) {
                return xs;
            };
            throw new Error("Failed pattern match");
        };
    };
};
var mapMaybe = function (f) {
    return concatMap(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.maybe([  ])(singleton))(f));
};
var last = function (xs) {
    return $bang$bang(xs)(length(xs) - 1);
};
var intersectBy = function (eq) {
    return function (_247) {
        return function (_248) {
            if (_247.length === 0) {
                return [  ];
            };
            if (_248.length === 0) {
                return [  ];
            };
            var el = function (x) {
                return findIndex(eq(x))(_248) >= 0;
            };
            return filter(el)(_247);
        };
    };
};
var intersect = function (__dict_Eq_2) {
    return intersectBy(Prelude["=="](__dict_Eq_2));
};
var init = function (_244) {
    if (_244.length === 0) {
        return Data_Maybe.Nothing.value;
    };
    return new Data_Maybe.Just(slice(0)(length(_244) - 1)(_244));
};
var head = function (xs) {
    return $bang$bang(xs)(0);
};
var groupBy = (function () {
    var go = function (__copy_acc) {
        return function (__copy_op) {
            return function (__copy__252) {
                var acc = __copy_acc;
                var op = __copy_op;
                var _252 = __copy__252;
                tco: while (true) {
                    if (_252.length === 0) {
                        return reverse(acc);
                    };
                    if (_252.length >= 1) {
                        var _1086 = _252.slice(1);
                        var sp = span(op(_252[0]))(_1086);
                        var __tco_acc = Prelude[":"](Prelude[":"](_252[0])(sp.init))(acc);
                        var __tco_op = op;
                        acc = __tco_acc;
                        op = __tco_op;
                        _252 = sp.rest;
                        continue tco;
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    return go([  ]);
})();
var group = function (__dict_Eq_3) {
    return function (xs) {
        return groupBy(Prelude["=="](__dict_Eq_3))(xs);
    };
};
var group$prime = function (__dict_Ord_4) {
    return Prelude["<<<"](Prelude.semigroupoidArr)(group(__dict_Ord_4["__superclass_Prelude.Eq_0"]()))(sort(__dict_Ord_4));
};
var functorArray = new Prelude.Functor(map);
var elemLastIndex = function (__dict_Eq_5) {
    return function (x) {
        return findLastIndex(Prelude["=="](__dict_Eq_5)(x));
    };
};
var elemIndex = function (__dict_Eq_6) {
    return function (x) {
        return findIndex(Prelude["=="](__dict_Eq_6)(x));
    };
};
var dropWhile = function (p) {
    return function (xs) {
        return (span(p)(xs)).rest;
    };
};
var deleteBy = function (eq) {
    return function (x) {
        return function (_246) {
            if (_246.length === 0) {
                return [  ];
            };
            var _1090 = findIndex(eq(x))(_246);
            if (_1090 < 0) {
                return _246;
            };
            return deleteAt(_1090)(1)(_246);
        };
    };
};
var $$delete = function (__dict_Eq_7) {
    return deleteBy(Prelude["=="](__dict_Eq_7));
};
var $bslash$bslash = function (__dict_Eq_8) {
    return function (xs) {
        return function (ys) {
            var go = function (__copy__250) {
                return function (__copy__251) {
                    var _250 = __copy__250;
                    var _251 = __copy__251;
                    tco: while (true) {
                        if (_251.length === 0) {
                            return _250;
                        };
                        if (_250.length === 0) {
                            return [  ];
                        };
                        if (_251.length >= 1) {
                            var _1094 = _251.slice(1);
                            var __tco__250 = $$delete(__dict_Eq_8)(_251[0])(_250);
                            _250 = __tco__250;
                            _251 = _1094;
                            continue tco;
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
            return go(xs)(ys);
        };
    };
};
var catMaybes = concatMap(Data_Maybe.maybe([  ])(singleton));
var monadArray = new Prelude.Monad(function () {
    return applicativeArray;
}, function () {
    return bindArray;
});
var bindArray = new Prelude.Bind(Prelude.flip(concatMap), function () {
    return applyArray;
});
var applyArray = new Prelude.Apply(Prelude.ap(monadArray), function () {
    return functorArray;
});
var applicativeArray = new Prelude.Applicative(function () {
    return applyArray;
}, singleton);
var altArray = new Control_Alt.Alt(append, function () {
    return functorArray;
});
var plusArray = new Control_Plus.Plus(function () {
    return altArray;
}, [  ]);
var alternativeArray = new Control_Alternative.Alternative(function () {
    return plusArray;
}, function () {
    return applicativeArray;
});
var monadPlusArray = new Control_MonadPlus.MonadPlus(function () {
    return alternativeArray;
}, function () {
    return monadArray;
});
module.exports = {
    replicate: replicate, 
    takeWhile: takeWhile, 
    dropWhile: dropWhile, 
    span: span, 
    groupBy: groupBy, 
    "group'": group$prime, 
    group: group, 
    sortBy: sortBy, 
    sort: sort, 
    nubBy: nubBy, 
    nub: nub, 
    zipWith: zipWith, 
    range: range, 
    filter: filter, 
    concatMap: concatMap, 
    intersect: intersect, 
    intersectBy: intersectBy, 
    "\\\\": $bslash$bslash, 
    "delete": $$delete, 
    deleteBy: deleteBy, 
    modifyAt: modifyAt, 
    updateAt: updateAt, 
    deleteAt: deleteAt, 
    insertAt: insertAt, 
    take: take, 
    drop: drop, 
    reverse: reverse, 
    concat: concat, 
    append: append, 
    elemLastIndex: elemLastIndex, 
    elemIndex: elemIndex, 
    findLastIndex: findLastIndex, 
    findIndex: findIndex, 
    length: length, 
    catMaybes: catMaybes, 
    mapMaybe: mapMaybe, 
    map: map, 
    "null": $$null, 
    init: init, 
    tail: tail, 
    last: last, 
    head: head, 
    singleton: singleton, 
    snoc: snoc, 
    "..": $dot$dot, 
    "!!": $bang$bang, 
    functorArray: functorArray, 
    applyArray: applyArray, 
    applicativeArray: applicativeArray, 
    bindArray: bindArray, 
    monadArray: monadArray, 
    semigroupArray: semigroupArray, 
    altArray: altArray, 
    plusArray: plusArray, 
    alternativeArray: alternativeArray, 
    monadPlusArray: monadPlusArray
};

},{"Control.Alt":1,"Control.Alternative":2,"Control.MonadPlus":21,"Control.Plus":22,"Data.Maybe":32,"Prelude":58,"Prelude.Unsafe":57}],24:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");

    function toCharCode(c) {
      return c.charCodeAt(0);
    }
    ;

    function fromCharCode(c) {
      return String.fromCharCode(c);
    }
    ;
var Char = function (x) {
    return x;
};
var showChar = new Prelude.Show(function (_174) {
    return "Char " + Prelude.show(Prelude.showString)(_174);
});
var eqChar = new Prelude.Eq(function (a) {
    return function (b) {
        return !Prelude["=="](eqChar)(a)(b);
    };
}, function (_170) {
    return function (_171) {
        return _170 === _171;
    };
});
var ordChar = new Prelude.Ord(function () {
    return eqChar;
}, function (_172) {
    return function (_173) {
        return Prelude.compare(Prelude.ordString)(_172)(_173);
    };
});
var charString = function (_169) {
    return _169;
};
module.exports = {
    toCharCode: toCharCode, 
    fromCharCode: fromCharCode, 
    charString: charString, 
    eqChar: eqChar, 
    ordChar: ordChar, 
    showChar: showChar
};

},{"Prelude":58}],25:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Monoid = require("Data.Monoid");
var Data_Functor_Contravariant = require("Data.Functor.Contravariant");
var Data_Foldable = require("Data.Foldable");
var Data_Traversable = require("Data.Traversable");
var Const = function (x) {
    return x;
};
var showConst = function (__dict_Show_2) {
    return new Prelude.Show(function (_543) {
        return "Const (" + (Prelude.show(__dict_Show_2)(_543) + ")");
    });
};
var semigroupoidConst = new Prelude.Semigroupoid(function (_544) {
    return function (_545) {
        return _545;
    };
});
var semigroupConst = function (__dict_Semigroup_3) {
    return new Prelude.Semigroup(function (_546) {
        return function (_547) {
            return Prelude["<>"](__dict_Semigroup_3)(_546)(_547);
        };
    });
};
var monoidConst = function (__dict_Monoid_5) {
    return new Data_Monoid.Monoid(function () {
        return semigroupConst(__dict_Monoid_5["__superclass_Prelude.Semigroup_0"]());
    }, Data_Monoid.mempty(__dict_Monoid_5));
};
var getConst = function (_538) {
    return _538;
};
var functorConst = new Prelude.Functor(function (_548) {
    return function (_549) {
        return _549;
    };
});
var foldableConst = new Data_Foldable.Foldable(function (__dict_Monoid_6) {
    return function (_561) {
        return function (_562) {
            return Data_Monoid.mempty(__dict_Monoid_6);
        };
    };
}, function (_559) {
    return function (z) {
        return function (_560) {
            return z;
        };
    };
}, function (_557) {
    return function (z) {
        return function (_558) {
            return z;
        };
    };
});
var traversableConst = new Data_Traversable.Traversable(function () {
    return foldableConst;
}, function () {
    return functorConst;
}, function (__dict_Applicative_1) {
    return function (_565) {
        return Prelude.pure(__dict_Applicative_1)(_565);
    };
}, function (__dict_Applicative_0) {
    return function (_563) {
        return function (_564) {
            return Prelude.pure(__dict_Applicative_0)(_564);
        };
    };
});
var eqConst = function (__dict_Eq_7) {
    return new Prelude.Eq(function (c) {
        return function (c$prime) {
            return !Prelude["=="](eqConst(__dict_Eq_7))(c)(c$prime);
        };
    }, function (_539) {
        return function (_540) {
            return Prelude["=="](__dict_Eq_7)(_539)(_540);
        };
    });
};
var ordConst = function (__dict_Ord_4) {
    return new Prelude.Ord(function () {
        return eqConst(__dict_Ord_4["__superclass_Prelude.Eq_0"]());
    }, function (_541) {
        return function (_542) {
            return Prelude.compare(__dict_Ord_4)(_541)(_542);
        };
    });
};
var contravariantConst = new Data_Functor_Contravariant.Contravariant(function (_555) {
    return function (_556) {
        return _556;
    };
});
var applyConst = function (__dict_Semigroup_9) {
    return new Prelude.Apply(function (_550) {
        return function (_551) {
            return Prelude["<>"](__dict_Semigroup_9)(_550)(_551);
        };
    }, function () {
        return functorConst;
    });
};
var bindConst = function (__dict_Semigroup_8) {
    return new Prelude.Bind(function (_552) {
        return function (_553) {
            return _552;
        };
    }, function () {
        return applyConst(__dict_Semigroup_8);
    });
};
var applicativeConst = function (__dict_Monoid_10) {
    return new Prelude.Applicative(function () {
        return applyConst(__dict_Monoid_10["__superclass_Prelude.Semigroup_0"]());
    }, function (_554) {
        return Data_Monoid.mempty(__dict_Monoid_10);
    });
};
module.exports = {
    Const: Const, 
    getConst: getConst, 
    eqConst: eqConst, 
    ordConst: ordConst, 
    showConst: showConst, 
    semigroupoidConst: semigroupoidConst, 
    semigroupConst: semigroupConst, 
    monoidConst: monoidConst, 
    functorConst: functorConst, 
    applyConst: applyConst, 
    bindConst: bindConst, 
    applicativeConst: applicativeConst, 
    contravariantConst: contravariantConst, 
    foldableConst: foldableConst, 
    traversableConst: traversableConst
};

},{"Data.Foldable":28,"Data.Functor.Contravariant":30,"Data.Monoid":38,"Data.Traversable":43,"Prelude":58}],26:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Identity = require("Data.Identity");
var Distributive = function (__superclass_Prelude$dotFunctor_0, collect, distribute) {
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    this.collect = collect;
    this.distribute = distribute;
};
var distributiveIdentity = new Distributive(function () {
    return Data_Identity.functorIdentity;
}, function (__dict_Functor_1) {
    return function (a2Idb) {
        return function (ga) {
            return Prelude["<$>"](__dict_Functor_1)(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Identity.runIdentity)(a2Idb))(ga);
        };
    };
}, function (__dict_Functor_0) {
    return function (gIdb) {
        return Prelude["<$>"](__dict_Functor_0)(Data_Identity.runIdentity)(gIdb);
    };
});
var distribute = function (dict) {
    return dict.distribute;
};
var cotraverse = function (__dict_Distributive_2) {
    return function (__dict_Functor_3) {
        return function (ga2b) {
            return function (gfa) {
                return Prelude["<$>"](__dict_Distributive_2["__superclass_Prelude.Functor_0"]())(ga2b)(distribute(__dict_Distributive_2)(__dict_Functor_3)(gfa));
            };
        };
    };
};
var collect = function (dict) {
    return dict.collect;
};
module.exports = {
    Distributive: Distributive, 
    cotraverse: cotraverse, 
    collect: collect, 
    distribute: distribute, 
    distributiveIdentity: distributiveIdentity
};

},{"Data.Identity":31,"Prelude":58}],27:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Control_Extend = require("Control.Extend");
var Left = (function () {
    function Left(value0) {
        this.value0 = value0;
    };
    Left.create = function (value0) {
        return new Left(value0);
    };
    return Left;
})();
var Right = (function () {
    function Right(value0) {
        this.value0 = value0;
    };
    Right.create = function (value0) {
        return new Right(value0);
    };
    return Right;
})();
var showEither = function (__dict_Show_0) {
    return function (__dict_Show_1) {
        return new Prelude.Show(function (_218) {
            if (_218 instanceof Left) {
                return "Left (" + (Prelude.show(__dict_Show_0)(_218.value0) + ")");
            };
            if (_218 instanceof Right) {
                return "Right (" + (Prelude.show(__dict_Show_1)(_218.value0) + ")");
            };
            throw new Error("Failed pattern match");
        });
    };
};
var functorEither = new Prelude.Functor(function (f) {
    return function (_214) {
        if (_214 instanceof Left) {
            return new Left(_214.value0);
        };
        if (_214 instanceof Right) {
            return new Right(f(_214.value0));
        };
        throw new Error("Failed pattern match");
    };
});
var extendEither = new Control_Extend.Extend(function (f) {
    return function (_217) {
        if (_217 instanceof Left) {
            return new Left(_217.value0);
        };
        return new Right(f(_217));
    };
}, function () {
    return functorEither;
});
var eqEither = function (__dict_Eq_4) {
    return function (__dict_Eq_5) {
        return new Prelude.Eq(function (a) {
            return function (b) {
                return !Prelude["=="](eqEither(__dict_Eq_4)(__dict_Eq_5))(a)(b);
            };
        }, function (_219) {
            return function (_220) {
                if (_219 instanceof Left && _220 instanceof Left) {
                    return Prelude["=="](__dict_Eq_4)(_219.value0)(_220.value0);
                };
                if (_219 instanceof Right && _220 instanceof Right) {
                    return Prelude["=="](__dict_Eq_5)(_219.value0)(_220.value0);
                };
                return false;
            };
        });
    };
};
var ordEither = function (__dict_Ord_2) {
    return function (__dict_Ord_3) {
        return new Prelude.Ord(function () {
            return eqEither(__dict_Ord_2["__superclass_Prelude.Eq_0"]())(__dict_Ord_3["__superclass_Prelude.Eq_0"]());
        }, function (_221) {
            return function (_222) {
                if (_221 instanceof Left && _222 instanceof Left) {
                    return Prelude.compare(__dict_Ord_2)(_221.value0)(_222.value0);
                };
                if (_221 instanceof Right && _222 instanceof Right) {
                    return Prelude.compare(__dict_Ord_3)(_221.value0)(_222.value0);
                };
                if (_221 instanceof Left) {
                    return Prelude.LT.value;
                };
                if (_222 instanceof Left) {
                    return Prelude.GT.value;
                };
                throw new Error("Failed pattern match");
            };
        });
    };
};
var either = function (f) {
    return function (g) {
        return function (_213) {
            if (_213 instanceof Left) {
                return f(_213.value0);
            };
            if (_213 instanceof Right) {
                return g(_213.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var isLeft = either(Prelude["const"](true))(Prelude["const"](false));
var isRight = either(Prelude["const"](false))(Prelude["const"](true));
var applyEither = new Prelude.Apply(function (_215) {
    return function (r) {
        if (_215 instanceof Left) {
            return new Left(_215.value0);
        };
        if (_215 instanceof Right) {
            return Prelude["<$>"](functorEither)(_215.value0)(r);
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return functorEither;
});
var bindEither = new Prelude.Bind(either(function (e) {
    return function (_212) {
        return new Left(e);
    };
})(function (a) {
    return function (f) {
        return f(a);
    };
}), function () {
    return applyEither;
});
var applicativeEither = new Prelude.Applicative(function () {
    return applyEither;
}, Right.create);
var monadEither = new Prelude.Monad(function () {
    return applicativeEither;
}, function () {
    return bindEither;
});
var altEither = new Control_Alt.Alt(function (_216) {
    return function (r) {
        if (_216 instanceof Left) {
            return r;
        };
        return _216;
    };
}, function () {
    return functorEither;
});
module.exports = {
    Left: Left, 
    Right: Right, 
    isRight: isRight, 
    isLeft: isLeft, 
    either: either, 
    functorEither: functorEither, 
    applyEither: applyEither, 
    applicativeEither: applicativeEither, 
    altEither: altEither, 
    bindEither: bindEither, 
    monadEither: monadEither, 
    extendEither: extendEither, 
    showEither: showEither, 
    eqEither: eqEither, 
    ordEither: ordEither
};

},{"Control.Alt":1,"Control.Extend":5,"Prelude":58}],28:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Monoid = require("Data.Monoid");
var Control_Apply = require("Control.Apply");
var Data_Monoid_First = require("Data.Monoid.First");
var Data_Either = require("Data.Either");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid_Additive = require("Data.Monoid.Additive");
var Data_Monoid_Dual = require("Data.Monoid.Dual");
var Data_Monoid_Last = require("Data.Monoid.Last");
var Data_Monoid_Multiplicative = require("Data.Monoid.Multiplicative");
var Data_Tuple = require("Data.Tuple");

  function foldrArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = xs.length - 1; i >= 0; --i) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  }
  ;

  function foldlArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = 0, len = xs.length; i < len; ++i) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  }
  ;
var Foldable = function (foldMap, foldl, foldr) {
    this.foldMap = foldMap;
    this.foldl = foldl;
    this.foldr = foldr;
};
var foldr = function (dict) {
    return dict.foldr;
};
var traverse_ = function (__dict_Applicative_0) {
    return function (__dict_Foldable_1) {
        return function (f) {
            return foldr(__dict_Foldable_1)(Prelude["<<<"](Prelude.semigroupoidArr)(Control_Apply["*>"](__dict_Applicative_0["__superclass_Prelude.Apply_0"]()))(f))(Prelude.pure(__dict_Applicative_0)(Prelude.unit));
        };
    };
};
var for_ = function (__dict_Applicative_2) {
    return function (__dict_Foldable_3) {
        return Prelude.flip(traverse_(__dict_Applicative_2)(__dict_Foldable_3));
    };
};
var sequence_ = function (__dict_Applicative_4) {
    return function (__dict_Foldable_5) {
        return traverse_(__dict_Applicative_4)(__dict_Foldable_5)(Prelude.id(Prelude.categoryArr));
    };
};
var foldl = function (dict) {
    return dict.foldl;
};
var intercalate = function (__dict_Foldable_6) {
    return function (__dict_Monoid_7) {
        return function (sep) {
            return function (xs) {
                var go = function (_505) {
                    return function (x) {
                        if (_505.init) {
                            return {
                                init: false, 
                                acc: x
                            };
                        };
                        return {
                            init: false, 
                            acc: Prelude["<>"](__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]())(_505.acc)(Prelude["<>"](__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]())(sep)(x))
                        };
                    };
                };
                return (foldl(__dict_Foldable_6)(go)({
                    init: true, 
                    acc: Data_Monoid.mempty(__dict_Monoid_7)
                })(xs)).acc;
            };
        };
    };
};
var mconcat = function (__dict_Foldable_8) {
    return function (__dict_Monoid_9) {
        return foldl(__dict_Foldable_8)(Prelude["<>"](__dict_Monoid_9["__superclass_Prelude.Semigroup_0"]()))(Data_Monoid.mempty(__dict_Monoid_9));
    };
};
var or = function (__dict_Foldable_10) {
    return foldl(__dict_Foldable_10)(Prelude["||"](Prelude.boolLikeBoolean))(false);
};
var product = function (__dict_Foldable_11) {
    return foldl(__dict_Foldable_11)(Prelude["*"](Prelude.semiringNumber))(1);
};
var sum = function (__dict_Foldable_12) {
    return foldl(__dict_Foldable_12)(Prelude["+"](Prelude.semiringNumber))(0);
};
var foldableTuple = new Foldable(function (__dict_Monoid_13) {
    return function (f) {
        return function (_489) {
            return f(_489.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (_488) {
            return f(z)(_488.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (_487) {
            return f(_487.value1)(z);
        };
    };
});
var foldableMultiplicative = new Foldable(function (__dict_Monoid_14) {
    return function (f) {
        return function (_504) {
            return f(_504);
        };
    };
}, function (f) {
    return function (z) {
        return function (_503) {
            return f(z)(_503);
        };
    };
}, function (f) {
    return function (z) {
        return function (_502) {
            return f(_502)(z);
        };
    };
});
var foldableMaybe = new Foldable(function (__dict_Monoid_15) {
    return function (f) {
        return function (_486) {
            if (_486 instanceof Data_Maybe.Nothing) {
                return Data_Monoid.mempty(__dict_Monoid_15);
            };
            if (_486 instanceof Data_Maybe.Just) {
                return f(_486.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (f) {
    return function (z) {
        return function (_485) {
            if (_485 instanceof Data_Maybe.Nothing) {
                return z;
            };
            if (_485 instanceof Data_Maybe.Just) {
                return f(z)(_485.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (f) {
    return function (z) {
        return function (_484) {
            if (_484 instanceof Data_Maybe.Nothing) {
                return z;
            };
            if (_484 instanceof Data_Maybe.Just) {
                return f(_484.value0)(z);
            };
            throw new Error("Failed pattern match");
        };
    };
});
var foldableEither = new Foldable(function (__dict_Monoid_16) {
    return function (f) {
        return function (_483) {
            if (_483 instanceof Data_Either.Left) {
                return Data_Monoid.mempty(__dict_Monoid_16);
            };
            if (_483 instanceof Data_Either.Right) {
                return f(_483.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (f) {
    return function (z) {
        return function (_482) {
            if (_482 instanceof Data_Either.Left) {
                return z;
            };
            if (_482 instanceof Data_Either.Right) {
                return f(z)(_482.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (f) {
    return function (z) {
        return function (_481) {
            if (_481 instanceof Data_Either.Left) {
                return z;
            };
            if (_481 instanceof Data_Either.Right) {
                return f(_481.value0)(z);
            };
            throw new Error("Failed pattern match");
        };
    };
});
var foldableDual = new Foldable(function (__dict_Monoid_17) {
    return function (f) {
        return function (_495) {
            return f(_495);
        };
    };
}, function (f) {
    return function (z) {
        return function (_494) {
            return f(z)(_494);
        };
    };
}, function (f) {
    return function (z) {
        return function (_493) {
            return f(_493)(z);
        };
    };
});
var foldableArray = new Foldable(function (__dict_Monoid_18) {
    return function (f) {
        return function (xs) {
            return foldr(foldableArray)(function (x) {
                return function (acc) {
                    return Prelude["<>"](__dict_Monoid_18["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                };
            })(Data_Monoid.mempty(__dict_Monoid_18))(xs);
        };
    };
}, function (f) {
    return function (z) {
        return function (xs) {
            return foldlArray(f)(z)(xs);
        };
    };
}, function (f) {
    return function (z) {
        return function (xs) {
            return foldrArray(f)(z)(xs);
        };
    };
});
var foldableAdditive = new Foldable(function (__dict_Monoid_19) {
    return function (f) {
        return function (_492) {
            return f(_492);
        };
    };
}, function (f) {
    return function (z) {
        return function (_491) {
            return f(z)(_491);
        };
    };
}, function (f) {
    return function (z) {
        return function (_490) {
            return f(_490)(z);
        };
    };
});
var foldMap = function (dict) {
    return dict.foldMap;
};
var foldableFirst = new Foldable(function (__dict_Monoid_20) {
    return function (f) {
        return function (_498) {
            return foldMap(foldableMaybe)(__dict_Monoid_20)(f)(_498);
        };
    };
}, function (f) {
    return function (z) {
        return function (_497) {
            return foldl(foldableMaybe)(f)(z)(_497);
        };
    };
}, function (f) {
    return function (z) {
        return function (_496) {
            return foldr(foldableMaybe)(f)(z)(_496);
        };
    };
});
var foldableLast = new Foldable(function (__dict_Monoid_21) {
    return function (f) {
        return function (_501) {
            return foldMap(foldableMaybe)(__dict_Monoid_21)(f)(_501);
        };
    };
}, function (f) {
    return function (z) {
        return function (_500) {
            return foldl(foldableMaybe)(f)(z)(_500);
        };
    };
}, function (f) {
    return function (z) {
        return function (_499) {
            return foldr(foldableMaybe)(f)(z)(_499);
        };
    };
});
var lookup = function (__dict_Eq_22) {
    return function (__dict_Foldable_23) {
        return function (a) {
            return function (f) {
                return Data_Monoid_First.runFirst(foldMap(__dict_Foldable_23)(Data_Monoid_First.monoidFirst)(function (_480) {
                    var _1759 = Prelude["=="](__dict_Eq_22)(a)(_480.value0);
                    if (_1759) {
                        return new Data_Maybe.Just(_480.value1);
                    };
                    if (!_1759) {
                        return Data_Maybe.Nothing.value;
                    };
                    throw new Error("Failed pattern match");
                })(f));
            };
        };
    };
};
var fold = function (__dict_Foldable_24) {
    return function (__dict_Monoid_25) {
        return foldMap(__dict_Foldable_24)(__dict_Monoid_25)(Prelude.id(Prelude.categoryArr));
    };
};
var find = function (__dict_Foldable_26) {
    return function (p) {
        return function (f) {
            var _1763 = foldMap(__dict_Foldable_26)(Data_Monoid.monoidArray)(function (x) {
                var _1762 = p(x);
                if (_1762) {
                    return [ x ];
                };
                if (!_1762) {
                    return [  ];
                };
                throw new Error("Failed pattern match");
            })(f);
            if (_1763.length >= 1) {
                var _1765 = _1763.slice(1);
                return new Data_Maybe.Just(_1763[0]);
            };
            if (_1763.length === 0) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    };
};
var any = function (__dict_Foldable_27) {
    return function (p) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(or(foldableArray))(foldMap(__dict_Foldable_27)(Data_Monoid.monoidArray)(function (x) {
            return [ p(x) ];
        }));
    };
};
var elem = function (__dict_Eq_28) {
    return function (__dict_Foldable_29) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(any(__dict_Foldable_29))(Prelude["=="](__dict_Eq_28));
    };
};
var notElem = function (__dict_Eq_30) {
    return function (__dict_Foldable_31) {
        return function (x) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(Prelude.not(Prelude.boolLikeBoolean))(elem(__dict_Eq_30)(__dict_Foldable_31)(x));
        };
    };
};
var and = function (__dict_Foldable_32) {
    return foldl(__dict_Foldable_32)(Prelude["&&"](Prelude.boolLikeBoolean))(true);
};
var all = function (__dict_Foldable_33) {
    return function (p) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(and(foldableArray))(foldMap(__dict_Foldable_33)(Data_Monoid.monoidArray)(function (x) {
            return [ p(x) ];
        }));
    };
};
module.exports = {
    Foldable: Foldable, 
    foldlArray: foldlArray, 
    foldrArray: foldrArray, 
    lookup: lookup, 
    find: find, 
    notElem: notElem, 
    elem: elem, 
    product: product, 
    sum: sum, 
    all: all, 
    any: any, 
    or: or, 
    and: and, 
    intercalate: intercalate, 
    mconcat: mconcat, 
    sequence_: sequence_, 
    for_: for_, 
    traverse_: traverse_, 
    fold: fold, 
    foldMap: foldMap, 
    foldl: foldl, 
    foldr: foldr, 
    foldableArray: foldableArray, 
    foldableEither: foldableEither, 
    foldableMaybe: foldableMaybe, 
    foldableTuple: foldableTuple, 
    foldableAdditive: foldableAdditive, 
    foldableDual: foldableDual, 
    foldableFirst: foldableFirst, 
    foldableLast: foldableLast, 
    foldableMultiplicative: foldableMultiplicative
};

},{"Control.Apply":3,"Data.Either":27,"Data.Maybe":32,"Data.Monoid":38,"Data.Monoid.Additive":33,"Data.Monoid.Dual":34,"Data.Monoid.First":35,"Data.Monoid.Last":36,"Data.Monoid.Multiplicative":37,"Data.Tuple":44,"Prelude":58}],29:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");

    function mkFn0(fn) {
      return function() {
        return fn({});
      };
    }
    ;

    function mkFn1(fn) {
      return function(a) {
        return fn(a);
      };
    }
    ;

    function mkFn2(fn) {
      return function(a, b) {
        return fn(a)(b);
      };
    }
    ;

    function mkFn3(fn) {
      return function(a, b, c) {
        return fn(a)(b)(c);
      };
    }
    ;

    function mkFn4(fn) {
      return function(a, b, c, d) {
        return fn(a)(b)(c)(d);
      };
    }
    ;

    function mkFn5(fn) {
      return function(a, b, c, d, e) {
        return fn(a)(b)(c)(d)(e);
      };
    }
    ;

    function mkFn6(fn) {
      return function(a, b, c, d, e, f) {
        return fn(a)(b)(c)(d)(e)(f);
      };
    }
    ;

    function mkFn7(fn) {
      return function(a, b, c, d, e, f, g) {
        return fn(a)(b)(c)(d)(e)(f)(g);
      };
    }
    ;

    function mkFn8(fn) {
      return function(a, b, c, d, e, f, g, h) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h);
      };
    }
    ;

    function mkFn9(fn) {
      return function(a, b, c, d, e, f, g, h, i) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);
      };
    }
    ;

    function mkFn10(fn) {
      return function(a, b, c, d, e, f, g, h, i, j) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);
      };
    }
    ;

    function runFn0(fn) {
      return fn();
    }
    ;

    function runFn1(fn) {
      return function(a) {
        return fn(a);
      };
    }
    ;

    function runFn2(fn) {
      return function(a) {
        return function(b) {
          return fn(a, b);
        };
      };
    }
    ;

    function runFn3(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return fn(a, b, c);
          };
        };
      };
    }
    ;

    function runFn4(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return fn(a, b, c, d);
            };
          };
        };
      };
    }
    ;

    function runFn5(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return fn(a, b, c, d, e);
              };
            };
          };
        };
      };
    }
    ;

    function runFn6(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return fn(a, b, c, d, e, f);
                };
              };
            };
          };
        };
      };
    }
    ;

    function runFn7(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return fn(a, b, c, d, e, f, g);
                  };
                };
              };
            };
          };
        };
      };
    }
    ;

    function runFn8(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return fn(a, b, c, d, e, f, g, h);
                    };
                  };
                };
              };
            };
          };
        };
      };
    }
    ;

    function runFn9(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return function(i) {
                        return fn(a, b, c, d, e, f, g, h, i);
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    }
    ;

    function runFn10(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return function(i) {
                        return function(j) {
                          return fn(a, b, c, d, e, f, g, h, i, j);
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    }
    ;
var on = function (f) {
    return function (g) {
        return function (x) {
            return function (y) {
                return f(g(x))(g(y));
            };
        };
    };
};
module.exports = {
    runFn10: runFn10, 
    runFn9: runFn9, 
    runFn8: runFn8, 
    runFn7: runFn7, 
    runFn6: runFn6, 
    runFn5: runFn5, 
    runFn4: runFn4, 
    runFn3: runFn3, 
    runFn2: runFn2, 
    runFn1: runFn1, 
    runFn0: runFn0, 
    mkFn10: mkFn10, 
    mkFn9: mkFn9, 
    mkFn8: mkFn8, 
    mkFn7: mkFn7, 
    mkFn6: mkFn6, 
    mkFn5: mkFn5, 
    mkFn4: mkFn4, 
    mkFn3: mkFn3, 
    mkFn2: mkFn2, 
    mkFn1: mkFn1, 
    mkFn0: mkFn0, 
    on: on
};

},{"Prelude":58}],30:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Contravariant = function ($greater$dollar$less) {
    this[">$<"] = $greater$dollar$less;
};
var $greater$dollar$less = function (dict) {
    return dict[">$<"];
};
var $greater$hash$less = function (__dict_Contravariant_0) {
    return function (x) {
        return function (f) {
            return $greater$dollar$less(__dict_Contravariant_0)(f)(x);
        };
    };
};
module.exports = {
    Contravariant: Contravariant, 
    ">#<": $greater$hash$less, 
    ">$<": $greater$dollar$less
};

},{"Prelude":58}],31:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Foldable = require("Data.Foldable");
var Data_Traversable = require("Data.Traversable");
var Identity = function (x) {
    return x;
};
var showConst = function (__dict_Show_2) {
    return new Prelude.Show(function (_581) {
        return "Identity (" + (Prelude.show(__dict_Show_2)(_581) + ")");
    });
};
var runIdentity = function (_576) {
    return _576;
};
var functorIdentity = new Prelude.Functor(function (f) {
    return function (_582) {
        return f(_582);
    };
});
var foldableIdentity = new Data_Foldable.Foldable(function (__dict_Monoid_4) {
    return function (f) {
        return function (_588) {
            return f(_588);
        };
    };
}, function (f) {
    return function (z) {
        return function (_587) {
            return f(z)(_587);
        };
    };
}, function (f) {
    return function (z) {
        return function (_586) {
            return f(_586)(z);
        };
    };
});
var traversableIdentity = new Data_Traversable.Traversable(function () {
    return foldableIdentity;
}, function () {
    return functorIdentity;
}, function (__dict_Applicative_1) {
    return function (_590) {
        return Prelude["<$>"]((__dict_Applicative_1["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Identity)(_590);
    };
}, function (__dict_Applicative_0) {
    return function (f) {
        return function (_589) {
            return Prelude["<$>"]((__dict_Applicative_0["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Identity)(f(_589));
        };
    };
});
var extendIdentity = new Control_Extend.Extend(function (f) {
    return function (m) {
        return f(m);
    };
}, function () {
    return functorIdentity;
});
var eqIdentity = function (__dict_Eq_5) {
    return new Prelude.Eq(function (x) {
        return function (y) {
            return !Prelude["=="](eqIdentity(__dict_Eq_5))(x)(y);
        };
    }, function (_577) {
        return function (_578) {
            return Prelude["=="](__dict_Eq_5)(_577)(_578);
        };
    });
};
var ordIdentity = function (__dict_Ord_3) {
    return new Prelude.Ord(function () {
        return eqIdentity(__dict_Ord_3["__superclass_Prelude.Eq_0"]());
    }, function (_579) {
        return function (_580) {
            return Prelude.compare(__dict_Ord_3)(_579)(_580);
        };
    });
};
var comonadIdentity = new Control_Comonad.Comonad(function () {
    return extendIdentity;
}, function (_585) {
    return _585;
});
var applyIdentity = new Prelude.Apply(function (_583) {
    return function (_584) {
        return _583(_584);
    };
}, function () {
    return functorIdentity;
});
var bindIdentity = new Prelude.Bind(function (m) {
    return function (f) {
        return f(runIdentity(m));
    };
}, function () {
    return applyIdentity;
});
var applicativeIdentity = new Prelude.Applicative(function () {
    return applyIdentity;
}, Identity);
var monadIdentity = new Prelude.Monad(function () {
    return applicativeIdentity;
}, function () {
    return bindIdentity;
});
module.exports = {
    Identity: Identity, 
    runIdentity: runIdentity, 
    eqIdentity: eqIdentity, 
    ordIdentity: ordIdentity, 
    showConst: showConst, 
    functorIdentity: functorIdentity, 
    applyIdentity: applyIdentity, 
    applicativeIdentity: applicativeIdentity, 
    bindIdentity: bindIdentity, 
    monadIdentity: monadIdentity, 
    extendIdentity: extendIdentity, 
    comonadIdentity: comonadIdentity, 
    foldableIdentity: foldableIdentity, 
    traversableIdentity: traversableIdentity
};

},{"Control.Comonad":4,"Control.Extend":5,"Data.Foldable":28,"Data.Traversable":43,"Prelude":58}],32:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Control_Alternative = require("Control.Alternative");
var Control_Extend = require("Control.Extend");
var Control_MonadPlus = require("Control.MonadPlus");
var Control_Plus = require("Control.Plus");
var Nothing = (function () {
    function Nothing() {

    };
    Nothing.value = new Nothing();
    return Nothing;
})();
var Just = (function () {
    function Just(value0) {
        this.value0 = value0;
    };
    Just.create = function (value0) {
        return new Just(value0);
    };
    return Just;
})();
var showMaybe = function (__dict_Show_0) {
    return new Prelude.Show(function (_238) {
        if (_238 instanceof Just) {
            return "Just (" + (Prelude.show(__dict_Show_0)(_238.value0) + ")");
        };
        if (_238 instanceof Nothing) {
            return "Nothing";
        };
        throw new Error("Failed pattern match");
    });
};
var semigroupMaybe = function (__dict_Semigroup_1) {
    return new Prelude.Semigroup(function (_236) {
        return function (_237) {
            if (_236 instanceof Nothing) {
                return _237;
            };
            if (_237 instanceof Nothing) {
                return _236;
            };
            if (_236 instanceof Just && _237 instanceof Just) {
                return new Just(Prelude["<>"](__dict_Semigroup_1)(_236.value0)(_237.value0));
            };
            throw new Error("Failed pattern match");
        };
    });
};
var maybe = function (b) {
    return function (f) {
        return function (_230) {
            if (_230 instanceof Nothing) {
                return b;
            };
            if (_230 instanceof Just) {
                return f(_230.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var isNothing = maybe(true)(Prelude["const"](false));
var isJust = maybe(false)(Prelude["const"](true));
var functorMaybe = new Prelude.Functor(function (fn) {
    return function (_231) {
        if (_231 instanceof Just) {
            return new Just(fn(_231.value0));
        };
        return Nothing.value;
    };
});
var fromMaybe = function (a) {
    return maybe(a)(Prelude.id(Prelude.categoryArr));
};
var extendMaybe = new Control_Extend.Extend(function (f) {
    return function (_235) {
        if (_235 instanceof Nothing) {
            return Nothing.value;
        };
        return new Just(f(_235));
    };
}, function () {
    return functorMaybe;
});
var eqMaybe = function (__dict_Eq_3) {
    return new Prelude.Eq(function (a) {
        return function (b) {
            return !Prelude["=="](eqMaybe(__dict_Eq_3))(a)(b);
        };
    }, function (_239) {
        return function (_240) {
            if (_239 instanceof Nothing && _240 instanceof Nothing) {
                return true;
            };
            if (_239 instanceof Just && _240 instanceof Just) {
                return Prelude["=="](__dict_Eq_3)(_239.value0)(_240.value0);
            };
            return false;
        };
    });
};
var ordMaybe = function (__dict_Ord_2) {
    return new Prelude.Ord(function () {
        return eqMaybe(__dict_Ord_2["__superclass_Prelude.Eq_0"]());
    }, function (_241) {
        return function (_242) {
            if (_241 instanceof Just && _242 instanceof Just) {
                return Prelude.compare(__dict_Ord_2)(_241.value0)(_242.value0);
            };
            if (_241 instanceof Nothing && _242 instanceof Nothing) {
                return Prelude.EQ.value;
            };
            if (_241 instanceof Nothing) {
                return Prelude.LT.value;
            };
            if (_242 instanceof Nothing) {
                return Prelude.GT.value;
            };
            throw new Error("Failed pattern match");
        };
    });
};
var applyMaybe = new Prelude.Apply(function (_232) {
    return function (x) {
        if (_232 instanceof Just) {
            return Prelude["<$>"](functorMaybe)(_232.value0)(x);
        };
        if (_232 instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return functorMaybe;
});
var bindMaybe = new Prelude.Bind(function (_234) {
    return function (k) {
        if (_234 instanceof Just) {
            return k(_234.value0);
        };
        if (_234 instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return applyMaybe;
});
var applicativeMaybe = new Prelude.Applicative(function () {
    return applyMaybe;
}, Just.create);
var monadMaybe = new Prelude.Monad(function () {
    return applicativeMaybe;
}, function () {
    return bindMaybe;
});
var altMaybe = new Control_Alt.Alt(function (_233) {
    return function (r) {
        if (_233 instanceof Nothing) {
            return r;
        };
        return _233;
    };
}, function () {
    return functorMaybe;
});
var plusMaybe = new Control_Plus.Plus(function () {
    return altMaybe;
}, Nothing.value);
var alternativeMaybe = new Control_Alternative.Alternative(function () {
    return plusMaybe;
}, function () {
    return applicativeMaybe;
});
var monadPlusMaybe = new Control_MonadPlus.MonadPlus(function () {
    return alternativeMaybe;
}, function () {
    return monadMaybe;
});
module.exports = {
    Nothing: Nothing, 
    Just: Just, 
    isNothing: isNothing, 
    isJust: isJust, 
    fromMaybe: fromMaybe, 
    maybe: maybe, 
    functorMaybe: functorMaybe, 
    applyMaybe: applyMaybe, 
    applicativeMaybe: applicativeMaybe, 
    altMaybe: altMaybe, 
    plusMaybe: plusMaybe, 
    alternativeMaybe: alternativeMaybe, 
    bindMaybe: bindMaybe, 
    monadMaybe: monadMaybe, 
    monadPlusMaybe: monadPlusMaybe, 
    extendMaybe: extendMaybe, 
    semigroupMaybe: semigroupMaybe, 
    showMaybe: showMaybe, 
    eqMaybe: eqMaybe, 
    ordMaybe: ordMaybe
};

},{"Control.Alt":1,"Control.Alternative":2,"Control.Extend":5,"Control.MonadPlus":21,"Control.Plus":22,"Prelude":58}],33:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Monoid = require("Data.Monoid");
var Additive = function (x) {
    return x;
};
var showAdditive = function (__dict_Show_0) {
    return new Prelude.Show(function (_284) {
        return "Additive (" + (Prelude.show(__dict_Show_0)(_284) + ")");
    });
};
var semigroupAdditive = function (__dict_Semiring_1) {
    return new Prelude.Semigroup(function (_285) {
        return function (_286) {
            return Prelude["+"](__dict_Semiring_1)(_285)(_286);
        };
    });
};
var runAdditive = function (_273) {
    return _273;
};
var monoidAdditive = function (__dict_Semiring_3) {
    return new Data_Monoid.Monoid(function () {
        return semigroupAdditive(__dict_Semiring_3);
    }, Prelude.zero(__dict_Semiring_3));
};
var functorAdditive = new Prelude.Functor(function (f) {
    return function (_280) {
        return f(_280);
    };
});
var extendAdditive = new Control_Extend.Extend(function (f) {
    return function (x) {
        return f(x);
    };
}, function () {
    return functorAdditive;
});
var eqAdditive = function (__dict_Eq_4) {
    return new Prelude.Eq(function (_276) {
        return function (_277) {
            return Prelude["/="](__dict_Eq_4)(_276)(_277);
        };
    }, function (_274) {
        return function (_275) {
            return Prelude["=="](__dict_Eq_4)(_274)(_275);
        };
    });
};
var ordAdditive = function (__dict_Ord_2) {
    return new Prelude.Ord(function () {
        return eqAdditive(__dict_Ord_2["__superclass_Prelude.Eq_0"]());
    }, function (_278) {
        return function (_279) {
            return Prelude.compare(__dict_Ord_2)(_278)(_279);
        };
    });
};
var comonadAdditive = new Control_Comonad.Comonad(function () {
    return extendAdditive;
}, runAdditive);
var applyAdditive = new Prelude.Apply(function (_281) {
    return function (_282) {
        return _281(_282);
    };
}, function () {
    return functorAdditive;
});
var bindAdditive = new Prelude.Bind(function (_283) {
    return function (f) {
        return f(_283);
    };
}, function () {
    return applyAdditive;
});
var applicativeAdditive = new Prelude.Applicative(function () {
    return applyAdditive;
}, Additive);
var monadAdditive = new Prelude.Monad(function () {
    return applicativeAdditive;
}, function () {
    return bindAdditive;
});
module.exports = {
    Additive: Additive, 
    runAdditive: runAdditive, 
    eqAdditive: eqAdditive, 
    ordAdditive: ordAdditive, 
    functorAdditive: functorAdditive, 
    applyAdditive: applyAdditive, 
    applicativeAdditive: applicativeAdditive, 
    bindAdditive: bindAdditive, 
    monadAdditive: monadAdditive, 
    extendAdditive: extendAdditive, 
    comonadAdditive: comonadAdditive, 
    showAdditive: showAdditive, 
    semigroupAdditive: semigroupAdditive, 
    monoidAdditive: monoidAdditive
};

},{"Control.Comonad":4,"Control.Extend":5,"Data.Monoid":38,"Prelude":58}],34:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Monoid = require("Data.Monoid");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Dual = function (x) {
    return x;
};
var showDual = function (__dict_Show_0) {
    return new Prelude.Show(function (_318) {
        return "Dual (" + (Prelude.show(__dict_Show_0)(_318) + ")");
    });
};
var semigroupDual = function (__dict_Semigroup_1) {
    return new Prelude.Semigroup(function (_319) {
        return function (_320) {
            return Prelude["<>"](__dict_Semigroup_1)(_320)(_319);
        };
    });
};
var runDual = function (_307) {
    return _307;
};
var monoidDual = function (__dict_Monoid_3) {
    return new Data_Monoid.Monoid(function () {
        return semigroupDual(__dict_Monoid_3["__superclass_Prelude.Semigroup_0"]());
    }, Data_Monoid.mempty(__dict_Monoid_3));
};
var functorDual = new Prelude.Functor(function (f) {
    return function (_314) {
        return f(_314);
    };
});
var extendDual = new Control_Extend.Extend(function (f) {
    return function (x) {
        return f(x);
    };
}, function () {
    return functorDual;
});
var eqDual = function (__dict_Eq_4) {
    return new Prelude.Eq(function (_310) {
        return function (_311) {
            return Prelude["/="](__dict_Eq_4)(_310)(_311);
        };
    }, function (_308) {
        return function (_309) {
            return Prelude["=="](__dict_Eq_4)(_308)(_309);
        };
    });
};
var ordDual = function (__dict_Ord_2) {
    return new Prelude.Ord(function () {
        return eqDual(__dict_Ord_2["__superclass_Prelude.Eq_0"]());
    }, function (_312) {
        return function (_313) {
            return Prelude.compare(__dict_Ord_2)(_312)(_313);
        };
    });
};
var comonadDual = new Control_Comonad.Comonad(function () {
    return extendDual;
}, runDual);
var applyDual = new Prelude.Apply(function (_315) {
    return function (_316) {
        return _315(_316);
    };
}, function () {
    return functorDual;
});
var bindDual = new Prelude.Bind(function (_317) {
    return function (f) {
        return f(_317);
    };
}, function () {
    return applyDual;
});
var applicativeDual = new Prelude.Applicative(function () {
    return applyDual;
}, Dual);
var monadDual = new Prelude.Monad(function () {
    return applicativeDual;
}, function () {
    return bindDual;
});
module.exports = {
    Dual: Dual, 
    runDual: runDual, 
    eqDual: eqDual, 
    ordDual: ordDual, 
    functorDual: functorDual, 
    applyDual: applyDual, 
    applicativeDual: applicativeDual, 
    bindDual: bindDual, 
    monadDual: monadDual, 
    extendDual: extendDual, 
    comonadDual: comonadDual, 
    showDual: showDual, 
    semigroupDual: semigroupDual, 
    monoidDual: monoidDual
};

},{"Control.Comonad":4,"Control.Extend":5,"Data.Monoid":38,"Prelude":58}],35:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Extend = require("Control.Extend");
var Control_Comonad = require("Control.Comonad");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var First = function (x) {
    return x;
};
var showFirst = function (__dict_Show_0) {
    return new Prelude.Show(function (_465) {
        return "First (" + (Prelude.show(Data_Maybe.showMaybe(__dict_Show_0))(_465) + ")");
    });
};
var semigroupFirst = new Prelude.Semigroup(function (_466) {
    return function (second) {
        if (_466 instanceof Data_Maybe.Just) {
            return _466;
        };
        return second;
    };
});
var runFirst = function (_454) {
    return _454;
};
var monoidFirst = new Data_Monoid.Monoid(function () {
    return semigroupFirst;
}, Data_Maybe.Nothing.value);
var functorFirst = new Prelude.Functor(function (f) {
    return function (_461) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(f)(_461);
    };
});
var extendFirst = new Control_Extend.Extend(function (f) {
    return function (x) {
        return Control_Extend["<<="](extendFirst)(f)(x);
    };
}, function () {
    return functorFirst;
});
var eqFirst = function (__dict_Eq_2) {
    return new Prelude.Eq(function (_457) {
        return function (_458) {
            return Prelude["/="](Data_Maybe.eqMaybe(__dict_Eq_2))(_457)(_458);
        };
    }, function (_455) {
        return function (_456) {
            return Prelude["=="](Data_Maybe.eqMaybe(__dict_Eq_2))(_455)(_456);
        };
    });
};
var ordFirst = function (__dict_Ord_1) {
    return new Prelude.Ord(function () {
        return eqFirst(__dict_Ord_1["__superclass_Prelude.Eq_0"]());
    }, function (_459) {
        return function (_460) {
            return Prelude.compare(Data_Maybe.ordMaybe(__dict_Ord_1))(_459)(_460);
        };
    });
};
var applyFirst = new Prelude.Apply(function (_462) {
    return function (_463) {
        return Prelude["<*>"](Data_Maybe.applyMaybe)(_462)(_463);
    };
}, function () {
    return functorFirst;
});
var bindFirst = new Prelude.Bind(function (_464) {
    return function (f) {
        return Prelude[">>="](Data_Maybe.bindMaybe)(_464)(Prelude["<<<"](Prelude.semigroupoidArr)(runFirst)(f));
    };
}, function () {
    return applyFirst;
});
var applicativeFirst = new Prelude.Applicative(function () {
    return applyFirst;
}, Prelude["<<<"](Prelude.semigroupoidArr)(First)(Prelude.pure(Data_Maybe.applicativeMaybe)));
var monadFirst = new Prelude.Monad(function () {
    return applicativeFirst;
}, function () {
    return bindFirst;
});
module.exports = {
    First: First, 
    runFirst: runFirst, 
    eqFirst: eqFirst, 
    ordFirst: ordFirst, 
    functorFirst: functorFirst, 
    applyFirst: applyFirst, 
    applicativeFirst: applicativeFirst, 
    bindFirst: bindFirst, 
    monadFirst: monadFirst, 
    extendFirst: extendFirst, 
    showFirst: showFirst, 
    semigroupFirst: semigroupFirst, 
    monoidFirst: monoidFirst
};

},{"Control.Comonad":4,"Control.Extend":5,"Data.Maybe":32,"Data.Monoid":38,"Prelude":58}],36:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Extend = require("Control.Extend");
var Control_Comonad = require("Control.Comonad");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var Last = function (x) {
    return x;
};
var showLast = function (__dict_Show_0) {
    return new Prelude.Show(function (_478) {
        return "Last (" + (Prelude.show(Data_Maybe.showMaybe(__dict_Show_0))(_478) + ")");
    });
};
var semigroupLast = new Prelude.Semigroup(function (last) {
    return function (_479) {
        if (_479 instanceof Data_Maybe.Just) {
            return _479;
        };
        if (_479 instanceof Data_Maybe.Nothing) {
            return last;
        };
        throw new Error("Failed pattern match");
    };
});
var runLast = function (_467) {
    return _467;
};
var monoidLast = new Data_Monoid.Monoid(function () {
    return semigroupLast;
}, Data_Maybe.Nothing.value);
var functorLast = new Prelude.Functor(function (f) {
    return function (_474) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(f)(_474);
    };
});
var extendLast = new Control_Extend.Extend(function (f) {
    return function (x) {
        return Control_Extend["<<="](extendLast)(f)(x);
    };
}, function () {
    return functorLast;
});
var eqLast = function (__dict_Eq_2) {
    return new Prelude.Eq(function (_470) {
        return function (_471) {
            return Prelude["/="](Data_Maybe.eqMaybe(__dict_Eq_2))(_470)(_471);
        };
    }, function (_468) {
        return function (_469) {
            return Prelude["=="](Data_Maybe.eqMaybe(__dict_Eq_2))(_468)(_469);
        };
    });
};
var ordLast = function (__dict_Ord_1) {
    return new Prelude.Ord(function () {
        return eqLast(__dict_Ord_1["__superclass_Prelude.Eq_0"]());
    }, function (_472) {
        return function (_473) {
            return Prelude.compare(Data_Maybe.ordMaybe(__dict_Ord_1))(_472)(_473);
        };
    });
};
var applyLast = new Prelude.Apply(function (_475) {
    return function (_476) {
        return Prelude["<*>"](Data_Maybe.applyMaybe)(_475)(_476);
    };
}, function () {
    return functorLast;
});
var bindLast = new Prelude.Bind(function (_477) {
    return function (f) {
        return Prelude[">>="](Data_Maybe.bindMaybe)(_477)(Prelude["<<<"](Prelude.semigroupoidArr)(runLast)(f));
    };
}, function () {
    return applyLast;
});
var applicativeLast = new Prelude.Applicative(function () {
    return applyLast;
}, Prelude["<<<"](Prelude.semigroupoidArr)(Last)(Prelude.pure(Data_Maybe.applicativeMaybe)));
var monadLast = new Prelude.Monad(function () {
    return applicativeLast;
}, function () {
    return bindLast;
});
module.exports = {
    Last: Last, 
    runLast: runLast, 
    eqLast: eqLast, 
    ordLast: ordLast, 
    functorLast: functorLast, 
    applyLast: applyLast, 
    applicativeLast: applicativeLast, 
    bindLast: bindLast, 
    monadLast: monadLast, 
    extendLast: extendLast, 
    showLast: showLast, 
    semigroupLast: semigroupLast, 
    monoidLast: monoidLast
};

},{"Control.Comonad":4,"Control.Extend":5,"Data.Maybe":32,"Data.Monoid":38,"Prelude":58}],37:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Monoid = require("Data.Monoid");
var Multiplicative = function (x) {
    return x;
};
var showMultiplicative = function (__dict_Show_0) {
    return new Prelude.Show(function (_335) {
        return "Multiplicative (" + (Prelude.show(__dict_Show_0)(_335) + ")");
    });
};
var semigroupMultiplicative = function (__dict_Semiring_1) {
    return new Prelude.Semigroup(function (_336) {
        return function (_337) {
            return Prelude["*"](__dict_Semiring_1)(_336)(_337);
        };
    });
};
var runMultiplicative = function (_324) {
    return _324;
};
var monoidMultiplicative = function (__dict_Semiring_3) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMultiplicative(__dict_Semiring_3);
    }, Prelude.one(__dict_Semiring_3));
};
var functorMultiplicative = new Prelude.Functor(function (f) {
    return function (_331) {
        return f(_331);
    };
});
var extendAdditive = new Control_Extend.Extend(function (f) {
    return function (x) {
        return f(x);
    };
}, function () {
    return functorMultiplicative;
});
var eqMultiplicative = function (__dict_Eq_4) {
    return new Prelude.Eq(function (_327) {
        return function (_328) {
            return Prelude["/="](__dict_Eq_4)(_327)(_328);
        };
    }, function (_325) {
        return function (_326) {
            return Prelude["=="](__dict_Eq_4)(_325)(_326);
        };
    });
};
var ordMultiplicative = function (__dict_Ord_2) {
    return new Prelude.Ord(function () {
        return eqMultiplicative(__dict_Ord_2["__superclass_Prelude.Eq_0"]());
    }, function (_329) {
        return function (_330) {
            return Prelude.compare(__dict_Ord_2)(_329)(_330);
        };
    });
};
var comonadAdditive = new Control_Comonad.Comonad(function () {
    return extendAdditive;
}, runMultiplicative);
var applyMultiplicative = new Prelude.Apply(function (_332) {
    return function (_333) {
        return _332(_333);
    };
}, function () {
    return functorMultiplicative;
});
var bindMultiplicative = new Prelude.Bind(function (_334) {
    return function (f) {
        return f(_334);
    };
}, function () {
    return applyMultiplicative;
});
var applicativeMultiplicative = new Prelude.Applicative(function () {
    return applyMultiplicative;
}, Multiplicative);
var monadMultiplicative = new Prelude.Monad(function () {
    return applicativeMultiplicative;
}, function () {
    return bindMultiplicative;
});
module.exports = {
    Multiplicative: Multiplicative, 
    runMultiplicative: runMultiplicative, 
    eqMultiplicative: eqMultiplicative, 
    ordMultiplicative: ordMultiplicative, 
    functorMultiplicative: functorMultiplicative, 
    applyMultiplicative: applyMultiplicative, 
    applicativeMultiplicative: applicativeMultiplicative, 
    bindMultiplicative: bindMultiplicative, 
    monadMultiplicative: monadMultiplicative, 
    extendAdditive: extendAdditive, 
    comonadAdditive: comonadAdditive, 
    showMultiplicative: showMultiplicative, 
    semigroupMultiplicative: semigroupMultiplicative, 
    monoidMultiplicative: monoidMultiplicative
};

},{"Control.Comonad":4,"Control.Extend":5,"Data.Monoid":38,"Prelude":58}],38:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Array = require("Data.Array");
var Data_Maybe = require("Data.Maybe");
var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
    this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
    this.mempty = mempty;
};
var monoidUnit = new Monoid(function () {
    return Prelude.semigroupUnit;
}, Prelude.unit);
var monoidString = new Monoid(function () {
    return Prelude.semigroupString;
}, "");
var monoidMaybe = function (__dict_Semigroup_0) {
    return new Monoid(function () {
        return Data_Maybe.semigroupMaybe(__dict_Semigroup_0);
    }, Data_Maybe.Nothing.value);
};
var monoidArray = new Monoid(function () {
    return Data_Array.semigroupArray;
}, [  ]);
var mempty = function (dict) {
    return dict.mempty;
};
var monoidArr = function (__dict_Monoid_1) {
    return new Monoid(function () {
        return Prelude.semigroupArr(__dict_Monoid_1["__superclass_Prelude.Semigroup_0"]());
    }, Prelude["const"](mempty(__dict_Monoid_1)));
};
module.exports = {
    Monoid: Monoid, 
    mempty: mempty, 
    monoidString: monoidString, 
    monoidArray: monoidArray, 
    monoidUnit: monoidUnit, 
    monoidArr: monoidArr, 
    monoidMaybe: monoidMaybe
};

},{"Data.Array":23,"Data.Maybe":32,"Prelude":58}],39:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Profunctor = require("Data.Profunctor");
var Data_Either = require("Data.Either");
var Choice = function (__superclass_Data$dotProfunctor$dotProfunctor_0, left, right) {
    this["__superclass_Data.Profunctor.Profunctor_0"] = __superclass_Data$dotProfunctor$dotProfunctor_0;
    this.left = left;
    this.right = right;
};
var right = function (dict) {
    return dict.right;
};
var left = function (dict) {
    return dict.left;
};
var $plus$plus$plus = function (__dict_Category_0) {
    return function (__dict_Choice_1) {
        return function (l) {
            return function (r) {
                return Prelude[">>>"](__dict_Category_0["__superclass_Prelude.Semigroupoid_0"]())(left(__dict_Choice_1)(l))(right(__dict_Choice_1)(r));
            };
        };
    };
};
var $bar$bar$bar = function (__dict_Category_2) {
    return function (__dict_Choice_3) {
        return function (l) {
            return function (r) {
                var join = Data_Profunctor.dimap(__dict_Choice_3["__superclass_Data.Profunctor.Profunctor_0"]())(Data_Either.either(Prelude.id(Prelude.categoryArr))(Prelude.id(Prelude.categoryArr)))(Prelude.id(Prelude.categoryArr))(Prelude.id(__dict_Category_2));
                return Prelude[">>>"](__dict_Category_2["__superclass_Prelude.Semigroupoid_0"]())($plus$plus$plus(__dict_Category_2)(__dict_Choice_3)(l)(r))(join);
            };
        };
    };
};
var choiceArr = new Choice(function () {
    return Data_Profunctor.profunctorArr;
}, function (a2b) {
    return function (_225) {
        if (_225 instanceof Data_Either.Left) {
            return Data_Either.Left.create(a2b(_225.value0));
        };
        if (_225 instanceof Data_Either.Right) {
            return new Data_Either.Right(_225.value0);
        };
        throw new Error("Failed pattern match");
    };
}, Prelude["<$>"](Data_Either.functorEither));
module.exports = {
    Choice: Choice, 
    "|||": $bar$bar$bar, 
    "+++": $plus$plus$plus, 
    right: right, 
    left: left, 
    choiceArr: choiceArr
};

},{"Data.Either":27,"Data.Profunctor":40,"Prelude":58}],40:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Profunctor = function (dimap) {
    this.dimap = dimap;
};
var profunctorArr = new Profunctor(function (a2b) {
    return function (c2d) {
        return function (b2c) {
            return Prelude[">>>"](Prelude.semigroupoidArr)(a2b)(Prelude[">>>"](Prelude.semigroupoidArr)(b2c)(c2d));
        };
    };
});
var dimap = function (dict) {
    return dict.dimap;
};
var lmap = function (__dict_Profunctor_0) {
    return function (a2b) {
        return dimap(__dict_Profunctor_0)(a2b)(Prelude.id(Prelude.categoryArr));
    };
};
var rmap = function (__dict_Profunctor_1) {
    return function (b2c) {
        return dimap(__dict_Profunctor_1)(Prelude.id(Prelude.categoryArr))(b2c);
    };
};
var arr = function (__dict_Category_2) {
    return function (__dict_Profunctor_3) {
        return function (f) {
            return rmap(__dict_Profunctor_3)(f)(Prelude.id(__dict_Category_2));
        };
    };
};
module.exports = {
    Profunctor: Profunctor, 
    arr: arr, 
    rmap: rmap, 
    lmap: lmap, 
    dimap: dimap, 
    profunctorArr: profunctorArr
};

},{"Prelude":58}],41:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Char = require("Data.Char");

    function charCodeAt(i) {
      return function(s) {
        if (s.length <= i) {
          throw new Error("Data.String.Unsafe.charCodeAt: Invalid index.");
        };
        return s.charCodeAt(i);
      };
    }
    ;

    function charAt(i) {
      return function(s) {
        if (s.length <= i) {
          throw new Error("Data.String.Unsafe.charAt: Invalid index.");
        };
        return s.charAt(i);
      };
    }
    ;

    function $$char(s) {
      if (s.length != 1) {
        throw new Error("Data.String.Unsafe.char: Expected string of length 1.");
      };
      return s.charAt(0);
    }
    ;
module.exports = {
    charCodeAt: charCodeAt, 
    charAt: charAt, 
    "char": $$char
};

},{"Data.Char":24,"Prelude":58}],42:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Data_Function = require("Data.Function");
var Data_Char = require("Data.Char");
var Prelude = require("Prelude");
var Data_String_Unsafe = require("Data.String.Unsafe");
var Data_Maybe = require("Data.Maybe");

    function _charAt(i, s, Just, Nothing) {
      return i >= 0 && i < s.length ? Just(s.charAt(i)) : Nothing;
    }
    ;

    function _charCodeAt(i, s, Just, Nothing) {
      return i >= 0 && i < s.length ? Just(s.charCodeAt(i)) : Nothing;
    }
    ;

    function fromCharArray(a) {
      return a.join('');
    }
    ;

    function indexOf(x) {
      return function(s) {
        return s.indexOf(x);
      };
    }
    ;

    function indexOf$prime(x) {
      return function(startAt) {
        return function(s) {
          return s.indexOf(x, startAt);
        };
      };
    }
    ;

    function lastIndexOf(x) {
      return function(s) {
        return s.lastIndexOf(x);
      };
    }
    ;

    function lastIndexOf$prime(x) {
      return function(startAt) {
        return function(s) {
          return s.lastIndexOf(x, startAt);
        };
      };
    }
    ;

    function length(s) {
      return s.length;
    }
    ;

    function localeCompare(s1) {
      return function(s2) {
        return s1.localeCompare(s2);
      };
    }
    ;

    function replace(s1) {
      return function(s2) {
        return function(s3) {
          return s3.replace(s1, s2);
        };
      };
    }
    ;

    function take(n) {
      return function(s) {
        return s.substr(0, n);
      };
    }
    ;

    function drop(n) {
      return function(s) {
        return s.substr(n);
      };
    }
    ;

    function count(p){
      return function(s){
        var i;
        for(i = 0; i < s.length && p(s.charAt(i)); i++){};
        return i;
      };
    }
    ;

    function split(sep) {
      return function(s) {
        return s.split(sep);
      };
    }
    ;

    function toCharArray(s) {
      return s.split('');
    }
    ;

    function toLower(s) {
      return s.toLowerCase();
    }
    ;

    function toUpper(s) {
      return s.toUpperCase();
    }
    ;

    function trim(s) {
      return s.trim();
    }
    ;

    function joinWith(s) {
      return function(xs) {
        return xs.join(s);
      };
    }
    ;
var takeWhile = function (p) {
    return function (s) {
        return take(count(p)(s))(s);
    };
};
var $$null = function (s) {
    return length(s) === 0;
};
var uncons = function (s) {
    if ($$null(s)) {
        return Data_Maybe.Nothing.value;
    };
    return new Data_Maybe.Just({
        head: Data_String_Unsafe.charAt(0)(s), 
        tail: drop(1)(s)
    });
};
var fromChar = Data_Char.charString;
var singleton = fromChar;
var dropWhile = function (p) {
    return function (s) {
        return drop(count(p)(s))(s);
    };
};
var charCodeAt = function (n) {
    return function (s) {
        return _charCodeAt(n, s, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
    };
};
var charAt = function (n) {
    return function (s) {
        return _charAt(n, s, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
    };
};
module.exports = {
    joinWith: joinWith, 
    trim: trim, 
    toUpper: toUpper, 
    toLower: toLower, 
    toCharArray: toCharArray, 
    split: split, 
    dropWhile: dropWhile, 
    drop: drop, 
    takeWhile: takeWhile, 
    take: take, 
    count: count, 
    replace: replace, 
    localeCompare: localeCompare, 
    singleton: singleton, 
    length: length, 
    uncons: uncons, 
    "null": $$null, 
    "lastIndexOf'": lastIndexOf$prime, 
    lastIndexOf: lastIndexOf, 
    "indexOf'": indexOf$prime, 
    indexOf: indexOf, 
    fromChar: fromChar, 
    fromCharArray: fromCharArray, 
    charCodeAt: charCodeAt, 
    charAt: charAt
};

},{"Data.Char":24,"Data.Function":29,"Data.Maybe":32,"Data.String.Unsafe":41,"Prelude":58}],43:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Array = require("Data.Array");
var Data_Tuple = require("Data.Tuple");
var Data_Either = require("Data.Either");
var Data_Foldable = require("Data.Foldable");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid_Additive = require("Data.Monoid.Additive");
var Data_Monoid_Dual = require("Data.Monoid.Dual");
var Data_Monoid_First = require("Data.Monoid.First");
var Data_Monoid_Last = require("Data.Monoid.Last");
var Data_Monoid_Multiplicative = require("Data.Monoid.Multiplicative");
var StateR = function (x) {
    return x;
};
var StateL = function (x) {
    return x;
};
var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
    this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    this.sequence = sequence;
    this.traverse = traverse;
};
var traverse = function (dict) {
    return dict.traverse;
};
var traversableTuple = new Traversable(function () {
    return Data_Foldable.foldableTuple;
}, function () {
    return Data_Tuple.functorTuple;
}, function (__dict_Applicative_1) {
    return function (_527) {
        return Prelude["<$>"]((__dict_Applicative_1["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.Tuple.create(_527.value0))(_527.value1);
    };
}, function (__dict_Applicative_0) {
    return function (f) {
        return function (_526) {
            return Prelude["<$>"]((__dict_Applicative_0["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.Tuple.create(_526.value0))(f(_526.value1));
        };
    };
});
var traversableMultiplicative = new Traversable(function () {
    return Data_Foldable.foldableMultiplicative;
}, function () {
    return Data_Monoid_Multiplicative.functorMultiplicative;
}, function (__dict_Applicative_3) {
    return function (_537) {
        return Prelude["<$>"]((__dict_Applicative_3["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Multiplicative.Multiplicative)(_537);
    };
}, function (__dict_Applicative_2) {
    return function (f) {
        return function (_536) {
            return Prelude["<$>"]((__dict_Applicative_2["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Multiplicative.Multiplicative)(f(_536));
        };
    };
});
var traversableMaybe = new Traversable(function () {
    return Data_Foldable.foldableMaybe;
}, function () {
    return Data_Maybe.functorMaybe;
}, function (__dict_Applicative_5) {
    return function (_525) {
        if (_525 instanceof Data_Maybe.Nothing) {
            return Prelude.pure(__dict_Applicative_5)(Data_Maybe.Nothing.value);
        };
        if (_525 instanceof Data_Maybe.Just) {
            return Prelude["<$>"]((__dict_Applicative_5["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(_525.value0);
        };
        throw new Error("Failed pattern match");
    };
}, function (__dict_Applicative_4) {
    return function (f) {
        return function (_524) {
            if (_524 instanceof Data_Maybe.Nothing) {
                return Prelude.pure(__dict_Applicative_4)(Data_Maybe.Nothing.value);
            };
            if (_524 instanceof Data_Maybe.Just) {
                return Prelude["<$>"]((__dict_Applicative_4["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(f(_524.value0));
            };
            throw new Error("Failed pattern match");
        };
    };
});
var traversableEither = new Traversable(function () {
    return Data_Foldable.foldableEither;
}, function () {
    return Data_Either.functorEither;
}, function (__dict_Applicative_7) {
    return function (_523) {
        if (_523 instanceof Data_Either.Left) {
            return Prelude.pure(__dict_Applicative_7)(new Data_Either.Left(_523.value0));
        };
        if (_523 instanceof Data_Either.Right) {
            return Prelude["<$>"]((__dict_Applicative_7["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Right.create)(_523.value0);
        };
        throw new Error("Failed pattern match");
    };
}, function (__dict_Applicative_6) {
    return function (f) {
        return function (_522) {
            if (_522 instanceof Data_Either.Left) {
                return Prelude.pure(__dict_Applicative_6)(new Data_Either.Left(_522.value0));
            };
            if (_522 instanceof Data_Either.Right) {
                return Prelude["<$>"]((__dict_Applicative_6["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Right.create)(f(_522.value0));
            };
            throw new Error("Failed pattern match");
        };
    };
});
var traversableDual = new Traversable(function () {
    return Data_Foldable.foldableDual;
}, function () {
    return Data_Monoid_Dual.functorDual;
}, function (__dict_Applicative_9) {
    return function (_531) {
        return Prelude["<$>"]((__dict_Applicative_9["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Dual.Dual)(_531);
    };
}, function (__dict_Applicative_8) {
    return function (f) {
        return function (_530) {
            return Prelude["<$>"]((__dict_Applicative_8["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Dual.Dual)(f(_530));
        };
    };
});
var traversableAdditive = new Traversable(function () {
    return Data_Foldable.foldableAdditive;
}, function () {
    return Data_Monoid_Additive.functorAdditive;
}, function (__dict_Applicative_11) {
    return function (_529) {
        return Prelude["<$>"]((__dict_Applicative_11["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Additive.Additive)(_529);
    };
}, function (__dict_Applicative_10) {
    return function (f) {
        return function (_528) {
            return Prelude["<$>"]((__dict_Applicative_10["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Additive.Additive)(f(_528));
        };
    };
});
var stateR = function (_519) {
    return _519;
};
var stateL = function (_518) {
    return _518;
};
var sequence = function (dict) {
    return dict.sequence;
};
var traversableArray = new Traversable(function () {
    return Data_Foldable.foldableArray;
}, function () {
    return Data_Array.functorArray;
}, function (__dict_Applicative_13) {
    return function (_521) {
        if (_521.length === 0) {
            return Prelude.pure(__dict_Applicative_13)([  ]);
        };
        if (_521.length >= 1) {
            var _1846 = _521.slice(1);
            return Prelude["<*>"](__dict_Applicative_13["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_13["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_521[0]))(sequence(traversableArray)(__dict_Applicative_13)(_1846));
        };
        throw new Error("Failed pattern match");
    };
}, function (__dict_Applicative_12) {
    return function (f) {
        return function (_520) {
            if (_520.length === 0) {
                return Prelude.pure(__dict_Applicative_12)([  ]);
            };
            if (_520.length >= 1) {
                var _1850 = _520.slice(1);
                return Prelude["<*>"](__dict_Applicative_12["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_12["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(f(_520[0])))(traverse(traversableArray)(__dict_Applicative_12)(f)(_1850));
            };
            throw new Error("Failed pattern match");
        };
    };
});
var traversableFirst = new Traversable(function () {
    return Data_Foldable.foldableFirst;
}, function () {
    return Data_Monoid_First.functorFirst;
}, function (__dict_Applicative_15) {
    return function (_533) {
        return Prelude["<$>"]((__dict_Applicative_15["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_First.First)(sequence(traversableMaybe)(__dict_Applicative_15)(_533));
    };
}, function (__dict_Applicative_14) {
    return function (f) {
        return function (_532) {
            return Prelude["<$>"]((__dict_Applicative_14["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_First.First)(traverse(traversableMaybe)(__dict_Applicative_14)(f)(_532));
        };
    };
});
var traversableLast = new Traversable(function () {
    return Data_Foldable.foldableLast;
}, function () {
    return Data_Monoid_Last.functorLast;
}, function (__dict_Applicative_17) {
    return function (_535) {
        return Prelude["<$>"]((__dict_Applicative_17["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Last.Last)(sequence(traversableMaybe)(__dict_Applicative_17)(_535));
    };
}, function (__dict_Applicative_16) {
    return function (f) {
        return function (_534) {
            return Prelude["<$>"]((__dict_Applicative_16["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Last.Last)(traverse(traversableMaybe)(__dict_Applicative_16)(f)(_534));
        };
    };
});
var zipWithA = function (__dict_Applicative_18) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return sequence(traversableArray)(__dict_Applicative_18)(Data_Array.zipWith(f)(xs)(ys));
            };
        };
    };
};
var functorStateR = new Prelude.Functor(function (f) {
    return function (k) {
        return StateR(function (s) {
            var _1857 = stateR(k)(s);
            return new Data_Tuple.Tuple(_1857.value0, f(_1857.value1));
        });
    };
});
var functorStateL = new Prelude.Functor(function (f) {
    return function (k) {
        return StateL(function (s) {
            var _1860 = stateL(k)(s);
            return new Data_Tuple.Tuple(_1860.value0, f(_1860.value1));
        });
    };
});
var $$for = function (__dict_Applicative_23) {
    return function (__dict_Traversable_24) {
        return function (x) {
            return function (f) {
                return traverse(__dict_Traversable_24)(__dict_Applicative_23)(f)(x);
            };
        };
    };
};
var applyStateR = new Prelude.Apply(function (f) {
    return function (x) {
        return StateR(function (s) {
            var _1863 = stateR(x)(s);
            var _1864 = stateR(f)(_1863.value0);
            return new Data_Tuple.Tuple(_1864.value0, _1864.value1(_1863.value1));
        });
    };
}, function () {
    return functorStateR;
});
var applyStateL = new Prelude.Apply(function (f) {
    return function (x) {
        return StateL(function (s) {
            var _1869 = stateL(f)(s);
            var _1870 = stateL(x)(_1869.value0);
            return new Data_Tuple.Tuple(_1870.value0, _1869.value1(_1870.value1));
        });
    };
}, function () {
    return functorStateL;
});
var applicativeStateR = new Prelude.Applicative(function () {
    return applyStateR;
}, function (a) {
    return StateR(function (s) {
        return new Data_Tuple.Tuple(s, a);
    });
});
var mapAccumR = function (__dict_Traversable_19) {
    return function (f) {
        return function (s0) {
            return function (xs) {
                return stateR(traverse(__dict_Traversable_19)(applicativeStateR)(function (a) {
                    return StateR(function (s) {
                        return f(s)(a);
                    });
                })(xs))(s0);
            };
        };
    };
};
var scanr = function (__dict_Traversable_20) {
    return function (f) {
        return function (b0) {
            return function (xs) {
                return Data_Tuple.snd(mapAccumR(__dict_Traversable_20)(function (b) {
                    return function (a) {
                        var b$prime = f(a)(b);
                        return new Data_Tuple.Tuple(b$prime, b$prime);
                    };
                })(b0)(xs));
            };
        };
    };
};
var applicativeStateL = new Prelude.Applicative(function () {
    return applyStateL;
}, function (a) {
    return StateL(function (s) {
        return new Data_Tuple.Tuple(s, a);
    });
});
var mapAccumL = function (__dict_Traversable_21) {
    return function (f) {
        return function (s0) {
            return function (xs) {
                return stateL(traverse(__dict_Traversable_21)(applicativeStateL)(function (a) {
                    return StateL(function (s) {
                        return f(s)(a);
                    });
                })(xs))(s0);
            };
        };
    };
};
var scanl = function (__dict_Traversable_22) {
    return function (f) {
        return function (b0) {
            return function (xs) {
                return Data_Tuple.snd(mapAccumL(__dict_Traversable_22)(function (b) {
                    return function (a) {
                        var b$prime = f(b)(a);
                        return new Data_Tuple.Tuple(b$prime, b$prime);
                    };
                })(b0)(xs));
            };
        };
    };
};
module.exports = {
    Traversable: Traversable, 
    mapAccumR: mapAccumR, 
    mapAccumL: mapAccumL, 
    scanr: scanr, 
    scanl: scanl, 
    zipWithA: zipWithA, 
    "for": $$for, 
    sequence: sequence, 
    traverse: traverse, 
    traversableArray: traversableArray, 
    traversableEither: traversableEither, 
    traversableMaybe: traversableMaybe, 
    traversableTuple: traversableTuple, 
    traversableAdditive: traversableAdditive, 
    traversableDual: traversableDual, 
    traversableFirst: traversableFirst, 
    traversableLast: traversableLast, 
    traversableMultiplicative: traversableMultiplicative
};

},{"Data.Array":23,"Data.Either":27,"Data.Foldable":28,"Data.Maybe":32,"Data.Monoid.Additive":33,"Data.Monoid.Dual":34,"Data.Monoid.First":35,"Data.Monoid.Last":36,"Data.Monoid.Multiplicative":37,"Data.Tuple":44,"Prelude":58}],44:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Monoid = require("Data.Monoid");
var Control_Lazy = require("Control.Lazy");
var Data_Array = require("Data.Array");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Tuple = (function () {
    function Tuple(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Tuple.create = function (value0) {
        return function (value1) {
            return new Tuple(value0, value1);
        };
    };
    return Tuple;
})();
var zip = Data_Array.zipWith(Tuple.create);
var unzip = function (_347) {
    if (_347.length >= 1) {
        var _1208 = _347.slice(1);
        var _1202 = unzip(_1208);
        return new Tuple(Prelude[":"]((_347[0]).value0)(_1202.value0), Prelude[":"]((_347[0]).value1)(_1202.value1));
    };
    if (_347.length === 0) {
        return new Tuple([  ], [  ]);
    };
    throw new Error("Failed pattern match");
};
var uncurry = function (f) {
    return function (_346) {
        return f(_346.value0)(_346.value1);
    };
};
var swap = function (_348) {
    return new Tuple(_348.value1, _348.value0);
};
var snd = function (_345) {
    return _345.value1;
};
var showTuple = function (__dict_Show_0) {
    return function (__dict_Show_1) {
        return new Prelude.Show(function (_349) {
            return "Tuple (" + (Prelude.show(__dict_Show_0)(_349.value0) + (") (" + (Prelude.show(__dict_Show_1)(_349.value1) + ")")));
        });
    };
};
var semigroupoidTuple = new Prelude.Semigroupoid(function (_354) {
    return function (_355) {
        return new Tuple(_355.value0, _354.value1);
    };
});
var semigroupTuple = function (__dict_Semigroup_2) {
    return function (__dict_Semigroup_3) {
        return new Prelude.Semigroup(function (_356) {
            return function (_357) {
                return new Tuple(Prelude["<>"](__dict_Semigroup_2)(_356.value0)(_357.value0), Prelude["<>"](__dict_Semigroup_3)(_356.value1)(_357.value1));
            };
        });
    };
};
var monoidTuple = function (__dict_Monoid_6) {
    return function (__dict_Monoid_7) {
        return new Data_Monoid.Monoid(function () {
            return semigroupTuple(__dict_Monoid_6["__superclass_Prelude.Semigroup_0"]())(__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]());
        }, new Tuple(Data_Monoid.mempty(__dict_Monoid_6), Data_Monoid.mempty(__dict_Monoid_7)));
    };
};
var functorTuple = new Prelude.Functor(function (f) {
    return function (_358) {
        return new Tuple(_358.value0, f(_358.value1));
    };
});
var fst = function (_344) {
    return _344.value0;
};
var lazyLazy1Tuple = function (__dict_Lazy1_9) {
    return function (__dict_Lazy1_10) {
        return new Control_Lazy.Lazy(function (f) {
            return new Tuple(Control_Lazy.defer1(__dict_Lazy1_9)(function (_340) {
                return fst(f(Prelude.unit));
            }), Control_Lazy.defer1(__dict_Lazy1_10)(function (_341) {
                return snd(f(Prelude.unit));
            }));
        });
    };
};
var lazyLazy2Tuple = function (__dict_Lazy2_11) {
    return function (__dict_Lazy2_12) {
        return new Control_Lazy.Lazy(function (f) {
            return new Tuple(Control_Lazy.defer2(__dict_Lazy2_11)(function (_342) {
                return fst(f(Prelude.unit));
            }), Control_Lazy.defer2(__dict_Lazy2_12)(function (_343) {
                return snd(f(Prelude.unit));
            }));
        });
    };
};
var lazyTuple = function (__dict_Lazy_13) {
    return function (__dict_Lazy_14) {
        return new Control_Lazy.Lazy(function (f) {
            return new Tuple(Control_Lazy.defer(__dict_Lazy_13)(function (_338) {
                return fst(f(Prelude.unit));
            }), Control_Lazy.defer(__dict_Lazy_14)(function (_339) {
                return snd(f(Prelude.unit));
            }));
        });
    };
};
var extendTuple = new Control_Extend.Extend(function (f) {
    return function (_362) {
        return new Tuple(_362.value0, f(_362));
    };
}, function () {
    return functorTuple;
});
var eqTuple = function (__dict_Eq_15) {
    return function (__dict_Eq_16) {
        return new Prelude.Eq(function (t1) {
            return function (t2) {
                return !Prelude["=="](eqTuple(__dict_Eq_15)(__dict_Eq_16))(t1)(t2);
            };
        }, function (_350) {
            return function (_351) {
                return Prelude["=="](__dict_Eq_15)(_350.value0)(_351.value0) && Prelude["=="](__dict_Eq_16)(_350.value1)(_351.value1);
            };
        });
    };
};
var ordTuple = function (__dict_Ord_4) {
    return function (__dict_Ord_5) {
        return new Prelude.Ord(function () {
            return eqTuple(__dict_Ord_4["__superclass_Prelude.Eq_0"]())(__dict_Ord_5["__superclass_Prelude.Eq_0"]());
        }, function (_352) {
            return function (_353) {
                var _1259 = Prelude.compare(__dict_Ord_4)(_352.value0)(_353.value0);
                if (_1259 instanceof Prelude.EQ) {
                    return Prelude.compare(__dict_Ord_5)(_352.value1)(_353.value1);
                };
                return _1259;
            };
        });
    };
};
var curry = function (f) {
    return function (a) {
        return function (b) {
            return f(new Tuple(a, b));
        };
    };
};
var comonadTuple = new Control_Comonad.Comonad(function () {
    return extendTuple;
}, snd);
var applyTuple = function (__dict_Semigroup_18) {
    return new Prelude.Apply(function (_359) {
        return function (_360) {
            return new Tuple(Prelude["<>"](__dict_Semigroup_18)(_359.value0)(_360.value0), _359.value1(_360.value1));
        };
    }, function () {
        return functorTuple;
    });
};
var bindTuple = function (__dict_Semigroup_17) {
    return new Prelude.Bind(function (_361) {
        return function (f) {
            var _1272 = f(_361.value1);
            return new Tuple(Prelude["<>"](__dict_Semigroup_17)(_361.value0)(_1272.value0), _1272.value1);
        };
    }, function () {
        return applyTuple(__dict_Semigroup_17);
    });
};
var applicativeTuple = function (__dict_Monoid_19) {
    return new Prelude.Applicative(function () {
        return applyTuple(__dict_Monoid_19["__superclass_Prelude.Semigroup_0"]());
    }, Tuple.create(Data_Monoid.mempty(__dict_Monoid_19)));
};
var monadTuple = function (__dict_Monoid_8) {
    return new Prelude.Monad(function () {
        return applicativeTuple(__dict_Monoid_8);
    }, function () {
        return bindTuple(__dict_Monoid_8["__superclass_Prelude.Semigroup_0"]());
    });
};
module.exports = {
    Tuple: Tuple, 
    swap: swap, 
    unzip: unzip, 
    zip: zip, 
    uncurry: uncurry, 
    curry: curry, 
    snd: snd, 
    fst: fst, 
    showTuple: showTuple, 
    eqTuple: eqTuple, 
    ordTuple: ordTuple, 
    semigroupoidTuple: semigroupoidTuple, 
    semigroupTuple: semigroupTuple, 
    monoidTuple: monoidTuple, 
    functorTuple: functorTuple, 
    applyTuple: applyTuple, 
    applicativeTuple: applicativeTuple, 
    bindTuple: bindTuple, 
    monadTuple: monadTuple, 
    extendTuple: extendTuple, 
    comonadTuple: comonadTuple, 
    lazyTuple: lazyTuple, 
    lazyLazy1Tuple: lazyLazy1Tuple, 
    lazyLazy2Tuple: lazyLazy2Tuple
};

},{"Control.Comonad":4,"Control.Extend":5,"Control.Lazy":6,"Data.Array":23,"Data.Monoid":38,"Prelude":58}],45:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Monad_Eff = require("Control.Monad.Eff");

    function trace(s) {
      return function() {
        console.log(s);
        return {};
      };
    }
    ;
var print = function (__dict_Show_0) {
    return function (o) {
        return trace(Prelude.show(__dict_Show_0)(o));
    };
};
module.exports = {
    print: print, 
    trace: trace
};

},{"Control.Monad.Eff":7,"Prelude":58}],46:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Foldable = require("Data.Foldable");
var Data_Maybe = require("Data.Maybe");
var Expresso_Parser_Data = require("Expresso.Parser.Data");
var Optic_Core = require("Optic.Core");
var Data_Array = require("Data.Array");
var replacePlaceholder = function (expression) {
    return function (toReplace) {
        if (expression instanceof Expresso_Parser_Data.Placeholder) {
            return new Data_Maybe.Just(toReplace);
        };
        if (expression instanceof Expresso_Parser_Data.ParentOf) {
            var update = function (updatedChild) {
                return Prelude["return"](Data_Maybe.monadMaybe)(new Expresso_Parser_Data.ParentOf(expression.value0, updatedChild));
            };
            var mreplaced = replacePlaceholder(expression.value1)(toReplace);
            return Prelude[">>="](Data_Maybe.bindMaybe)(mreplaced)(update);
        };
        if (expression instanceof Expresso_Parser_Data.BranchOf) {
            var evaluateAllBranches = function (currentExp) {
                return function (seed) {
                    var _19 = replacePlaceholder(currentExp)(toReplace);
                    if (_19 instanceof Data_Maybe.Just) {
                        return {
                            found: true, 
                            res: Prelude[":"](_19.value0)(seed.res)
                        };
                    };
                    if (_19 instanceof Data_Maybe.Nothing) {
                        return {
                            found: seed.found, 
                            res: Prelude[":"](currentExp)(seed.res)
                        };
                    };
                    throw new Error("Failed pattern match");
                };
            };
            var _21 = Data_Foldable.foldr(Data_Foldable.foldableArray)(evaluateAllBranches)({
                found: false, 
                res: [  ]
            })(expression.value1);
            if (_21.found) {
                return Data_Maybe.Just.create(new Expresso_Parser_Data.BranchOf(expression.value0, _21.res));
            };
            return Data_Maybe.Nothing.value;
        };
        return Data_Maybe.Nothing.value;
    };
};
var expressionBuilder = function (op) {
    return function (_13) {
        return function (_14) {
            if (_13 instanceof Expresso_Parser_Data.BranchOf && (_14 instanceof Expresso_Parser_Data.BranchOf && (Prelude["=="](Expresso_Parser_Data.branchTypeEq)(_13.value0)(op) && Prelude["=="](Expresso_Parser_Data.branchTypeEq)(_14.value0)(op)))) {
                return new Expresso_Parser_Data.BranchOf(op, Prelude["++"](Data_Array.semigroupArray)(_13.value1)(_14.value1));
            };
            if (_13 instanceof Expresso_Parser_Data.BranchOf && Prelude["=="](Expresso_Parser_Data.branchTypeEq)(_13.value0)(op)) {
                return new Expresso_Parser_Data.BranchOf(op, Prelude["++"](Data_Array.semigroupArray)(_13.value1)([ _14 ]));
            };
            if (_14 instanceof Expresso_Parser_Data.BranchOf && Prelude["=="](Expresso_Parser_Data.branchTypeEq)(_14.value0)(op)) {
                return new Expresso_Parser_Data.BranchOf(op, Prelude[":"](_13)(_14.value1));
            };
            return new Expresso_Parser_Data.BranchOf(op, [ _13, _14 ]);
        };
    };
};
var expressionOr = expressionBuilder(Expresso_Parser_Data.Or.value);
var expressionAnd = expressionBuilder(Expresso_Parser_Data.And.value);
module.exports = {
    replacePlaceholder: replacePlaceholder, 
    expressionOr: expressionOr, 
    expressionAnd: expressionAnd, 
    expressionBuilder: expressionBuilder
};

},{"Data.Array":23,"Data.Foldable":28,"Data.Maybe":32,"Expresso.Parser.Data":47,"Optic.Core":49,"Prelude":58}],47:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Foldable = require("Data.Foldable");
var Data_Array = require("Data.Array");
var Data_Monoid = require("Data.Monoid");
var Value = (function () {
    function Value(value0) {
        this.value0 = value0;
    };
    Value.create = function (value0) {
        return new Value(value0);
    };
    return Value;
})();
var Keyword = (function () {
    function Keyword(value0) {
        this.value0 = value0;
    };
    Keyword.create = function (value0) {
        return new Keyword(value0);
    };
    return Keyword;
})();
var Geolocation = (function () {
    function Geolocation(value0) {
        this.value0 = value0;
    };
    Geolocation.create = function (value0) {
        return new Geolocation(value0);
    };
    return Geolocation;
})();
var And = (function () {
    function And() {

    };
    And.value = new And();
    return And;
})();
var Or = (function () {
    function Or() {

    };
    Or.value = new Or();
    return Or;
})();
var Placeholder = (function () {
    function Placeholder() {

    };
    Placeholder.value = new Placeholder();
    return Placeholder;
})();
var Expression = (function () {
    function Expression(value0) {
        this.value0 = value0;
    };
    Expression.create = function (value0) {
        return new Expression(value0);
    };
    return Expression;
})();
var ParentOf = (function () {
    function ParentOf(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ParentOf.create = function (value0) {
        return function (value1) {
            return new ParentOf(value0, value1);
        };
    };
    return ParentOf;
})();
var BranchOf = (function () {
    function BranchOf(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    BranchOf.create = function (value0) {
        return function (value1) {
            return new BranchOf(value0, value1);
        };
    };
    return BranchOf;
})();
var parentOf = function (anf) {
    return function (e) {
        return new ParentOf(anf, e);
    };
};
var facetValue = function (l) {
    return new Value(l);
};
var facetShow = new Prelude.Show(function (_516) {
    if (_516 instanceof Value) {
        return _516.value0;
    };
    if (_516 instanceof Keyword) {
        return "keyword(" + (_516.value0 + ")");
    };
    if (_516 instanceof Geolocation) {
        return "location(" + (_516.value0 + ")");
    };
    throw new Error("Failed pattern match");
});
var showAnf = function (_508) {
    return _508.aspect + ("." + (Prelude.show(facetShow)(_508.facet) + "."));
};
var facetKeyword = function (k) {
    return new Keyword(k);
};
var facetGeolocation = function (g) {
    return new Geolocation(g);
};
var facetEq = new Prelude.Eq(function (a) {
    return function (b) {
        return !Prelude["=="](facetEq)(a)(b);
    };
}, function (_511) {
    return function (_512) {
        if (_511 instanceof Value && _512 instanceof Value) {
            return _511.value0 === _512.value0;
        };
        if (_511 instanceof Keyword && _512 instanceof Keyword) {
            return _511.value0 === _512.value0;
        };
        if (_511 instanceof Geolocation && _512 instanceof Geolocation) {
            return _511.value0 === _512.value0;
        };
        return false;
    };
});
var eqAnf = function (_506) {
    return function (_507) {
        return _506.aspect === _507.aspect && Prelude["=="](facetEq)(_506.facet)(_507.facet);
    };
};
var branchTypeShow = new Prelude.Show(function (_515) {
    if (_515 instanceof And) {
        return "And";
    };
    if (_515 instanceof Or) {
        return "Or";
    };
    throw new Error("Failed pattern match");
});
var expressionShow = new Prelude.Show(function (_517) {
    if (_517 instanceof Placeholder) {
        return "(<!>)";
    };
    if (_517 instanceof Expression) {
        return showAnf(_517.value0);
    };
    if (_517 instanceof ParentOf) {
        return "(C." + (showAnf(_517.value0) + ("_." + (Prelude.show(expressionShow)(_517.value1) + ")")));
    };
    if (_517 instanceof BranchOf) {
        return "(" + (Prelude.show(branchTypeShow)(_517.value0) + ("." + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)("_.")(Data_Array.map(Prelude.show(expressionShow))(_517.value1)) + ")")));
    };
    throw new Error("Failed pattern match");
});
var branchTypeEq = new Prelude.Eq(function (a) {
    return function (b) {
        return !Prelude["=="](branchTypeEq)(a)(b);
    };
}, function (_509) {
    return function (_510) {
        if (_509 instanceof And && _510 instanceof And) {
            return true;
        };
        if (_509 instanceof Or && _510 instanceof Or) {
            return true;
        };
        return false;
    };
});
var expressionEq = new Prelude.Eq(function (l) {
    return function (r) {
        return !Prelude["=="](expressionEq)(l)(r);
    };
}, function (_513) {
    return function (_514) {
        if (_513 instanceof Placeholder && _514 instanceof Placeholder) {
            return true;
        };
        if (_513 instanceof Expression && _514 instanceof Expression) {
            return eqAnf(_513.value0)(_514.value0);
        };
        if (_513 instanceof ParentOf && _514 instanceof ParentOf) {
            return eqAnf(_513.value0)(_514.value0) && Prelude["=="](expressionEq)(_513.value1)(_514.value1);
        };
        if (_513 instanceof BranchOf && _514 instanceof BranchOf) {
            return Prelude["=="](branchTypeEq)(_513.value0)(_514.value0) && Prelude["=="](Prelude.eqArray(expressionEq))(_513.value1)(_514.value1);
        };
        return false;
    };
});
var branchOf = function (type$prime) {
    return function (expressions) {
        return new BranchOf(type$prime, expressions);
    };
};
var aspectAndFacet = function (a) {
    return function (f) {
        return {
            aspect: a, 
            facet: f
        };
    };
};
var expression = function (a) {
    return function (f) {
        var anf = aspectAndFacet(a)(f);
        return new Expression(anf);
    };
};
module.exports = {
    Placeholder: Placeholder, 
    Expression: Expression, 
    ParentOf: ParentOf, 
    BranchOf: BranchOf, 
    Value: Value, 
    Keyword: Keyword, 
    Geolocation: Geolocation, 
    And: And, 
    Or: Or, 
    showAnf: showAnf, 
    eqAnf: eqAnf, 
    branchOf: branchOf, 
    parentOf: parentOf, 
    expression: expression, 
    facetGeolocation: facetGeolocation, 
    facetKeyword: facetKeyword, 
    facetValue: facetValue, 
    aspectAndFacet: aspectAndFacet, 
    branchTypeEq: branchTypeEq, 
    facetEq: facetEq, 
    expressionEq: expressionEq, 
    branchTypeShow: branchTypeShow, 
    facetShow: facetShow, 
    expressionShow: expressionShow
};

},{"Data.Array":23,"Data.Foldable":28,"Data.Monoid":38,"Prelude":58}],48:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Text_Parsing_Parser = require("Text.Parsing.Parser");
var Text_Parsing_Parser_String = require("Text.Parsing.Parser.String");
var Control_Alt = require("Control.Alt");
var Expresso_Parser_Data = require("Expresso.Parser.Data");
var Prelude = require("Prelude");
var Text_Parsing_Parser_Combinators = require("Text.Parsing.Parser.Combinators");
var Data_Foldable = require("Data.Foldable");
var Data_Monoid = require("Data.Monoid");
var Data_Array = require("Data.Array");
var Data_Either = require("Data.Either");
var Data_Maybe = require("Data.Maybe");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Debug_Trace = require("Debug.Trace");
var Data_Identity = require("Data.Identity");
var $bar$greater$greater = function (__dict_Functor_0) {
    return Prelude.flip(Prelude["<$>"](__dict_Functor_0));
};
var $greater$greater$percent = function (__dict_Monad_1) {
    return function (p) {
        return function (v) {
            return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_1))(p)(function (_15) {
                return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_1))(v);
            });
        };
    };
};
var $dot$greater$greater = function (__dict_Monad_2) {
    return function (pa) {
        return function (pb) {
            return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_2))(pa)(function (_10) {
                return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_2))(pb)(function () {
                    return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_2))(_10);
                });
            });
        };
    };
};
var placeholderP = Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("(<!>)"))(function () {
    return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(Expresso_Parser_Data.Placeholder.value);
});
var many$prime = function (__dict_Monad_3) {
    return function (p) {
        return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_3))(p)(function (_12) {
            return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_3))(Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_3))(many$prime(__dict_Monad_3)(p))(function (_11) {
                return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_3))(Prelude[":"](_12)(_11));
            }))(Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_3))([ _12 ]));
        });
    };
};
var flatten = function (__dict_Monoid_4) {
    return function (ms) {
        return Data_Foldable.foldr(Data_Foldable.foldableArray)(Prelude["<>"](__dict_Monoid_4["__superclass_Prelude.Semigroup_0"]()))(Data_Monoid.mempty(__dict_Monoid_4))(ms);
    };
};
var manyFlattened = function (__dict_Monoid_5) {
    return function (__dict_Monad_6) {
        return function (p) {
            return $bar$greater$greater(Text_Parsing_Parser.functorParserT(((__dict_Monad_6["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]()))(many$prime(__dict_Monad_6)(p))(flatten(__dict_Monoid_5));
        };
    };
};
var delimiter = ".";
var ident = (function () {
    var dot = Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(delimiter);
    return $bar$greater$greater(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Parsing_Parser_Combinators.many1Till(Data_Identity.monadIdentity)(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity))(dot))(flatten(Data_Monoid.monoidString));
})();
var combinationsSep = "_.";
var branchOr = $greater$greater$percent(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("Or."))(Expresso_Parser_Data.Or.value);
var branchAnd = $greater$greater$percent(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("And."))(Expresso_Parser_Data.And.value);
var branch = Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(branchAnd)(branchOr);
var betweenS = function (__dict_Monad_7) {
    return function (start) {
        return function (end) {
            return function (inner) {
                return Text_Parsing_Parser_Combinators.between(__dict_Monad_7)(Text_Parsing_Parser_String.string(__dict_Monad_7)(start))(Text_Parsing_Parser_String.string(__dict_Monad_7)(end))(inner);
            };
        };
    };
};
var facet = (function () {
    var keyword = betweenS(Data_Identity.monadIdentity)("keyword(")(").")(Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(manyFlattened(Data_Monoid.monoidString)(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.satisfy(Data_Identity.monadIdentity)(Prelude["/="](Prelude.eqString)(")"))))(function (_0) {
        return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(Expresso_Parser_Data.facetKeyword(_0));
    }));
    var geolocation = betweenS(Data_Identity.monadIdentity)("location(")(").")(Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(manyFlattened(Data_Monoid.monoidString)(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.satisfy(Data_Identity.monadIdentity)(Prelude["/="](Prelude.eqString)(")"))))(function (_1) {
        return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(Expresso_Parser_Data.facetGeolocation(_1));
    }));
    var flatValue = $bar$greater$greater(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(ident)(Expresso_Parser_Data.facetValue);
    return Text_Parsing_Parser_Combinators.choice(Data_Identity.monadIdentity)([ keyword, geolocation, flatValue ]);
})();
var expressionP = Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(ident)(function (_3) {
    return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(facet)(function (_2) {
        return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(Expresso_Parser_Data.expression(_3)(_2));
    });
});
var expressoParser = (function () {
    var hierarchicalParser = betweenS(Data_Identity.monadIdentity)("(C.")(")")(Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(ident)(function (_6) {
        return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))($bar$greater$greater(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(ident)(Expresso_Parser_Data.facetValue))(function (_5) {
            var parent = Expresso_Parser_Data.aspectAndFacet(_6)(_5);
            return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(combinationsSep))(function () {
                return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expressoParser)(function (_4) {
                    return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(Expresso_Parser_Data.parentOf(parent)(_4));
                });
            });
        });
    }));
    var branchParser = Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(betweenS(Data_Identity.monadIdentity)("(")(")")(Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(branch)(function (_9) {
        return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expressoParser)(function (_8) {
            return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.manyTill(Data_Identity.monadIdentity)(Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(combinationsSep))(function () {
                return expressoParser;
            }))(Text_Parsing_Parser_Combinators.lookAhead(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(")"))))(function (_7) {
                return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(Expresso_Parser_Data.branchOf(_9)(Prelude[":"](_8)(_7)));
            });
        });
    })));
    return Text_Parsing_Parser_Combinators.choice(Data_Identity.monadIdentity)([ branchParser, hierarchicalParser, placeholderP, expressionP ]);
})();
var parseExpressoExpression = function (incoming) {
    var _51 = Text_Parsing_Parser.runParser(incoming)(expressoParser);
    if (_51 instanceof Data_Either.Left) {
        return Data_Maybe.Nothing.value;
    };
    if (_51 instanceof Data_Either.Right) {
        return new Data_Maybe.Just(_51.value0);
    };
    throw new Error("Failed pattern match");
};
module.exports = {
    manyFlattened: manyFlattened, 
    "many'": many$prime, 
    flatten: flatten, 
    ">>%": $greater$greater$percent, 
    betweenS: betweenS, 
    ".>>": $dot$greater$greater, 
    "|>>": $bar$greater$greater, 
    expressoParser: expressoParser, 
    expressionP: expressionP, 
    placeholderP: placeholderP, 
    facet: facet, 
    branch: branch, 
    branchOr: branchOr, 
    branchAnd: branchAnd, 
    ident: ident, 
    combinationsSep: combinationsSep, 
    delimiter: delimiter, 
    parseExpressoExpression: parseExpressoExpression
};

},{"Control.Alt":1,"Control.Monad.Eff":7,"Data.Array":23,"Data.Either":27,"Data.Foldable":28,"Data.Identity":31,"Data.Maybe":32,"Data.Monoid":38,"Debug.Trace":45,"Expresso.Parser.Data":47,"Prelude":58,"Text.Parsing.Parser":61,"Text.Parsing.Parser.Combinators":59,"Text.Parsing.Parser.String":60}],49:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Optic_Getter = require("Optic.Getter");
var Optic_Lens = require("Optic.Lens");
var Optic_Prism = require("Optic.Prism");
var Optic_Setter = require("Optic.Setter");
var Optic_Types = require("Optic.Types");
var $bar$bar$tilde = Optic_Setter["||~"];
var $up$dot = Optic_Getter["^."];
var $qmark$tilde = Optic_Setter["?~"];
var $qmark$qmark = Optic_Lens["??"];
var $less$greater$tilde = Optic_Setter["<>~"];
var $div$div$tilde = Optic_Setter["//~"];
var $dot$tilde = Optic_Setter[".~"];
var $dot$dot = Prelude["<<<"];
var $minus$tilde = Optic_Setter["-~"];
var $plus$tilde = Optic_Setter["+~"];
var $plus$plus$tilde = Optic_Setter["++~"];
var $times$tilde = Optic_Setter["*~"];
var $amp$amp$tilde = Optic_Setter["&&~"];
var $percent$tilde = Optic_Setter["%~"];
var withPrism = Optic_Prism.withPrism;
var view = Optic_Getter.view;
var to = Optic_Getter.to;
var sets = Optic_Setter.sets;
var set$prime = Optic_Setter["set'"];
var set = Optic_Setter.set;
var prism$prime = Optic_Prism["prism'"];
var prism = Optic_Prism.prism;
var over = Optic_Setter.over;
var only = Optic_Prism.only;
var nearly = Optic_Prism.nearly;
var matching = Optic_Prism.matching;
var mapped = Optic_Setter.mapped;
var lens = Optic_Lens.lens;
var isn$primet = Optic_Prism["isn't"];
var is = Optic_Prism.is;
var contramapped = Optic_Setter.contramapped;
var clonePrism = Optic_Prism.clonePrism;
var argument = Optic_Setter.argument;
module.exports = {
    sets: sets, 
    "set'": set$prime, 
    set: set, 
    over: over, 
    mapped: mapped, 
    contramapped: contramapped, 
    argument: argument, 
    "?~": $qmark$tilde, 
    "++~": $plus$plus$tilde, 
    "<>~": $less$greater$tilde, 
    "&&~": $amp$amp$tilde, 
    "||~": $bar$bar$tilde, 
    "//~": $div$div$tilde, 
    "*~": $times$tilde, 
    "-~": $minus$tilde, 
    "+~": $plus$tilde, 
    ".~": $dot$tilde, 
    "%~": $percent$tilde, 
    withPrism: withPrism, 
    "prism'": prism$prime, 
    prism: prism, 
    only: only, 
    nearly: nearly, 
    matching: matching, 
    "isn't": isn$primet, 
    is: is, 
    clonePrism: clonePrism, 
    lens: lens, 
    "??": $qmark$qmark, 
    "^.": $up$dot, 
    view: view, 
    to: to, 
    "..": $dot$dot
};

},{"Optic.Getter":50,"Optic.Lens":53,"Optic.Prism":54,"Optic.Setter":55,"Optic.Types":56,"Prelude":58}],50:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Data_Profunctor = require("Data.Profunctor");
var Data_Const = require("Data.Const");
var Prelude = require("Prelude");
var Data_Functor_Contravariant = require("Data.Functor.Contravariant");
var Optic_Types = require("Optic.Types");
var Void = function (x) {
    return x;
};
var $up$dot = function (s) {
    return function (asa) {
        return Data_Const.getConst(asa(Data_Const.Const)(s));
    };
};
var view = function (asa) {
    return function (s) {
        return Data_Const.getConst(asa(Data_Const.Const)(s));
    };
};
var absurd = function (a) {
    var spin = function (__copy__614) {
        var _614 = __copy__614;
        tco: while (true) {
            var __tco__614 = _614;
            _614 = __tco__614;
            continue tco;
        };
    };
    return spin(a);
};
var coerce = function (__dict_Contravariant_0) {
    return function (__dict_Functor_1) {
        return function (a) {
            return Prelude["<$>"](__dict_Functor_1)(absurd)(Data_Functor_Contravariant[">$<"](__dict_Contravariant_0)(absurd)(a));
        };
    };
};
var to = function (__dict_Contravariant_2) {
    return function (__dict_Functor_3) {
        return function (__dict_Profunctor_4) {
            return function (s2a) {
                return Data_Profunctor.dimap(__dict_Profunctor_4)(s2a)(coerce(__dict_Contravariant_2)(__dict_Functor_3));
            };
        };
    };
};
module.exports = {
    view: view, 
    to: to, 
    "^.": $up$dot
};

},{"Data.Const":25,"Data.Functor.Contravariant":30,"Data.Profunctor":40,"Optic.Types":56,"Prelude":58}],51:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Either = require("Data.Either");
var Data_Profunctor = require("Data.Profunctor");
var Data_Profunctor_Choice = require("Data.Profunctor.Choice");
var Market = (function () {
    function Market(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Market.create = function (value0) {
        return function (value1) {
            return new Market(value0, value1);
        };
    };
    return Market;
})();
var profunctorMarket = new Data_Profunctor.Profunctor(function (s2r) {
    return function (t2u) {
        return function (_227) {
            return new Market(Prelude[">>>"](Prelude.semigroupoidArr)(_227.value0)(t2u), Prelude[">>>"](Prelude.semigroupoidArr)(s2r)(Prelude[">>>"](Prelude.semigroupoidArr)(_227.value1)(Data_Either.either(Prelude[">>>"](Prelude.semigroupoidArr)(t2u)(Data_Either.Left.create))(Data_Either.Right.create))));
        };
    };
});
var functorMarket = new Prelude.Functor(function (t2u) {
    return function (_226) {
        return new Market(Prelude[">>>"](Prelude.semigroupoidArr)(_226.value0)(t2u), Prelude[">>>"](Prelude.semigroupoidArr)(_226.value1)(Data_Either.either(Prelude[">>>"](Prelude.semigroupoidArr)(t2u)(Data_Either.Left.create))(Data_Either.Right.create)));
    };
});
var choiceMarket = new Data_Profunctor_Choice.Choice(function () {
    return profunctorMarket;
}, function (_228) {
    return new Market(Prelude[">>>"](Prelude.semigroupoidArr)(_228.value0)(Data_Either.Left.create), function (thing) {
        if (thing instanceof Data_Either.Left) {
            return Data_Either.either(Prelude[">>>"](Prelude.semigroupoidArr)(Data_Either.Left.create)(Data_Either.Left.create))(Data_Either.Right.create)(_228.value1(thing.value0));
        };
        if (thing instanceof Data_Either.Right) {
            return Data_Either.Left.create(new Data_Either.Right(thing.value0));
        };
        throw new Error("Failed pattern match");
    });
}, function (_229) {
    return new Market(Prelude[">>>"](Prelude.semigroupoidArr)(_229.value0)(Data_Either.Right.create), function (thing) {
        if (thing instanceof Data_Either.Left) {
            return Data_Either.Left.create(new Data_Either.Left(thing.value0));
        };
        if (thing instanceof Data_Either.Right) {
            return Data_Either.either(Prelude[">>>"](Prelude.semigroupoidArr)(Data_Either.Right.create)(Data_Either.Left.create))(Data_Either.Right.create)(_229.value1(thing.value0));
        };
        throw new Error("Failed pattern match");
    });
});
module.exports = {
    Market: Market, 
    functorMarket: functorMarket, 
    profunctorMarket: profunctorMarket, 
    choiceMarket: choiceMarket
};

},{"Data.Either":27,"Data.Profunctor":40,"Data.Profunctor.Choice":39,"Prelude":58}],52:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Data_Profunctor = require("Data.Profunctor");
var Data_Identity = require("Data.Identity");
var Prelude = require("Prelude");
var Data_Distributive = require("Data.Distributive");
var Data_Traversable = require("Data.Traversable");
var Settable = function (__superclass_Data$dotDistributive$dotDistributive_1, __superclass_Data$dotTraversable$dotTraversable_2, __superclass_Prelude$dotApplicative_0, taintedDot, untainted, untaintedDot) {
    this["__superclass_Data.Distributive.Distributive_1"] = __superclass_Data$dotDistributive$dotDistributive_1;
    this["__superclass_Data.Traversable.Traversable_2"] = __superclass_Data$dotTraversable$dotTraversable_2;
    this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
    this.taintedDot = taintedDot;
    this.untainted = untainted;
    this.untaintedDot = untaintedDot;
};
var untaintedDot = function (dict) {
    return dict.untaintedDot;
};
var untainted = function (dict) {
    return dict.untainted;
};
var taintedDot = function (dict) {
    return dict.taintedDot;
};
var settableIdentity = new Settable(function () {
    return Data_Distributive.distributiveIdentity;
}, function () {
    return Data_Identity.traversableIdentity;
}, function () {
    return Data_Identity.applicativeIdentity;
}, function (__dict_Profunctor_1) {
    return Data_Profunctor.rmap(__dict_Profunctor_1)(Data_Identity.Identity);
}, function (_613) {
    return _613;
}, function (__dict_Profunctor_0) {
    return Data_Profunctor.rmap(__dict_Profunctor_0)(Data_Identity.runIdentity);
});
module.exports = {
    Settable: Settable, 
    taintedDot: taintedDot, 
    untaintedDot: untaintedDot, 
    untainted: untainted, 
    settableIdentity: settableIdentity
};

},{"Data.Distributive":26,"Data.Identity":31,"Data.Profunctor":40,"Data.Traversable":43,"Prelude":58}],53:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Optic_Types = require("Optic.Types");
var $qmark$qmark = function (__dict_Functor_0) {
    return function (ff) {
        return function (x) {
            return Prelude["<$>"](__dict_Functor_0)(function (f) {
                return f(x);
            })(ff);
        };
    };
};
var lens = function (s2a) {
    return function (s2b2t) {
        return function (__dict_Functor_1) {
            return function (a2fb) {
                return function (s) {
                    return Prelude["<$>"](__dict_Functor_1)(s2b2t(s))(a2fb(s2a(s)));
                };
            };
        };
    };
};
module.exports = {
    lens: lens, 
    "??": $qmark$qmark
};

},{"Optic.Types":56,"Prelude":58}],54:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Either = require("Data.Either");
var Data_Profunctor = require("Data.Profunctor");
var Data_Profunctor_Choice = require("Data.Profunctor.Choice");
var Data_Maybe = require("Data.Maybe");
var Data_Identity = require("Data.Identity");
var Optic_Internal_Prism = require("Optic.Internal.Prism");
var Optic_Types = require("Optic.Types");
var withPrism = function (stab) {
    return function (f) {
        var _2406 = stab(new Optic_Internal_Prism.Market(Data_Identity.Identity, Data_Either.Right.create));
        return f(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Identity.runIdentity)(_2406.value0))(Prelude[">>>"](Prelude.semigroupoidArr)(_2406.value1)(Data_Either.either(Prelude[">>>"](Prelude.semigroupoidArr)(Data_Identity.runIdentity)(Data_Either.Left.create))(Data_Either.Right.create)));
    };
};
var prism = function (__dict_Applicative_0) {
    return function (__dict_Choice_1) {
        return function (b2t) {
            return function (s2Eta) {
                return function (pafb) {
                    return Data_Profunctor.dimap(__dict_Choice_1["__superclass_Data.Profunctor.Profunctor_0"]())(s2Eta)(Data_Either.either(Prelude.pure(__dict_Applicative_0))(Prelude["<$>"]((__dict_Applicative_0["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(b2t)))(Data_Profunctor_Choice.right(__dict_Choice_1)(pafb));
                };
            };
        };
    };
};
var prism$prime = function (b2s) {
    return function (s2Ma) {
        return function (__dict_Applicative_2) {
            return function (__dict_Choice_3) {
                return prism(__dict_Applicative_2)(__dict_Choice_3)(b2s)(function (s) {
                    return Data_Maybe.maybe(new Data_Either.Left(s))(Data_Either.Right.create)(s2Ma(s));
                });
            };
        };
    };
};
var nearly = function (x) {
    return function (p) {
        return function (__dict_Applicative_4) {
            return function (__dict_Choice_5) {
                var guard = function (_720) {
                    if (_720) {
                        return new Data_Maybe.Just(Prelude.unit);
                    };
                    if (!_720) {
                        return Data_Maybe.Nothing.value;
                    };
                    throw new Error("Failed pattern match");
                };
                return prism$prime(Prelude["const"](x))(Prelude["<<<"](Prelude.semigroupoidArr)(guard)(p))(__dict_Applicative_4)(__dict_Choice_5);
            };
        };
    };
};
var only = function (__dict_Eq_6) {
    return function (x) {
        return function (__dict_Applicative_7) {
            return function (__dict_Choice_8) {
                return nearly(x)(Prelude["=="](__dict_Eq_6)(x))(__dict_Applicative_7)(__dict_Choice_8);
            };
        };
    };
};
var matching = function (stab) {
    return withPrism(stab)(function (_719) {
        return function (s) {
            return s;
        };
    });
};
var is = function (stab) {
    return function (s) {
        return Data_Either.either(Prelude["const"](false))(Prelude["const"](true))(matching(stab)(s));
    };
};
var isn$primet = function (stab) {
    return function (s) {
        return !is(stab)(s);
    };
};
var clonePrism = function (__dict_Applicative_9) {
    return function (__dict_Choice_10) {
        return function (stab) {
            return withPrism(stab)(prism(__dict_Applicative_9)(__dict_Choice_10));
        };
    };
};
module.exports = {
    withPrism: withPrism, 
    "prism'": prism$prime, 
    prism: prism, 
    only: only, 
    nearly: nearly, 
    matching: matching, 
    "isn't": isn$primet, 
    is: is, 
    clonePrism: clonePrism
};

},{"Data.Either":27,"Data.Identity":31,"Data.Maybe":32,"Data.Profunctor":40,"Data.Profunctor.Choice":39,"Optic.Internal.Prism":51,"Optic.Types":56,"Prelude":58}],55:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Data_Profunctor = require("Data.Profunctor");
var Data_Functor_Contravariant = require("Data.Functor.Contravariant");
var Prelude = require("Prelude");
var Data_Identity = require("Data.Identity");
var Optic_Internal_Setter = require("Optic.Internal.Setter");
var Data_Maybe = require("Data.Maybe");
var Optic_Types = require("Optic.Types");
var sets = function (__dict_Profunctor_0) {
    return function (__dict_Profunctor_1) {
        return function (__dict_Settable_2) {
            return function (pab2qst) {
                return Prelude[">>>"](Prelude.semigroupoidArr)(Optic_Internal_Setter.untaintedDot(__dict_Settable_2)(__dict_Profunctor_0))(Prelude[">>>"](Prelude.semigroupoidArr)(pab2qst)(Optic_Internal_Setter.taintedDot(__dict_Settable_2)(__dict_Profunctor_1)));
            };
        };
    };
};
var set$prime = function (sa) {
    return function (a) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(Data_Identity.runIdentity)(sa(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Identity.Identity)(Prelude["const"](a))));
    };
};
var set = function (stab) {
    return function (b) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(Data_Identity.runIdentity)(stab(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Identity.Identity)(Prelude["const"](b))));
    };
};
var $dot$tilde = set;
var $qmark$tilde = function (stab) {
    return function (a) {
        return set(stab)(new Data_Maybe.Just(a));
    };
};
var over = function (__dict_Profunctor_3) {
    return function (pstab) {
        return function (pab) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(Data_Identity.runIdentity)(pstab(Data_Profunctor.rmap(__dict_Profunctor_3)(Data_Identity.Identity)(pab)));
        };
    };
};
var $percent$tilde = function (__dict_Profunctor_4) {
    return over(__dict_Profunctor_4);
};
var $amp$amp$tilde = function (__dict_BoolLike_5) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorArr)(staa)(Prelude.flip(Prelude["&&"](__dict_BoolLike_5))(a));
        };
    };
};
var $times$tilde = function (__dict_Num_6) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorArr)(staa)(Prelude.flip(Prelude["*"](((__dict_Num_6["__superclass_Prelude.DivisionRing_0"]())["__superclass_Prelude.ModuloSemiring_1"]())["__superclass_Prelude.Semiring_0"]()))(a));
        };
    };
};
var $plus$plus$tilde = function (__dict_Semigroup_7) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorArr)(staa)(Prelude.flip(Prelude["++"](__dict_Semigroup_7))(a));
        };
    };
};
var $plus$tilde = function (__dict_Num_8) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorArr)(staa)(Prelude.flip(Prelude["+"](((__dict_Num_8["__superclass_Prelude.DivisionRing_0"]())["__superclass_Prelude.ModuloSemiring_1"]())["__superclass_Prelude.Semiring_0"]()))(a));
        };
    };
};
var $minus$tilde = function (__dict_Num_9) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorArr)(staa)(Prelude.flip(Prelude["-"]((__dict_Num_9["__superclass_Prelude.DivisionRing_0"]())["__superclass_Prelude.Ring_0"]()))(a));
        };
    };
};
var $div$div$tilde = function (__dict_Num_10) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorArr)(staa)(Prelude.flip(Prelude["/"]((__dict_Num_10["__superclass_Prelude.DivisionRing_0"]())["__superclass_Prelude.ModuloSemiring_1"]()))(a));
        };
    };
};
var $less$greater$tilde = function (__dict_Semigroup_11) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorArr)(staa)(Prelude.flip(Prelude["<>"](__dict_Semigroup_11))(a));
        };
    };
};
var $bar$bar$tilde = function (__dict_BoolLike_12) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorArr)(staa)(Prelude.flip(Prelude["||"](__dict_BoolLike_12))(a));
        };
    };
};
var mapped = function (__dict_Functor_13) {
    return function (__dict_Settable_14) {
        return sets(Data_Profunctor.profunctorArr)(Data_Profunctor.profunctorArr)(__dict_Settable_14)(Prelude["<$>"](__dict_Functor_13));
    };
};
var contramapped = function (__dict_Contravariant_15) {
    return function (__dict_Settable_16) {
        return sets(Data_Profunctor.profunctorArr)(Data_Profunctor.profunctorArr)(__dict_Settable_16)(Data_Functor_Contravariant[">$<"](__dict_Contravariant_15));
    };
};
var argument = function (__dict_Profunctor_17) {
    return function (__dict_Settable_18) {
        return sets(Data_Profunctor.profunctorArr)(Data_Profunctor.profunctorArr)(__dict_Settable_18)(Data_Profunctor.lmap(__dict_Profunctor_17));
    };
};
module.exports = {
    sets: sets, 
    "set'": set$prime, 
    set: set, 
    over: over, 
    mapped: mapped, 
    contramapped: contramapped, 
    argument: argument, 
    "?~": $qmark$tilde, 
    "++~": $plus$plus$tilde, 
    "<>~": $less$greater$tilde, 
    "&&~": $amp$amp$tilde, 
    "||~": $bar$bar$tilde, 
    "//~": $div$div$tilde, 
    "*~": $times$tilde, 
    "-~": $minus$tilde, 
    "+~": $plus$tilde, 
    ".~": $dot$tilde, 
    "%~": $percent$tilde
};

},{"Data.Functor.Contravariant":30,"Data.Identity":31,"Data.Maybe":32,"Data.Profunctor":40,"Optic.Internal.Setter":52,"Optic.Types":56,"Prelude":58}],56:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Optic_Internal_Prism = require("Optic.Internal.Prism");
var Optic_Internal_Setter = require("Optic.Internal.Setter");
var Data_Const = require("Data.Const");
var Data_Functor_Contravariant = require("Data.Functor.Contravariant");
var Data_Identity = require("Data.Identity");
var Data_Profunctor = require("Data.Profunctor");
var Data_Profunctor_Choice = require("Data.Profunctor.Choice");
module.exports = {};

},{"Data.Const":25,"Data.Functor.Contravariant":30,"Data.Identity":31,"Data.Profunctor":40,"Data.Profunctor.Choice":39,"Optic.Internal.Prism":51,"Optic.Internal.Setter":52,"Prelude":58}],57:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");

    function unsafeIndex(xs) {
      return function(n) {
        return xs[n];
      };
    }
    ;
module.exports = {
    unsafeIndex: unsafeIndex
};

},{"Prelude":58}],58:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";

    function cons(e) {
      return function(l) {
        return [e].concat(l);
      };
    }
    ;

    function showStringImpl(s) {
      return JSON.stringify(s);
    }
    ;

    function showNumberImpl(n) {
      return n.toString();
    }
    ;

    function showArrayImpl(f) {
      return function(xs) {
        var ss = [];
        for (var i = 0, l = xs.length; i < l; i++) {
          ss[i] = f(xs[i]);
        }
        return '[' + ss.join(',') + ']';
      };
    }
    ;

    function numAdd(n1) {
      return function(n2) {
        return n1 + n2;
      };
    }
    ;

    function numSub(n1) {
      return function(n2) {
        return n1 - n2;
      };
    }
    ;

    function numMul(n1) {
      return function(n2) {
        return n1 * n2;
      };
    }
    ;

    function numDiv(n1) {
      return function(n2) {
        return n1 / n2;
      };
    }
    ;

    function numMod(n1) {
      return function(n2) {
        return n1 % n2;
      };
    }
    ;

    function refEq(r1) {
      return function(r2) {
        return r1 === r2;
      };
    }
    ;

    function refIneq(r1) {
      return function(r2) {
        return r1 !== r2;
      };
    }
    ;

    function eqArrayImpl(f) {
      return function(xs) {
        return function(ys) {
          if (xs.length !== ys.length) return false;
          for (var i = 0; i < xs.length; i++) {
            if (!f(xs[i])(ys[i])) return false;
          }
          return true;
        };
      };
    }
    ;

    function unsafeCompareImpl(lt) {
      return function(eq) {
        return function(gt) {
          return function(x) {
            return function(y) {
              return x < y ? lt : x > y ? gt : eq;
            };
          };
        };
      };
    }
    ;

    function numShl(n1) {
      return function(n2) {
        return n1 << n2;
      };
    }
    ;

    function numShr(n1) {
      return function(n2) {
        return n1 >> n2;
      };
    }
    ;

    function numZshr(n1) {
      return function(n2) {
        return n1 >>> n2;
      };
    }
    ;

    function numAnd(n1) {
      return function(n2) {
        return n1 & n2;
      };
    }
    ;

    function numOr(n1) {
      return function(n2) {
        return n1 | n2;
      };
    }
    ;

    function numXor(n1) {
      return function(n2) {
        return n1 ^ n2;
      };
    }
    ;

    function numComplement(n) {
      return ~n;
    }
    ;

    function boolAnd(b1) {
      return function(b2) {
        return b1 && b2;
      };
    }
    ;

    function boolOr(b1) {
      return function(b2) {
        return b1 || b2;
      };
    }
    ;

    function boolNot(b) {
      return !b;
    }
    ;

    function concatString(s1) {
      return function(s2) {
        return s1 + s2;
      };
    }
    ;
var Unit = function (x) {
    return x;
};
var LT = (function () {
    function LT() {

    };
    LT.value = new LT();
    return LT;
})();
var GT = (function () {
    function GT() {

    };
    GT.value = new GT();
    return GT;
})();
var EQ = (function () {
    function EQ() {

    };
    EQ.value = new EQ();
    return EQ;
})();
var Semigroupoid = function ($less$less$less) {
    this["<<<"] = $less$less$less;
};
var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
    this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
    this.id = id;
};
var Show = function (show) {
    this.show = show;
};
var Functor = function ($less$dollar$greater) {
    this["<$>"] = $less$dollar$greater;
};
var Apply = function ($less$times$greater, __superclass_Prelude$dotFunctor_0) {
    this["<*>"] = $less$times$greater;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
};
var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
    this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    this.pure = pure;
};
var Bind = function ($greater$greater$eq, __superclass_Prelude$dotApply_0) {
    this[">>="] = $greater$greater$eq;
    this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
};
var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
    this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
    this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
};
var Semiring = function ($times, $plus, one, zero) {
    this["*"] = $times;
    this["+"] = $plus;
    this.one = one;
    this.zero = zero;
};
var ModuloSemiring = function ($div, __superclass_Prelude$dotSemiring_0, mod) {
    this["/"] = $div;
    this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
    this.mod = mod;
};
var Ring = function ($minus, __superclass_Prelude$dotSemiring_0) {
    this["-"] = $minus;
    this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
};
var DivisionRing = function (__superclass_Prelude$dotModuloSemiring_1, __superclass_Prelude$dotRing_0) {
    this["__superclass_Prelude.ModuloSemiring_1"] = __superclass_Prelude$dotModuloSemiring_1;
    this["__superclass_Prelude.Ring_0"] = __superclass_Prelude$dotRing_0;
};
var Num = function (__superclass_Prelude$dotDivisionRing_0) {
    this["__superclass_Prelude.DivisionRing_0"] = __superclass_Prelude$dotDivisionRing_0;
};
var Eq = function ($div$eq, $eq$eq) {
    this["/="] = $div$eq;
    this["=="] = $eq$eq;
};
var Ord = function (__superclass_Prelude$dotEq_0, compare) {
    this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
    this.compare = compare;
};
var Bits = function ($dot$amp$dot, $dot$up$dot, $dot$bar$dot, complement, shl, shr, zshr) {
    this[".&."] = $dot$amp$dot;
    this[".^."] = $dot$up$dot;
    this[".|."] = $dot$bar$dot;
    this.complement = complement;
    this.shl = shl;
    this.shr = shr;
    this.zshr = zshr;
};
var BoolLike = function ($amp$amp, not, $bar$bar) {
    this["&&"] = $amp$amp;
    this.not = not;
    this["||"] = $bar$bar;
};
var Semigroup = function ($less$greater) {
    this["<>"] = $less$greater;
};
var $bar$bar = function (dict) {
    return dict["||"];
};
var $greater$greater$eq = function (dict) {
    return dict[">>="];
};
var $eq$eq = function (dict) {
    return dict["=="];
};
var $less$greater = function (dict) {
    return dict["<>"];
};
var $less$less$less = function (dict) {
    return dict["<<<"];
};
var $greater$greater$greater = function (__dict_Semigroupoid_0) {
    return function (f) {
        return function (g) {
            return $less$less$less(__dict_Semigroupoid_0)(g)(f);
        };
    };
};
var $less$times$greater = function (dict) {
    return dict["<*>"];
};
var $less$dollar$greater = function (dict) {
    return dict["<$>"];
};
var $less$hash$greater = function (__dict_Functor_1) {
    return function (fa) {
        return function (f) {
            return $less$dollar$greater(__dict_Functor_1)(f)(fa);
        };
    };
};
var $colon = cons;
var $div$eq = function (dict) {
    return dict["/="];
};
var $div = function (dict) {
    return dict["/"];
};
var $dot$bar$dot = function (dict) {
    return dict[".|."];
};
var $dot$up$dot = function (dict) {
    return dict[".^."];
};
var $dot$amp$dot = function (dict) {
    return dict[".&."];
};
var $minus = function (dict) {
    return dict["-"];
};
var $plus$plus = function (__dict_Semigroup_2) {
    return $less$greater(__dict_Semigroup_2);
};
var $plus = function (dict) {
    return dict["+"];
};
var $times = function (dict) {
    return dict["*"];
};
var $amp$amp = function (dict) {
    return dict["&&"];
};
var $percent = numMod;
var $dollar = function (f) {
    return function (x) {
        return f(x);
    };
};
var $hash = function (x) {
    return function (f) {
        return f(x);
    };
};
var zshr = function (dict) {
    return dict.zshr;
};
var zero = function (dict) {
    return dict.zero;
};
var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
var unit = {};
var shr = function (dict) {
    return dict.shr;
};
var showUnit = new Show(function (_147) {
    return "Unit {}";
});
var showString = new Show(showStringImpl);
var showOrdering = new Show(function (_157) {
    if (_157 instanceof LT) {
        return "LT";
    };
    if (_157 instanceof GT) {
        return "GT";
    };
    if (_157 instanceof EQ) {
        return "EQ";
    };
    throw new Error("Failed pattern match");
});
var showNumber = new Show(showNumberImpl);
var showBoolean = new Show(function (_148) {
    if (_148) {
        return "true";
    };
    if (!_148) {
        return "false";
    };
    throw new Error("Failed pattern match");
});
var show = function (dict) {
    return dict.show;
};
var showArray = function (__dict_Show_3) {
    return new Show(showArrayImpl(show(__dict_Show_3)));
};
var shl = function (dict) {
    return dict.shl;
};
var semiringNumber = new Semiring(numMul, numAdd, 1, 0);
var semigroupoidArr = new Semigroupoid(function (f) {
    return function (g) {
        return function (x) {
            return f(g(x));
        };
    };
});
var semigroupUnit = new Semigroup(function (_165) {
    return function (_166) {
        return {};
    };
});
var semigroupString = new Semigroup(concatString);
var semigroupOrdering = new Semigroup(function (_158) {
    return function (y) {
        if (_158 instanceof LT) {
            return LT.value;
        };
        if (_158 instanceof GT) {
            return GT.value;
        };
        if (_158 instanceof EQ) {
            return y;
        };
        throw new Error("Failed pattern match");
    };
});
var semigroupArr = function (__dict_Semigroup_4) {
    return new Semigroup(function (f) {
        return function (g) {
            return function (x) {
                return $less$greater(__dict_Semigroup_4)(f(x))(g(x));
            };
        };
    });
};
var ringNumber = new Ring(numSub, function () {
    return semiringNumber;
});
var pure = function (dict) {
    return dict.pure;
};
var $$return = function (__dict_Monad_5) {
    return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
};
var otherwise = true;
var one = function (dict) {
    return dict.one;
};
var not = function (dict) {
    return dict.not;
};
var negate = function (__dict_Ring_6) {
    return function (a) {
        return $minus(__dict_Ring_6)(zero(__dict_Ring_6["__superclass_Prelude.Semiring_0"]()))(a);
    };
};
var moduloSemiringNumber = new ModuloSemiring(numDiv, function () {
    return semiringNumber;
}, function (_149) {
    return function (_150) {
        return 0;
    };
});
var mod = function (dict) {
    return dict.mod;
};
var liftM1 = function (__dict_Monad_7) {
    return function (f) {
        return function (a) {
            return $greater$greater$eq(__dict_Monad_7["__superclass_Prelude.Bind_1"]())(a)(function (_0) {
                return $$return(__dict_Monad_7)(f(_0));
            });
        };
    };
};
var liftA1 = function (__dict_Applicative_8) {
    return function (f) {
        return function (a) {
            return $less$times$greater(__dict_Applicative_8["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_8)(f))(a);
        };
    };
};
var id = function (dict) {
    return dict.id;
};
var functorArr = new Functor($less$less$less(semigroupoidArr));
var flip = function (f) {
    return function (b) {
        return function (a) {
            return f(a)(b);
        };
    };
};
var eqUnit = new Eq(function (_153) {
    return function (_154) {
        return false;
    };
}, function (_151) {
    return function (_152) {
        return true;
    };
});
var ordUnit = new Ord(function () {
    return eqUnit;
}, function (_159) {
    return function (_160) {
        return EQ.value;
    };
});
var eqString = new Eq(refIneq, refEq);
var ordString = new Ord(function () {
    return eqString;
}, unsafeCompare);
var eqNumber = new Eq(refIneq, refEq);
var ordNumber = new Ord(function () {
    return eqNumber;
}, unsafeCompare);
var eqBoolean = new Eq(refIneq, refEq);
var ordBoolean = new Ord(function () {
    return eqBoolean;
}, function (_161) {
    return function (_162) {
        if (!_161 && !_162) {
            return EQ.value;
        };
        if (!_161 && _162) {
            return LT.value;
        };
        if (_161 && _162) {
            return EQ.value;
        };
        if (_161 && !_162) {
            return GT.value;
        };
        throw new Error("Failed pattern match");
    };
});
var divisionRingNumber = new DivisionRing(function () {
    return moduloSemiringNumber;
}, function () {
    return ringNumber;
});
var numNumber = new Num(function () {
    return divisionRingNumber;
});
var $$const = function (a) {
    return function (_145) {
        return a;
    };
};
var $$void = function (__dict_Functor_10) {
    return function (fa) {
        return $less$dollar$greater(__dict_Functor_10)($$const(unit))(fa);
    };
};
var complement = function (dict) {
    return dict.complement;
};
var compare = function (dict) {
    return dict.compare;
};
var $less = function (__dict_Ord_12) {
    return function (a1) {
        return function (a2) {
            var _874 = compare(__dict_Ord_12)(a1)(a2);
            if (_874 instanceof LT) {
                return true;
            };
            return false;
        };
    };
};
var $less$eq = function (__dict_Ord_13) {
    return function (a1) {
        return function (a2) {
            var _875 = compare(__dict_Ord_13)(a1)(a2);
            if (_875 instanceof GT) {
                return false;
            };
            return true;
        };
    };
};
var $greater = function (__dict_Ord_14) {
    return function (a1) {
        return function (a2) {
            var _876 = compare(__dict_Ord_14)(a1)(a2);
            if (_876 instanceof GT) {
                return true;
            };
            return false;
        };
    };
};
var $greater$eq = function (__dict_Ord_15) {
    return function (a1) {
        return function (a2) {
            var _877 = compare(__dict_Ord_15)(a1)(a2);
            if (_877 instanceof LT) {
                return false;
            };
            return true;
        };
    };
};
var categoryArr = new Category(function () {
    return semigroupoidArr;
}, function (x) {
    return x;
});
var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
var eqArray = function (__dict_Eq_9) {
    return new Eq(function (xs) {
        return function (ys) {
            return not(boolLikeBoolean)($eq$eq(eqArray(__dict_Eq_9))(xs)(ys));
        };
    }, function (xs) {
        return function (ys) {
            return eqArrayImpl($eq$eq(__dict_Eq_9))(xs)(ys);
        };
    });
};
var ordArray = function (__dict_Ord_11) {
    return new Ord(function () {
        return eqArray(__dict_Ord_11["__superclass_Prelude.Eq_0"]());
    }, function (_163) {
        return function (_164) {
            if (_163.length === 0 && _164.length === 0) {
                return EQ.value;
            };
            if (_163.length === 0) {
                return LT.value;
            };
            if (_164.length === 0) {
                return GT.value;
            };
            if (_163.length >= 1) {
                var _884 = _163.slice(1);
                if (_164.length >= 1) {
                    var _882 = _164.slice(1);
                    var _880 = compare(__dict_Ord_11)(_163[0])(_164[0]);
                    if (_880 instanceof EQ) {
                        return compare(ordArray(__dict_Ord_11))(_884)(_882);
                    };
                    return _880;
                };
            };
            throw new Error("Failed pattern match");
        };
    });
};
var eqOrdering = new Eq(function (x) {
    return function (y) {
        return not(boolLikeBoolean)($eq$eq(eqOrdering)(x)(y));
    };
}, function (_155) {
    return function (_156) {
        if (_155 instanceof LT && _156 instanceof LT) {
            return true;
        };
        if (_155 instanceof GT && _156 instanceof GT) {
            return true;
        };
        if (_155 instanceof EQ && _156 instanceof EQ) {
            return true;
        };
        return false;
    };
});
var bitsNumber = new Bits(numAnd, numXor, numOr, numComplement, numShl, numShr, numZshr);
var asTypeOf = function (x) {
    return function (_146) {
        return x;
    };
};
var applyArr = new Apply(function (f) {
    return function (g) {
        return function (x) {
            return f(x)(g(x));
        };
    };
}, function () {
    return functorArr;
});
var bindArr = new Bind(function (m) {
    return function (f) {
        return function (x) {
            return f(m(x))(x);
        };
    };
}, function () {
    return applyArr;
});
var applicativeArr = new Applicative(function () {
    return applyArr;
}, $$const);
var monadArr = new Monad(function () {
    return applicativeArr;
}, function () {
    return bindArr;
});
var ap = function (__dict_Monad_16) {
    return function (f) {
        return function (a) {
            return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                    return $$return(__dict_Monad_16)(_2(_1));
                });
            });
        };
    };
};
module.exports = {
    Unit: Unit, 
    LT: LT, 
    GT: GT, 
    EQ: EQ, 
    Semigroup: Semigroup, 
    BoolLike: BoolLike, 
    Bits: Bits, 
    Ord: Ord, 
    Eq: Eq, 
    Num: Num, 
    DivisionRing: DivisionRing, 
    Ring: Ring, 
    ModuloSemiring: ModuloSemiring, 
    Semiring: Semiring, 
    Monad: Monad, 
    Bind: Bind, 
    Applicative: Applicative, 
    Apply: Apply, 
    Functor: Functor, 
    Show: Show, 
    Category: Category, 
    Semigroupoid: Semigroupoid, 
    unit: unit, 
    "++": $plus$plus, 
    "<>": $less$greater, 
    not: not, 
    "||": $bar$bar, 
    "&&": $amp$amp, 
    complement: complement, 
    zshr: zshr, 
    shr: shr, 
    shl: shl, 
    ".^.": $dot$up$dot, 
    ".|.": $dot$bar$dot, 
    ".&.": $dot$amp$dot, 
    ">=": $greater$eq, 
    "<=": $less$eq, 
    ">": $greater, 
    "<": $less, 
    compare: compare, 
    "/=": $div$eq, 
    "==": $eq$eq, 
    negate: negate, 
    "%": $percent, 
    "-": $minus, 
    mod: mod, 
    "/": $div, 
    one: one, 
    "*": $times, 
    zero: zero, 
    "+": $plus, 
    ap: ap, 
    liftM1: liftM1, 
    "return": $$return, 
    ">>=": $greater$greater$eq, 
    liftA1: liftA1, 
    pure: pure, 
    "<*>": $less$times$greater, 
    "void": $$void, 
    "<#>": $less$hash$greater, 
    "<$>": $less$dollar$greater, 
    show: show, 
    cons: cons, 
    ":": $colon, 
    "#": $hash, 
    "$": $dollar, 
    id: id, 
    ">>>": $greater$greater$greater, 
    "<<<": $less$less$less, 
    asTypeOf: asTypeOf, 
    "const": $$const, 
    flip: flip, 
    otherwise: otherwise, 
    semigroupoidArr: semigroupoidArr, 
    categoryArr: categoryArr, 
    showUnit: showUnit, 
    showString: showString, 
    showBoolean: showBoolean, 
    showNumber: showNumber, 
    showArray: showArray, 
    functorArr: functorArr, 
    applyArr: applyArr, 
    applicativeArr: applicativeArr, 
    bindArr: bindArr, 
    monadArr: monadArr, 
    semiringNumber: semiringNumber, 
    ringNumber: ringNumber, 
    moduloSemiringNumber: moduloSemiringNumber, 
    divisionRingNumber: divisionRingNumber, 
    numNumber: numNumber, 
    eqUnit: eqUnit, 
    eqString: eqString, 
    eqNumber: eqNumber, 
    eqBoolean: eqBoolean, 
    eqArray: eqArray, 
    eqOrdering: eqOrdering, 
    showOrdering: showOrdering, 
    semigroupOrdering: semigroupOrdering, 
    ordUnit: ordUnit, 
    ordBoolean: ordBoolean, 
    ordNumber: ordNumber, 
    ordString: ordString, 
    ordArray: ordArray, 
    bitsNumber: bitsNumber, 
    boolLikeBoolean: boolLikeBoolean, 
    semigroupUnit: semigroupUnit, 
    semigroupString: semigroupString, 
    semigroupArr: semigroupArr
};

},{}],59:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Control_Alt = require("Control.Alt");
var Text_Parsing_Parser = require("Text.Parsing.Parser");
var Prelude = require("Prelude");
var Control_Alternative = require("Control.Alternative");
var Control_Apply = require("Control.Apply");
var Data_Maybe = require("Data.Maybe");
var Data_Array = require("Data.Array");
var Data_Tuple = require("Data.Tuple");
var Data_Either = require("Data.Either");
var Control_Lazy = require("Control.Lazy");
var Control_Monad = require("Control.Monad");
var Control_Monad_Error_Trans = require("Control.Monad.Error.Trans");
var Control_Monad_Error_Class = require("Control.Monad.Error.Class");
var Control_Monad_State_Trans = require("Control.Monad.State.Trans");
var Control_Monad_State_Class = require("Control.Monad.State.Class");
var $less$qmark$greater = function (__dict_Monad_0) {
    return function (p) {
        return function (msg) {
            return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_0))(p)(Text_Parsing_Parser.fail(__dict_Monad_0)("Expected " + msg));
        };
    };
};
var $$try = function (__dict_Functor_1) {
    return function (p) {
        var try$prime = function (s) {
            return function (_851) {
                if (_851.result instanceof Data_Either.Left) {
                    return {
                        input: s, 
                        result: _851.result, 
                        consumed: false
                    };
                };
                return _851;
            };
        };
        return Text_Parsing_Parser.ParserT(function (s) {
            return Prelude["<$>"](__dict_Functor_1)(try$prime(s))(Text_Parsing_Parser.unParserT(p)(s));
        });
    };
};
var skipMany1 = function (__dict_Monad_2) {
    return function (p) {
        return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_2))(p)(function (_112) {
            return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_2))(skipMany(__dict_Monad_2)(p))(function (_111) {
                return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_2))(Prelude.unit);
            });
        });
    };
};
var skipMany = function (__dict_Monad_3) {
    return function (p) {
        return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_3))(skipMany1(__dict_Monad_3)(p))(Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_3))(Prelude.unit));
    };
};
var sepEndBy1 = function (__dict_Monad_4) {
    return function (p) {
        return function (sep) {
            return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_4))(p)(function (_102) {
                return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_4))(Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_4))(sep)(function () {
                    return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_4))(sepEndBy(__dict_Monad_4)(p)(sep))(function (_101) {
                        return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_4))(Prelude[":"](_102)(_101));
                    });
                }))(Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_4))([ _102 ]));
            });
        };
    };
};
var sepEndBy = function (__dict_Monad_5) {
    return function (p) {
        return function (sep) {
            return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_5))(sepEndBy1(__dict_Monad_5)(p)(sep))(Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_5))([  ]));
        };
    };
};
var sepBy1 = function (__dict_Monad_6) {
    return function (p) {
        return function (sep) {
            return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_6))(p)(function (_100) {
                return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_6))(Control_Alternative.many(Text_Parsing_Parser.alternativeParserT(__dict_Monad_6))(Text_Parsing_Parser.lazy1ParserT)(Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_6))(sep)(function () {
                    return p;
                })))(function (_99) {
                    return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_6))(Prelude[":"](_100)(_99));
                });
            });
        };
    };
};
var sepBy = function (__dict_Monad_7) {
    return function (p) {
        return function (sep) {
            return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_7))(sepBy1(__dict_Monad_7)(p)(sep))(Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_7))([  ]));
        };
    };
};
var optional = function (__dict_Monad_8) {
    return function (p) {
        return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_8))(Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_8))(p)(function () {
            return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_8))(Prelude.unit);
        }))(Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_8))(Prelude.unit));
    };
};
var option = function (__dict_Monad_9) {
    return function (a) {
        return function (p) {
            return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_9))(p)(Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_9))(a));
        };
    };
};
var optionMaybe = function (__dict_Functor_10) {
    return function (__dict_Monad_11) {
        return function (p) {
            return option(__dict_Monad_11)(Data_Maybe.Nothing.value)(Prelude["<$>"](Text_Parsing_Parser.functorParserT(__dict_Functor_10))(Data_Maybe.Just.create)(p));
        };
    };
};
var notFollowedBy = function (__dict_Monad_12) {
    return function (p) {
        return $$try(((__dict_Monad_12["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_12))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(__dict_Monad_12))($$try(((__dict_Monad_12["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(p))(Text_Parsing_Parser.fail(__dict_Monad_12)("Negated parser succeeded")))(Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_12))(Prelude.unit)));
    };
};
var manyTill = function (__dict_Monad_13) {
    return function (p) {
        return function (end) {
            var scan = Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_13))(Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_13))(end)(function () {
                return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_13))([  ]);
            }))(Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_13))(p)(function (_115) {
                return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_13))(scan)(function (_114) {
                    return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_13))(Prelude[":"](_115)(_114));
                });
            }));
            return scan;
        };
    };
};
var many1Till = function (__dict_Monad_14) {
    return function (p) {
        return function (end) {
            return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_14))(p)(function (_117) {
                return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_14))(manyTill(__dict_Monad_14)(p)(end))(function (_116) {
                    return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_14))(Prelude[":"](_117)(_116));
                });
            });
        };
    };
};
var lookAhead = function (__dict_Monad_15) {
    return function (_850) {
        return function (s) {
            return Prelude[">>="](__dict_Monad_15["__superclass_Prelude.Bind_1"]())(_850(s))(function (_113) {
                return Prelude["return"](__dict_Monad_15)((function () {
                    var _2875 = {};
                    for (var _2876 in _113) {
                        if (_113.hasOwnProperty(_2876)) {
                            _2875[_2876] = _113[_2876];
                        };
                    };
                    _2875.input = s;
                    _2875.consumed = false;
                    return _2875;
                })());
            });
        };
    };
};
var endBy1 = function (__dict_Monad_16) {
    return function (p) {
        return function (sep) {
            return Control_Alternative.some(Text_Parsing_Parser.alternativeParserT(__dict_Monad_16))(Text_Parsing_Parser.lazy1ParserT)(Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_16))(p)(function (_103) {
                return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_16))(sep)(function () {
                    return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_16))(_103);
                });
            }));
        };
    };
};
var endBy = function (__dict_Monad_17) {
    return function (p) {
        return function (sep) {
            return Control_Alternative.many(Text_Parsing_Parser.alternativeParserT(__dict_Monad_17))(Text_Parsing_Parser.lazy1ParserT)(Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_17))(p)(function (_104) {
                return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_17))(sep)(function () {
                    return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_17))(_104);
                });
            }));
        };
    };
};
var choice = function (__dict_Monad_18) {
    return function (_849) {
        if (_849.length === 0) {
            return Text_Parsing_Parser.fail(__dict_Monad_18)("Nothing to parse");
        };
        if (_849.length === 1) {
            return _849[0];
        };
        if (_849.length >= 1) {
            var _2882 = _849.slice(1);
            return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_18))(_849[0])(choice(__dict_Monad_18)(_2882));
        };
        throw new Error("Failed pattern match");
    };
};
var chainr1$prime = function (__dict_Monad_19) {
    return function (p) {
        return function (f) {
            return function (a) {
                return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_19))(Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_19))(f)(function (_110) {
                    return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_19))(chainr1(__dict_Monad_19)(p)(f))(function (_109) {
                        return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_19))(_110(a)(_109));
                    });
                }))(Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_19))(a));
            };
        };
    };
};
var chainr1 = function (__dict_Monad_20) {
    return function (p) {
        return function (f) {
            return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_20))(p)(function (_108) {
                return chainr1$prime(__dict_Monad_20)(p)(f)(_108);
            });
        };
    };
};
var chainr = function (__dict_Monad_21) {
    return function (p) {
        return function (f) {
            return function (a) {
                return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_21))(chainr1(__dict_Monad_21)(p)(f))(Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_21))(a));
            };
        };
    };
};
var chainl1$prime = function (__dict_Monad_22) {
    return function (p) {
        return function (f) {
            return function (a) {
                return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_22))(Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_22))(f)(function (_107) {
                    return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_22))(p)(function (_106) {
                        return chainl1$prime(__dict_Monad_22)(p)(f)(_107(a)(_106));
                    });
                }))(Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_22))(a));
            };
        };
    };
};
var chainl1 = function (__dict_Monad_23) {
    return function (p) {
        return function (f) {
            return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_23))(p)(function (_105) {
                return chainl1$prime(__dict_Monad_23)(p)(f)(_105);
            });
        };
    };
};
var chainl = function (__dict_Monad_24) {
    return function (p) {
        return function (f) {
            return function (a) {
                return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_24))(chainl1(__dict_Monad_24)(p)(f))(Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_24))(a));
            };
        };
    };
};
var between = function (__dict_Monad_25) {
    return function (open) {
        return function (close) {
            return function (p) {
                return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_25))(open)(function () {
                    return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_25))(p)(function (_98) {
                        return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_25))(close)(function () {
                            return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_25))(_98);
                        });
                    });
                });
            };
        };
    };
};
module.exports = {
    many1Till: many1Till, 
    manyTill: manyTill, 
    notFollowedBy: notFollowedBy, 
    lookAhead: lookAhead, 
    skipMany1: skipMany1, 
    skipMany: skipMany, 
    choice: choice, 
    "chainr1'": chainr1$prime, 
    chainr1: chainr1, 
    "chainl1'": chainl1$prime, 
    chainl1: chainl1, 
    chainl: chainl, 
    chainr: chainr, 
    endBy: endBy, 
    endBy1: endBy1, 
    sepEndBy1: sepEndBy1, 
    sepEndBy: sepEndBy, 
    sepBy1: sepBy1, 
    sepBy: sepBy, 
    "try": $$try, 
    optionMaybe: optionMaybe, 
    optional: optional, 
    option: option, 
    between: between, 
    "<?>": $less$qmark$greater
};

},{"Control.Alt":1,"Control.Alternative":2,"Control.Apply":3,"Control.Lazy":6,"Control.Monad":20,"Control.Monad.Error.Class":8,"Control.Monad.Error.Trans":9,"Control.Monad.State.Class":16,"Control.Monad.State.Trans":17,"Data.Array":23,"Data.Either":27,"Data.Maybe":32,"Data.Tuple":44,"Prelude":58,"Text.Parsing.Parser":61}],60:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Monad_Error = require("Control.Monad.Error");
var Data_String = require("Data.String");
var Data_Char = require("Data.Char");
var Text_Parsing_Parser_Combinators = require("Text.Parsing.Parser.Combinators");
var Text_Parsing_Parser = require("Text.Parsing.Parser");
var Control_Alternative = require("Control.Alternative");
var Control_Alt = require("Control.Alt");
var Data_Foldable = require("Data.Foldable");
var Data_Either = require("Data.Either");
var Data_Monoid = require("Data.Monoid");
var Data_Maybe = require("Data.Maybe");
var Control_Monad_Error_Class = require("Control.Monad.Error.Class");
var Control_Monad_State_Class = require("Control.Monad.State.Class");
var string = function (__dict_Monad_0) {
    return function (s) {
        return Text_Parsing_Parser.ParserT(function (s$prime) {
            return Prelude["return"](__dict_Monad_0)((function () {
                var _2921 = Data_String.indexOf(s)(s$prime);
                if (_2921 === 0) {
                    return {
                        consumed: true, 
                        input: Data_String.drop(Data_String.length(s))(s$prime), 
                        result: new Data_Either.Right(s)
                    };
                };
                return {
                    consumed: false, 
                    input: s$prime, 
                    result: new Data_Either.Left(Control_Monad_Error.strMsg(Text_Parsing_Parser.errorParseError)("Expected " + Prelude.show(Prelude.showString)(s)))
                };
            })());
        });
    };
};
var whiteSpace = function (__dict_Monad_1) {
    return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_1))(Control_Alternative.many(Text_Parsing_Parser.alternativeParserT(__dict_Monad_1))(Text_Parsing_Parser.lazy1ParserT)(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_1))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_1))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_1))(string(__dict_Monad_1)("\n"))(string(__dict_Monad_1)("\r")))(string(__dict_Monad_1)(" ")))(string(__dict_Monad_1)("\t"))))(function (_130) {
        return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_1))(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(Prelude.id(Prelude.categoryArr))(_130));
    });
};
var skipSpaces = function (__dict_Monad_2) {
    return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_2))(whiteSpace(__dict_Monad_2))(function () {
        return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_2))(Prelude.unit);
    });
};
var eof = function (__dict_Monad_3) {
    return Text_Parsing_Parser.ParserT(function (s) {
        return Prelude["return"](__dict_Monad_3)((function () {
            if (s === "") {
                return {
                    consumed: false, 
                    input: s, 
                    result: new Data_Either.Right(Prelude.unit)
                };
            };
            return {
                consumed: false, 
                input: s, 
                result: new Data_Either.Left(Control_Monad_Error.strMsg(Text_Parsing_Parser.errorParseError)("Expected EOF"))
            };
        })());
    });
};
var $$char = function (__dict_Monad_4) {
    return Text_Parsing_Parser.ParserT(function (s$prime) {
        return Prelude["return"](__dict_Monad_4)((function () {
            var _2924 = Data_String.charAt(0)(s$prime);
            if (_2924 instanceof Data_Maybe.Nothing) {
                return {
                    consumed: false, 
                    input: s$prime, 
                    result: new Data_Either.Left(Control_Monad_Error.strMsg(Text_Parsing_Parser.errorParseError)("Unexpected EOF"))
                };
            };
            if (_2924 instanceof Data_Maybe.Just) {
                return {
                    consumed: true, 
                    input: Data_String.drop(1)(s$prime), 
                    result: new Data_Either.Right(Data_Char.charString(_2924.value0))
                };
            };
            throw new Error("Failed pattern match");
        })());
    });
};
var satisfy = function (__dict_Monad_5) {
    return function (f) {
        return Text_Parsing_Parser_Combinators["try"](((__dict_Monad_5["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_5))($$char(__dict_Monad_5))(function (_129) {
            var _2927 = f(_129);
            if (_2927) {
                return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_5))(_129);
            };
            if (!_2927) {
                return Text_Parsing_Parser.fail(__dict_Monad_5)("Character did not satisfy predicate");
            };
            throw new Error("Failed pattern match");
        }));
    };
};
var noneOf = function (__dict_Monad_6) {
    return function (ss) {
        return satisfy(__dict_Monad_6)(Prelude.flip(Data_Foldable.notElem(Prelude.eqString)(Data_Foldable.foldableArray))(ss));
    };
};
var oneOf = function (__dict_Monad_7) {
    return function (ss) {
        return satisfy(__dict_Monad_7)(Prelude.flip(Data_Foldable.elem(Prelude.eqString)(Data_Foldable.foldableArray))(ss));
    };
};
module.exports = {
    noneOf: noneOf, 
    oneOf: oneOf, 
    skipSpaces: skipSpaces, 
    whiteSpace: whiteSpace, 
    satisfy: satisfy, 
    "char": $$char, 
    string: string, 
    eof: eof
};

},{"Control.Alt":1,"Control.Alternative":2,"Control.Monad.Error":10,"Control.Monad.Error.Class":8,"Control.Monad.State.Class":16,"Data.Char":24,"Data.Either":27,"Data.Foldable":28,"Data.Maybe":32,"Data.Monoid":38,"Data.String":42,"Prelude":58,"Text.Parsing.Parser":61,"Text.Parsing.Parser.Combinators":59}],61:[function(require,module,exports){
// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Identity = require("Data.Identity");
var Data_Either = require("Data.Either");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var Data_Tuple = require("Data.Tuple");
var Control_Alt = require("Control.Alt");
var Control_Alternative = require("Control.Alternative");
var Control_Lazy = require("Control.Lazy");
var Control_Monad = require("Control.Monad");
var Control_Monad_Trans = require("Control.Monad.Trans");
var Control_Monad_State_Class = require("Control.Monad.State.Class");
var Control_Monad_State_Trans = require("Control.Monad.State.Trans");
var Control_Monad_Error = require("Control.Monad.Error");
var Control_Monad_Error_Class = require("Control.Monad.Error.Class");
var Control_Monad_Error_Trans = require("Control.Monad.Error.Trans");
var Control_MonadPlus = require("Control.MonadPlus");
var Control_Plus = require("Control.Plus");
var ParseError = (function () {
    function ParseError(value0) {
        this.value0 = value0;
    };
    ParseError.create = function (value0) {
        return new ParseError(value0);
    };
    return ParseError;
})();
var ParserT = function (x) {
    return x;
};
var unParserT = function (_847) {
    return _847;
};
var showParseError = new Prelude.Show(function (_848) {
    return "ParseError { message: " + (_848.value0.message + " }");
});
var runParserT = function (__dict_Monad_0) {
    return function (s) {
        return function (p) {
            return Prelude[">>="](__dict_Monad_0["__superclass_Prelude.Bind_1"]())(unParserT(p)(s))(function (_97) {
                return Prelude["return"](__dict_Monad_0)(_97.result);
            });
        };
    };
};
var runParser = function (s) {
    return Prelude["<<<"](Prelude.semigroupoidArr)(Data_Identity.runIdentity)(runParserT(Data_Identity.monadIdentity)(s));
};
var monadTransParserT = new Control_Monad_Trans.MonadTrans(function (__dict_Monad_1) {
    return function (m) {
        return ParserT(function (s) {
            return Prelude["<$>"](((__dict_Monad_1["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(function (a) {
                return {
                    input: s, 
                    consumed: false, 
                    result: new Data_Either.Right(a)
                };
            })(m);
        });
    };
});
var monadStateParserT = function (__dict_Monad_2) {
    return new Control_Monad_State_Class.MonadState(function (f) {
        return ParserT(function (s) {
            return Prelude["return"](__dict_Monad_2)((function () {
                var _2851 = f(s);
                return {
                    input: _2851.value1, 
                    consumed: false, 
                    result: new Data_Either.Right(_2851.value0)
                };
            })());
        });
    });
};
var lazy1ParserT = new Control_Lazy.Lazy1(function (f) {
    return ParserT(function (s) {
        return unParserT(f(Prelude.unit))(s);
    });
});
var functorParserT = function (__dict_Functor_5) {
    return new Prelude.Functor(function (f) {
        return function (p) {
            var f$prime = function (o) {
                return {
                    input: o.input, 
                    result: Prelude["<$>"](Data_Either.functorEither)(f)(o.result), 
                    consumed: o.consumed
                };
            };
            return ParserT(function (s) {
                return Prelude["<$>"](__dict_Functor_5)(f$prime)(unParserT(p)(s));
            });
        };
    });
};
var fail = function (__dict_Monad_6) {
    return function (message) {
        return ParserT(function (s) {
            return Prelude["return"](__dict_Monad_6)({
                input: s, 
                consumed: false, 
                result: new Data_Either.Left(new ParseError({
                    message: message
                }))
            });
        });
    };
};
var errorParseError = new Control_Monad_Error["Error"](new ParseError({
    message: ""
}), function (msg) {
    return new ParseError({
        message: msg
    });
});
var consume = function (__dict_Monad_8) {
    return ParserT(function (s) {
        return Prelude["return"](__dict_Monad_8)({
            consumed: true, 
            input: s, 
            result: new Data_Either.Right(Prelude.unit)
        });
    });
};
var monadParserT = function (__dict_Monad_4) {
    return new Prelude.Monad(function () {
        return applicativeParserT(__dict_Monad_4);
    }, function () {
        return bindParserT(__dict_Monad_4);
    });
};
var bindParserT = function (__dict_Monad_9) {
    return new Prelude.Bind(function (p) {
        return function (f) {
            var updateConsumedFlag = function (c) {
                return function (o) {
                    return {
                        input: o.input, 
                        consumed: c || o.consumed, 
                        result: o.result
                    };
                };
            };
            return ParserT(function (s) {
                return Prelude[">>="](__dict_Monad_9["__superclass_Prelude.Bind_1"]())(unParserT(p)(s))(function (o) {
                    if (o.result instanceof Data_Either.Left) {
                        return Prelude["return"](__dict_Monad_9)({
                            input: o.input, 
                            result: new Data_Either.Left(o.result.value0), 
                            consumed: o.consumed
                        });
                    };
                    if (o.result instanceof Data_Either.Right) {
                        return Prelude["<$>"](((__dict_Monad_9["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(updateConsumedFlag(o.consumed))(unParserT(f(o.result.value0))(o.input));
                    };
                    throw new Error("Failed pattern match");
                });
            });
        };
    }, function () {
        return applyParserT(__dict_Monad_9);
    });
};
var applyParserT = function (__dict_Monad_10) {
    return new Prelude.Apply(Prelude.ap(monadParserT(__dict_Monad_10)), function () {
        return functorParserT(((__dict_Monad_10["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
    });
};
var applicativeParserT = function (__dict_Monad_11) {
    return new Prelude.Applicative(function () {
        return applyParserT(__dict_Monad_11);
    }, function (a) {
        return ParserT(function (s) {
            return Prelude.pure(__dict_Monad_11["__superclass_Prelude.Applicative_0"]())({
                input: s, 
                result: new Data_Either.Right(a), 
                consumed: false
            });
        });
    });
};
var altParserT = function (__dict_Monad_13) {
    return new Control_Alt.Alt(function (p1) {
        return function (p2) {
            return ParserT(function (s) {
                return Prelude[">>="](__dict_Monad_13["__superclass_Prelude.Bind_1"]())(unParserT(p1)(s))(function (o) {
                    if (o.result instanceof Data_Either.Left && !o.consumed) {
                        return unParserT(p2)(s);
                    };
                    return Prelude["return"](__dict_Monad_13)(o);
                });
            });
        };
    }, function () {
        return functorParserT(((__dict_Monad_13["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
    });
};
var plusParserT = function (__dict_Monad_7) {
    return new Control_Plus.Plus(function () {
        return altParserT(__dict_Monad_7);
    }, fail(__dict_Monad_7)("No alternative"));
};
var alternativeParserT = function (__dict_Monad_12) {
    return new Control_Alternative.Alternative(function () {
        return plusParserT(__dict_Monad_12);
    }, function () {
        return applicativeParserT(__dict_Monad_12);
    });
};
var monadPlusParserT = function (__dict_Monad_3) {
    return new Control_MonadPlus.MonadPlus(function () {
        return alternativeParserT(__dict_Monad_3);
    }, function () {
        return monadParserT(__dict_Monad_3);
    });
};
module.exports = {
    ParserT: ParserT, 
    ParseError: ParseError, 
    fail: fail, 
    consume: consume, 
    runParser: runParser, 
    runParserT: runParserT, 
    unParserT: unParserT, 
    errorParseError: errorParseError, 
    showParseError: showParseError, 
    functorParserT: functorParserT, 
    applyParserT: applyParserT, 
    applicativeParserT: applicativeParserT, 
    altParserT: altParserT, 
    plusParserT: plusParserT, 
    alternativeParserT: alternativeParserT, 
    bindParserT: bindParserT, 
    monadParserT: monadParserT, 
    monadPlusParserT: monadPlusParserT, 
    monadTransParserT: monadTransParserT, 
    monadStateParserT: monadStateParserT, 
    lazy1ParserT: lazy1ParserT
};

},{"Control.Alt":1,"Control.Alternative":2,"Control.Lazy":6,"Control.Monad":20,"Control.Monad.Error":10,"Control.Monad.Error.Class":8,"Control.Monad.Error.Trans":9,"Control.Monad.State.Class":16,"Control.Monad.State.Trans":17,"Control.Monad.Trans":18,"Control.MonadPlus":21,"Control.Plus":22,"Data.Either":27,"Data.Identity":31,"Data.Maybe":32,"Data.Monoid":38,"Data.Tuple":44,"Prelude":58}],62:[function(require,module,exports){
(function (global){
var expressoParser = require('Expresso.Parser');
var Prelude = require('Prelude');
var Data = require('Expresso.Parser.Data');
var Operators = require('Expresso.Operations');

expressionOperator = function(operator) {
    return function(left, expressionForRight) {
        var right = expressionForRight.rawExpression;

        return operator(left)(right);
    };
};

function Expression(value) {
    this.rawExpression = value;
    
    this.and = function(expression) {
        var andF = expressionOperator(Operators.expressionAnd);
        var andedResult = andF(value, expression);
        
        return new Expression(andedResult);
    };

    this.or = function(expression) {
        var orF = expressionOperator(Operators.expressionOr);
        var oredResult = orF(value, expression);
        
        return new Expression(oredResult);
    };
      
    this.replacePlaceholderWith = function(expression) {
        var replacedValue = Operators.replacePlaceholder(expression.rawExpression)(value);

        if(replacedValue.value0) return new Expression(replacedValue.value0);

        return undefined;
    }
    this.toString = function() { return Data.expressionShow.show(value); };
}

function Expresso() {
    this.parseExpression = function(incoming) {
        var parse = expressoParser.parseExpressoExpression(incoming);

        if(parse.value0) return new Expression(parse.value0);

        return undefined;
    };

    this.findPlaceholder = function(value) {
        return Operators.findPlaceholder(value.rawExpression);
    };

};

global.Expresso = new Expresso();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"Expresso.Operations":46,"Expresso.Parser":48,"Expresso.Parser.Data":47,"Prelude":58}]},{},[62]);
